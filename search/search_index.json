{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SentinelIQ SDK","text":"<p>Bem-vindo \u00e0 documenta\u00e7\u00e3o oficial do SentinelIQ SDK! Este kit de desenvolvimento de software foi projetado para capacit\u00e1-lo a construir analisadores e respondedores robustos para suas necessidades de seguran\u00e7a cibern\u00e9tica. Explore como come\u00e7ar, os conceitos fundamentais, a refer\u00eancia da API, exemplos pr\u00e1ticos e diretrizes para contribuidores.</p>"},{"location":"#links-rapidos","title":"Links R\u00e1pidos","text":"<ul> <li>Come\u00e7ando: Instala\u00e7\u00e3o, in\u00edcio r\u00e1pido e seu primeiro analisador.</li> <li>Guias: Guia completo do Agente com conven\u00e7\u00f5es e padr\u00f5es.</li> <li>Refer\u00eancia: Documenta\u00e7\u00e3o da API (Worker, Analyzer, Responder, Extractor, Models).</li> <li>Exemplos: Scripts execut\u00e1veis para provedores comuns.</li> <li>Solu\u00e7\u00e3o de Problemas: Problemas comuns e perguntas frequentes.</li> </ul> <p>Reposit\u00f3rio: https://github.com/killsearch/sentineliqsdk</p>"},{"location":"architecture/overview/","title":"Vis\u00e3o Geral da Arquitetura","text":"<p>Princ\u00edpios de Design:</p> <ul> <li>SOLID: classes pequenas e compostas, com pontos de extens\u00e3o claros.</li> <li>Dataclasses: envelopes fortemente tipados para entrada/sa\u00edda.</li> <li>Stdlib-first: Extractor prefere <code>ipaddress</code>, <code>urllib.parse</code>, <code>email.utils</code> em vez de regexes complexas.</li> </ul> <p>M\u00f3dulos e Responsabilidades:</p> <ul> <li>Worker Core: <code>src/sentineliqsdk/core/worker.py</code></li> <li>Aplica\u00e7\u00e3o de TLP/PAP, configura\u00e7\u00e3o de ambiente proxy, relat\u00f3rio de erros com configura\u00e7\u00e3o sanitizada.</li> <li>Hooks: <code>summary</code>, <code>artifacts</code>, <code>operations</code>, <code>run</code>.</li> <li>Base do Analisador: <code>src/sentineliqsdk/analyzers/base.py</code></li> <li>Autoextra\u00e7\u00e3o de IOCs em artefatos, helpers de taxonomia, manipula\u00e7\u00e3o de arquivos via <code>get_data()</code>.</li> <li>Base do Respondedor: <code>src/sentineliqsdk/responders/base.py</code></li> <li>Envelope de a\u00e7\u00e3o simples, helpers de opera\u00e7\u00e3o.</li> <li>Extrator: <code>src/sentineliqsdk/extractors/regex.py</code></li> <li>Registro e preced\u00eancia de detectores, flags de normaliza\u00e7\u00e3o, verifica\u00e7\u00e3o iter\u00e1vel.</li> <li>Modelos: <code>src/sentineliqsdk/models.py</code></li> <li>Dataclasses: <code>WorkerInput</code>, <code>WorkerConfig</code>, <code>ProxyConfig</code>, <code>TaxonomyEntry</code>, <code>Artifact</code>,     <code>Operation</code>, <code>AnalyzerReport</code>, <code>ResponderReport</code>, <code>WorkerError</code>, <code>ExtractorResult(s)</code>.</li> </ul> <p>Fluxo de Dados (Analisador):</p> <ol> <li>Constru\u00e7\u00e3o com <code>WorkerInput</code>.</li> <li><code>__init__</code> aplica TLP/PAP e configura proxies.</li> <li><code>execute()</code> constr\u00f3i o relat\u00f3rio completo e chama <code>self.report(...)</code>.</li> <li>O envelope adiciona os hooks <code>summary</code>, <code>artifacts</code> (autoextra\u00e7\u00e3o) e <code>operations</code>.</li> </ol> <p>Preced\u00eancia do Extrator (primeira correspond\u00eancia vence):</p> <p><code>ip</code> \u2192 <code>cidr</code> \u2192 <code>url</code> \u2192 <code>domain</code> \u2192 <code>hash</code> \u2192 <code>user-agent</code> \u2192 <code>uri_path</code> \u2192 <code>registry</code> \u2192 <code>mail</code> \u2192 <code>mac</code> \u2192 <code>asn</code> \u2192 <code>cve</code> \u2192 <code>ip_port</code> \u2192 <code>fqdn</code></p> <p>Customiza\u00e7\u00e3o:</p> <ul> <li>Registre detectores dinamicamente com <code>Extractor.register_detector(detector, before=..., after=...)</code>.</li> <li>Inclua novos tipos de n\u00facleo atualizando <code>models.DataType</code> e a lista de preced\u00eancia do Extrator.</li> </ul>"},{"location":"development/contributing/","title":"Contribuindo","text":"<p>Bem-vindo(a)! Este SDK segue conven\u00e7\u00f5es claras para manter as contribui\u00e7\u00f5es consistentes e seguras.</p> <p>Refer\u00eancias principais:</p> <ul> <li>Guia do Agente: <code>docs/guides/guide.md</code> (conven\u00e7\u00f5es completas para analisadores/respondedores/detectores)</li> <li>Regras de Desenvolvimento: <code>DEVELOPMENT_RULES.md</code> (padr\u00f5es de codifica\u00e7\u00e3o e fluxo de trabalho detalhados)</li> </ul> <p>Configura\u00e7\u00e3o:</p> <pre><code>uv sync --all-extras --dev  # ou: pip install -e .[dev]\npre-commit install --install-hooks\n</code></pre> <p>Tarefas comuns:</p> <ul> <li>Lint/Tipos: <code>poe lint</code></li> <li>Testes: <code>poe test</code></li> <li>Documenta\u00e7\u00e3o: <code>poe docs</code> (e <code>poe docs-serve</code> para pr\u00e9-visualizar)</li> </ul> <p>Scaffolding:</p> <pre><code>poe new-analyzer  -- --name Shodan\npoe new-responder -- --name BlockIp\npoe new-detector  -- --name MyType\n</code></pre> <p>Checklist (PR):</p> <ul> <li>Estilo de c\u00f3digo: imports absolutos, 4 espa\u00e7os, comprimento da linha \u2264 100</li> <li>Exemplos em <code>examples/</code> (dry-run por padr\u00e3o; <code>--execute</code> para rede)</li> <li>Testes adicionados/atualizados quando aplic\u00e1vel</li> <li><code>poe lint</code> e <code>poe test</code> passam</li> <li>Documenta\u00e7\u00e3o atualizada onde for \u00fatil (Guias/Refer\u00eancia/Exemplos)</li> </ul> <p>Lan\u00e7amentos:</p> <ul> <li>Bump com Commitizen: <code>uv run cz bump</code> (ou <code>--increment patch|minor|major</code>)</li> <li>Push com tags: <code>git push origin main --follow-tags</code></li> <li>Crie um GitHub Release para a tag <code>vX.Y.Z</code> para publicar no PyPI via OIDC</li> </ul>"},{"location":"development/documentation-style-guide/","title":"Guia de Estilo da Documenta\u00e7\u00e3o","text":"<p>Este documento estabelece as diretrizes para a cria\u00e7\u00e3o e manuten\u00e7\u00e3o da documenta\u00e7\u00e3o do SentinelIQ SDK, garantindo consist\u00eancia, clareza e qualidade.</p>"},{"location":"development/documentation-style-guide/#1-estrutura-e-organizacao","title":"1. Estrutura e Organiza\u00e7\u00e3o","text":"<ul> <li>Hierarquia de T\u00edtulos: Utilize t\u00edtulos de forma l\u00f3gica e hier\u00e1rquica (H1 para o t\u00edtulo principal do documento, H2 para se\u00e7\u00f5es principais, H3 para subse\u00e7\u00f5es, etc.).</li> <li>Introdu\u00e7\u00e3o: Todo documento deve come\u00e7ar com uma breve introdu\u00e7\u00e3o que descreva seu prop\u00f3sito e o que o leitor aprender\u00e1.</li> <li>Conclus\u00e3o/Pr\u00f3ximos Passos: Se aplic\u00e1vel, inclua uma se\u00e7\u00e3o de conclus\u00e3o ou sugira os pr\u00f3ximos passos para o leitor.</li> </ul>"},{"location":"development/documentation-style-guide/#2-linguagem-e-tom","title":"2. Linguagem e Tom","text":"<ul> <li>Clareza e Concis\u00e3o: Escreva de forma clara e direta, evitando jarg\u00f5es desnecess\u00e1rios. Seja conciso, mas completo.</li> <li>Tom: Mantenha um tom profissional, objetivo e \u00fatil. Evite linguagem informal ou excessivamente t\u00e9cnica sem explica\u00e7\u00e3o.</li> <li>P\u00fablico-Alvo: Considere o p\u00fablico-alvo (desenvolvedores, analistas de seguran\u00e7a) ao escolher a profundidade e o n\u00edvel de detalhe.</li> </ul>"},{"location":"development/documentation-style-guide/#3-formatacao-de-texto","title":"3. Formata\u00e7\u00e3o de Texto","text":"<ul> <li>Negrito (<code>**texto**</code>): Use para destacar termos importantes, nomes de UI ou conceitos-chave.</li> <li>It\u00e1lico (<code>*texto*</code>): Use para \u00eanfase leve, t\u00edtulos de livros/artigos ou termos estrangeiros.</li> <li>Listas: Utilize listas ordenadas para sequ\u00eancias de passos e listas n\u00e3o ordenadas para itens sem ordem espec\u00edfica.</li> </ul>"},{"location":"development/documentation-style-guide/#4-blocos-de-codigo","title":"4. Blocos de C\u00f3digo","text":"<ul> <li>Sintaxe: Sempre especifique a linguagem do bloco de c\u00f3digo para realce de sintaxe (ex: <code>python`,</code>bash`).</li> <li>Exemplos Completos: Forne\u00e7a exemplos de c\u00f3digo completos e execut\u00e1veis sempre que poss\u00edvel.</li> <li>Coment\u00e1rios: Adicione coment\u00e1rios explicativos dentro dos blocos de c\u00f3digo quando necess\u00e1rio.</li> <li>Sa\u00edda de Comandos: Inclua a sa\u00edda esperada de comandos quando relevante.</li> </ul>"},{"location":"development/documentation-style-guide/#5-links","title":"5. Links","text":"<ul> <li>Links Internos: Use links relativos para referenciar outros documentos dentro do MkDocs.</li> <li>Links Externos: Para links externos, inclua um texto descritivo (ex: <code>[Documenta\u00e7\u00e3o Oficial do MkDocs](https://www.mkdocs.org/)</code>).</li> </ul>"},{"location":"development/documentation-style-guide/#6-imagens-e-diagramas","title":"6. Imagens e Diagramas","text":"<ul> <li>Relev\u00e2ncia: Inclua imagens e diagramas apenas quando eles adicionarem valor significativo \u00e0 compreens\u00e3o.</li> <li>Acessibilidade: Forne\u00e7a texto alternativo (<code>alt text</code>) descritivo para todas as imagens.</li> <li>Formato: Prefira formatos vetoriais (SVG) para diagramas e \u00edcones. Para capturas de tela, use PNG.</li> </ul>"},{"location":"development/documentation-style-guide/#7-tabelas","title":"7. Tabelas","text":"<ul> <li>Clareza: Use tabelas para apresentar dados estruturados de forma clara e leg\u00edvel.</li> <li>Cabe\u00e7alhos: Sempre inclua cabe\u00e7alhos para as colunas da tabela.</li> </ul>"},{"location":"development/documentation-style-guide/#8-revisao-e-manutencao","title":"8. Revis\u00e3o e Manuten\u00e7\u00e3o","text":"<ul> <li>Revis\u00e3o por Pares: Incentive a revis\u00e3o por pares para garantir a precis\u00e3o e clareza da documenta\u00e7\u00e3o.</li> <li>Atualiza\u00e7\u00e3o: Mantenha a documenta\u00e7\u00e3o atualizada com as mudan\u00e7as no c\u00f3digo e nos recursos.</li> <li>Feedback: Esteja aberto a feedback e sugest\u00f5es para melhorias na documenta\u00e7\u00e3o.</li> </ul>"},{"location":"examples/malware-analysis/","title":"Examples: Malware Analysis","text":"<p>Add malware\u2011focused analyzers under <code>examples/analyzers/</code> and link them here. Follow the Agent Guide rules: dataclass inputs, dry\u2011run by default, <code>--execute</code> for real actions, and <code>--include-dangerous</code> for impactful operations (e.g., downloading samples, detonations).</p> <p>Template commands:</p> <pre><code># Run a file\u2011hashing analyzer (example)\npython examples/analyzers/filehash_example.py --help\n\n# Dry\u2011run\npython examples/analyzers/filehash_example.py\n\n# Execute actions (if any)\npython examples/analyzers/filehash_example.py --execute\n</code></pre> <p>Consider adding examples for:</p> <ul> <li>File hashing and metadata extraction</li> <li>Static analysis (strings, PE headers)</li> <li>Sandbox/detonation (gated behind <code>--include-dangerous</code>)</li> </ul>"},{"location":"examples/responders/","title":"Responders","text":""},{"location":"examples/responders/#automation-responders-examples","title":"Automation &amp; Responders Examples","text":"<p>Responders perform actions such as sending notifications or publishing messages. Examples default to dry-run. Use <code>--execute</code> to perform network calls, and <code>--include-dangerous</code> to explicitly acknowledge impactful actions.</p>"},{"location":"examples/responders/#gmail-smtp","title":"Gmail SMTP","text":"<ul> <li>Run help:</li> <li><code>python examples/responders/gmail_smtp_example.py --help</code></li> <li>Dry-run:</li> <li><code>python examples/responders/gmail_smtp_example.py --to someone@example.com</code></li> <li>Execute (pass creds via flags or pre-config):</li> <li><code>python examples/responders/gmail_smtp_example.py --to someone@example.com --username user --password APPPASS --execute --include-dangerous</code></li> </ul>"},{"location":"examples/responders/#outlookoffice365-smtp","title":"Outlook/Office365 SMTP","text":"<ul> <li>Dry-run:</li> <li><code>python examples/responders/outlook_smtp_example.py --to someone@example.com</code></li> <li>Execute (pass creds via flags or pre-config):</li> <li><code>python examples/responders/outlook_smtp_example.py --to someone@example.com --username user --password PASS --execute --include-dangerous</code></li> </ul>"},{"location":"examples/responders/#webhook","title":"Webhook","text":"<ul> <li>POST to a webhook URL with optional headers/body (string or JSON):</li> <li><code>python examples/responders/webhook_example.py --url https://httpbin.org/post --headers '{\"X-Test\":\"1\"}' --body '{\"ok\":true}'</code></li> <li>Execute:</li> <li><code>python examples/responders/webhook_example.py --url https://httpbin.org/post --execute --include-dangerous</code></li> </ul>"},{"location":"examples/responders/#kafka-via-rest-proxy","title":"Kafka via REST Proxy","text":"<ul> <li>Publish to a Kafka topic using Confluent REST Proxy:</li> <li><code>python examples/responders/kafka_rest_example.py --rest-url http://localhost:8082 --topic demo --message \"hello\"</code></li> <li>With headers and basic auth:</li> <li><code>python examples/responders/kafka_rest_example.py --rest-url http://localhost:8082 --topic demo --message \"hello\" --headers '{\"X-Trace\":\"1\"}' --auth user:pass --execute --include-dangerous</code></li> </ul>"},{"location":"examples/responders/#rabbitmq-via-http-api","title":"RabbitMQ via HTTP API","text":"<ul> <li>Publish to an exchange:</li> <li><code>python examples/responders/rabbitmq_http_example.py --api-url http://localhost:15672 --exchange my-ex --routing-key test --message \"hello\"</code></li> <li>Execute with auth and properties:</li> <li><code>python examples/responders/rabbitmq_http_example.py --api-url http://localhost:15672 --exchange my-ex --routing-key test --message \"hello\" --username guest --password guest --properties '{\"delivery_mode\":2}' --execute --include-dangerous</code></li> </ul> <p>Notes: - All examples are stdlib-only (no extra dependencies). Network calls require <code>--execute</code>. - Impactful operations are gated by <code>--include-dangerous</code>. - Configure programaticamente via <code>WorkerConfig.params</code> e <code>WorkerConfig.secrets</code>; n\u00e3o h\u00e1 suporte   por vari\u00e1veis de ambiente para estes m\u00f3dulos.</p>"},{"location":"examples/threat-intelligence/","title":"Examples: Threat Intelligence","text":"<p>This section shows runnable examples for common TI providers. Examples default to dry\u2011run and print the planned request. Use <code>--execute</code> to perform real network calls. Dangerous actions must be explicitly allowed with <code>--include-dangerous</code>.</p> <p>Shodan (multi\u2011method harness):</p> <pre><code>python examples/analyzers/shodan_analyzer_all_methods.py --api-key YOUR_KEY           # plan only\npython examples/analyzers/shodan_analyzer_all_methods.py --api-key YOUR_KEY --execute  # perform calls\n\n# Run a subset of methods, include \"dangerous\" ones explicitly\npython examples/analyzers/shodan_analyzer_all_methods.py \\\n  --api-key YOUR_KEY --only host_information,ports --execute\n\npython examples/analyzers/shodan_analyzer_all_methods.py \\\n  --api-key YOUR_KEY --include-dangerous --only scan --execute\n</code></pre> <p>File: examples/analyzers/shodan_analyzer_all_methods.py</p> <p>Axur (generic API caller):</p> <pre><code># Use wrappers (e.g., customers, tickets_search)\npython examples/analyzers/axur_example.py --token YOUR_TOKEN --method customers\n\n# Arbitrary path via --method=call\npython examples/analyzers/axur_example.py \\\n  --token YOUR_TOKEN \\\n  --method call \\\n  --path tickets-api/tickets \\\n  --query '{\"page\":1}' \\\n  --execute\n</code></pre> <p>File: examples/analyzers/axur_example.py</p> <p>AbuseIPDB (IP reputation):</p> <pre><code>python examples/analyzers/abuseipdb_example.py --ip 1.2.3.4 --api-key YOUR_KEY           # plan only\npython examples/analyzers/abuseipdb_example.py --ip 1.2.3.4 --api-key YOUR_KEY --execute  # perform call\n</code></pre> <p>File: examples/analyzers/abuseipdb_example.py</p> <p>AutoFocus (Palo Alto Networks threat intelligence):</p> <pre><code># Search for IP address (dry-run)\npython examples/analyzers/autofocus_example.py --data-type ip --data 1.2.3.4 --service search_ioc\n\n# Analyze hash sample (dry-run)\npython examples/analyzers/autofocus_example.py --data-type hash --data abc123... --service get_sample_analysis\n\n# Search for domain (dry-run)\npython examples/analyzers/autofocus_example.py --data-type domain --data malicious.com --service search_ioc\n\n# Execute real searches (requires API key)\npython examples/analyzers/autofocus_example.py --data-type ip --data 1.2.3.4 --service search_ioc --execute\n\n# Use specific API key\npython examples/analyzers/autofocus_example.py \\\n  --data-type url \\\n  --data \"https://malicious.com/payload.exe\" \\\n  --service search_ioc \\\n  --apikey YOUR_API_KEY \\\n  --execute\n</code></pre> <p>File: examples/analyzers/autofocus_example.py</p> <p>CIRCL Hashlookup (hash reputation and relationships):</p> <pre><code># Basic hash lookup (dry-run)\npython examples/analyzers/circl_hashlookup_example.py\n\n# Execute all methods (no API key required - public service)\npython examples/analyzers/circl_hashlookup_example.py --execute\n\n# Run specific methods only\npython examples/analyzers/circl_hashlookup_example.py \\\n  --execute --only lookup_md5,get_info\n\n# Include session methods (potentially stateful)\npython examples/analyzers/circl_hashlookup_example.py \\\n  --execute --include-dangerous --only create_session,get_session\n</code></pre> <p>File: examples/analyzers/circl_hashlookup_example.py</p> <p>Notes:</p> <ul> <li>Ensure proxies if required by your network: use <code>WorkerInput.config.proxy</code>.</li> <li>Respect TLP/PAP defaults in your environment; see the Agent Guide for details.</li> <li>AutoFocus requires a valid API key for real searches; use <code>--apikey</code> or set <code>AUTOFOCUS_API_KEY</code> environment variable.</li> <li>CIRCL Hashlookup is a public service that doesn't require API keys; supports MD5, SHA1, SHA256, and SHA512 hashes.</li> </ul>"},{"location":"getting-started/first-analyzer/","title":"Seu Primeiro Analisador","text":"<p>Este tutorial ir\u00e1 gui\u00e1-lo atrav\u00e9s do processo de scaffolding, implementa\u00e7\u00e3o e execu\u00e7\u00e3o do seu primeiro analisador no SentinelIQ SDK.</p>"},{"location":"getting-started/first-analyzer/#1-scaffolding-com-poe","title":"1) Scaffolding com Poe","text":"<p>Comece criando a estrutura b\u00e1sica do seu analisador usando o comando <code>poe new-analyzer</code>:</p> <pre><code>poe new-analyzer -- --name Reputation\n</code></pre> <p>Este comando ir\u00e1 gerar os seguintes arquivos:</p> <ul> <li><code>src/sentineliqsdk/analyzers/reputation.py</code>: Onde a l\u00f3gica principal do seu analisador ser\u00e1 implementada.</li> <li><code>examples/analyzers/reputation_example.py</code>: Um exemplo execut\u00e1vel para testar seu analisador.</li> <li><code>tests/analyzers/test_reputation.py</code>: Arquivo de testes (se os templates de scaffolding inclu\u00edrem testes).</li> </ul>"},{"location":"getting-started/first-analyzer/#2-implementando-execute-e-run","title":"2) Implementando <code>execute()</code> e <code>run()</code>","text":"<p>Edite o arquivo <code>src/sentineliqsdk/analyzers/reputation.py</code> para incluir a l\u00f3gica do seu analisador. O esqueleto abaixo demonstra como marcar um IP espec\u00edfico como malicioso:</p> <pre><code>from __future__ import annotations\n\nfrom sentineliqsdk import Analyzer\nfrom sentineliqsdk.models import AnalyzerReport\n\n\nclass ReputationAnalyzer(Analyzer):\n    def execute(self) -&gt; AnalyzerReport:\n        observable = self.get_data()\n        verdict = \"malicious\" if observable == \"1.2.3.4\" else \"safe\"\n        tax = self.build_taxonomy(verdict, \"reputation\", \"static\", str(observable))\n        return self.report({\n            \"observable\": observable,\n            \"verdict\": verdict,\n            \"taxonomy\": [tax.to_dict()],\n        })\n\n    def run(self) -&gt; AnalyzerReport:\n        return self.execute()\n</code></pre>"},{"location":"getting-started/first-analyzer/#3-executando-o-exemplo","title":"3) Executando o Exemplo","text":"<p>Para testar seu analisador, execute o arquivo de exemplo gerado:</p> <pre><code>python examples/analyzers/reputation_example.py\n</code></pre>"},{"location":"getting-started/first-analyzer/#4-lint-e-testes","title":"4) Lint e Testes","text":"<p>\u00c9 crucial garantir a qualidade do c\u00f3digo. Execute as ferramentas de linting e testes para verificar conformidade e funcionalidade:</p> <pre><code>pore lint\npore test\n</code></pre>"},{"location":"getting-started/first-analyzer/#dicas-importantes","title":"Dicas Importantes","text":"<ul> <li>Modo Dry-Run: Exemplos devem ser executados em modo dry-run por padr\u00e3o. Exija o uso de <code>--execute</code> para chamadas de rede ou opera\u00e7\u00f5es que alteram o estado.</li> <li>Taxonomia: Sempre inclua a taxonomia no <code>full_report</code> usando <code>.to_dict()</code>.</li> <li>Extra\u00e7\u00e3o Autom\u00e1tica: Utilize <code>auto_extract</code> (padr\u00e3o) para extrair IOCs (Indicadores de Compromisso) automaticamente do seu relat\u00f3rio completo.</li> </ul>"},{"location":"getting-started/installation/","title":"Instala\u00e7\u00e3o","text":"<p>Este guia detalha como instalar o SentinelIQ SDK e configurar seu ambiente de desenvolvimento.</p>"},{"location":"getting-started/installation/#pre-requisitos","title":"Pr\u00e9-requisitos","text":"<p>Certifique-se de ter os seguintes pr\u00e9-requisitos instalados em seu sistema:</p> <ul> <li>Python 3.13: A vers\u00e3o recomendada para o desenvolvimento com o SDK.</li> <li>Ambiente Virtual: Altamente recomendado para gerenciar as depend\u00eancias do projeto de forma isolada.</li> </ul>"},{"location":"getting-started/installation/#instalacao-via-pypi","title":"Instala\u00e7\u00e3o via PyPI","text":"<p>Para instalar a vers\u00e3o mais recente do SentinelIQ SDK diretamente do PyPI, siga os passos abaixo:</p> <pre><code>pip install --upgrade pip\npip install sentineliqsdk\n</code></pre>"},{"location":"getting-started/installation/#verificacao-da-instalacao","title":"Verifica\u00e7\u00e3o da Instala\u00e7\u00e3o","text":"<p>Ap\u00f3s a instala\u00e7\u00e3o, voc\u00ea pode verificar se o SDK foi instalado corretamente executando o seguinte comando:</p> <pre><code>python -c \"import importlib.metadata as m; print(m.version('sentineliqsdk'))\"\n</code></pre>"},{"location":"getting-started/installation/#configuracao-opcional-para-desenvolvedores","title":"Configura\u00e7\u00e3o Opcional para Desenvolvedores","text":"<p>Se voc\u00ea pretende contribuir com o desenvolvimento do SDK ou executar tarefas como testes e gera\u00e7\u00e3o de documenta\u00e7\u00e3o, configure o ambiente de desenvolvimento com as depend\u00eancias extras:</p> <pre><code># Instale as depend\u00eancias de desenvolvimento usando uv (recomendado) ou pip\nuv sync --all-extras --dev  # se uv estiver dispon\u00edvel\n\n# Ou com pip\npip install -e .[dev]\n</code></pre>"},{"location":"getting-started/installation/#construindo-a-documentacao-localmente","title":"Construindo a Documenta\u00e7\u00e3o Localmente","text":"<p>Para gerar e visualizar a documenta\u00e7\u00e3o do projeto localmente, utilize os seguintes comandos:</p> <pre><code>poe docs\n# Para servir a documenta\u00e7\u00e3o localmente em seu navegador\npoe docs-serve\n</code></pre>"},{"location":"getting-started/quick-start/","title":"In\u00edcio R\u00e1pido","text":"<p>Esta p\u00e1gina demonstra o caminho m\u00ednimo para criar e executar um analisador utilizando dataclasses no SentinelIQ SDK.</p>"},{"location":"getting-started/quick-start/#exemplo-minimo-de-analisador","title":"Exemplo M\u00ednimo de Analisador","text":"<pre><code>from __future__ import annotations\n\nimport json\n\nfrom sentineliqsdk import Analyzer, WorkerInput\nfrom sentineliqsdk.models import AnalyzerReport\n\n\nclass ReputationAnalyzer(Analyzer):\n    \"\"\"Marca '1.2.3.4' como malicioso, e outros como seguros.\"\"\"\n\n    def execute(self) -&gt; AnalyzerReport:\n        observable = self.get_data()\n        verdict = \"malicious\" if observable == \"1.2.3.4\" else \"safe\"\n        tax = self.build_taxonomy(level=verdict, namespace=\"reputation\", predicate=\"static\",\n                                  value=str(observable))\n        return self.report({\n            \"observable\": observable,\n            \"verdict\": verdict,\n            \"taxonomy\": [tax.to_dict()],\n        })\n\n    def run(self) -&gt; AnalyzerReport:\n        return self.execute()\n\n\nif __name__ == \"__main__\":\n    report = ReputationAnalyzer(WorkerInput(data_type=\"ip\", data=\"1.2.3.4\")).run()\n    print(json.dumps(report.full_report, ensure_ascii=False))\n</code></pre>"},{"location":"getting-started/quick-start/#como-executar","title":"Como Executar","text":"<p>Para executar o analisador, salve o c\u00f3digo acima em um arquivo (por exemplo, <code>your_script.py</code>) e execute-o via terminal:</p> <pre><code>python path/to/your_script.py\n</code></pre>"},{"location":"getting-started/quick-start/#utilizando-o-runner-facilitador","title":"Utilizando o <code>runner</code> (Facilitador)","text":"<p>O SentinelIQ SDK oferece um <code>runner</code> para simplificar a execu\u00e7\u00e3o de analisadores:</p> <pre><code>from sentineliqsdk import runner, WorkerInput\n\nrunner(ReputationAnalyzer, WorkerInput(data_type=\"ip\", data=\"1.2.3.4\"))\n</code></pre>"},{"location":"getting-started/quick-start/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Consulte o Guia Completo do Agente para conven\u00e7\u00f5es e padr\u00f5es de desenvolvimento.</li> <li>Utilize <code>poe new-analyzer -- --name MeuNovoAnalisador</code> para criar um novo analisador a partir de um template.</li> </ul>"},{"location":"guides/guide/","title":"SentinelIQ SDK \u2014 Guia do Agente","text":"<p>Esta \u00e9 a fonte \u00fanica de verdade para construir analisadores, respondedores e detectores com o SentinelIQ SDK em <code>src/sentineliqsdk</code>. Reflete a implementa\u00e7\u00e3o atual neste reposit\u00f3rio.</p> <p>Requisitos: Python 3.13, imports absolutos, indenta\u00e7\u00e3o de 4 espa\u00e7os, comprimento de linha 100.</p>"},{"location":"guides/guide/#metadados-do-modulo-novo","title":"Metadados do M\u00f3dulo (Novo)","text":"<ul> <li>Todo Analyzer/Responder deve declarar um atributo <code>METADATA</code> usando   <code>sentineliqsdk.models.ModuleMetadata</code> e inclu\u00ed-lo no <code>full_report</code> sob a   chave <code>metadata</code>.</li> <li>Campos obrigat\u00f3rios (chaves quando serializadas via <code>to_dict()</code>):</li> <li><code>Name</code>, <code>Description</code>, <code>Author</code> (lista de \"Nome \"), <code>License</code> <li><code>pattern</code> (ex.: \"smtp\", \"webhook\", \"kafka\", \"threat-intel\")</li> <li><code>doc_pattern</code> (descri\u00e7\u00e3o curta do formato da documenta\u00e7\u00e3o)</li> <li><code>doc</code> (URL p\u00fablica da documenta\u00e7\u00e3o do m\u00f3dulo \u2014 site do SentinelIQ)</li> <li><code>VERSION</code> (um de: <code>DEVELOPER</code>, <code>TESTING</code>, <code>STABLE</code>)</li> <p>Exemplo:</p> <pre><code>from sentineliqsdk.models import ModuleMetadata\n\nclass MyResponder(Responder):\n    METADATA = ModuleMetadata(\n        name=\"My Responder\",\n        description=\"Does something useful\",\n        author=(\"SentinelIQ Team &lt;team@sentineliq.com.br&gt;\",),\n        pattern=\"webhook\",\n        doc_pattern=\"MkDocs module page; programmatic usage\",\n        doc=\"https://killsearch.github.io/sentineliqsdk/modulos/responders/my_responder/\",\n        version_stage=\"TESTING\",\n    )\n\n    def execute(self) -&gt; ResponderReport:\n        full = {\"action\": \"noop\", \"metadata\": self.METADATA.to_dict()}\n        return self.report(full)\n</code></pre>"},{"location":"guides/guide/#exemplos-obrigatorios-regra-do-agente","title":"Exemplos Obrigat\u00f3rios (Regra do Agente)","text":"<ul> <li>Sempre adicione um exemplo execut\u00e1vel em <code>examples/</code> quando introduzir um novo Analyzer, Responder   ou Detector.</li> <li>Nomenclatura: <code>examples/&lt;kind&gt;/&lt;name&gt;_example.py</code> onde <code>&lt;kind&gt;</code> \u2208 {<code>analyzers</code>, <code>responders</code>,   <code>detectors</code>}.</li> <li>O exemplo deve:</li> <li>Usar entrada dataclass (<code>WorkerInput</code>) e chamar <code>.run()</code> (ou <code>.execute()</code> quando fornecido).</li> <li>Ser execut\u00e1vel localmente apenas com stdlib + SDK.</li> <li>Imprimir um resultado compacto para STDOUT. Chamadas de rede padr\u00e3o para dry-run e requerem <code>--execute</code>.     Opera\u00e7\u00f5es impactantes (ex.: scans) devem ser protegidas por <code>--include-dangerous</code>.</li> <li>Referencie seu exemplo no README ou documenta\u00e7\u00e3o quando \u00fatil.</li> </ul>"},{"location":"guides/guide/#atualizacoes-de-documentacao-sempre","title":"Atualiza\u00e7\u00f5es de Documenta\u00e7\u00e3o (Sempre)","text":"<p>Mantenha a documenta\u00e7\u00e3o sincronizada sempre que adicionar ou alterar comportamento:</p> <ul> <li>Atualize p\u00e1ginas em <code>docs/</code> (Guias, Tutoriais, Exemplos, Refer\u00eancia) para refletir o   comportamento atual, flags e port\u00f5es de seguran\u00e7a (<code>--execute</code>, <code>--include-dangerous</code>).</li> <li>Vincule novos exemplos nas p\u00e1ginas relevantes (<code>docs/examples/*.md</code>) e, quando \u00fatil, no README.</li> <li>Adicione uma p\u00e1gina de uso program\u00e1tico para cada m\u00f3dulo em <code>docs/modulos/&lt;kind&gt;/&lt;name&gt;.md</code>.   A p\u00e1gina deve mostrar entrada dataclass (<code>WorkerInput</code>) e chamar <code>.execute()</code> (ou <code>.run()</code>),   usando apenas stdlib + SDK. Atualize a navega\u00e7\u00e3o em <code>mkdocs.yml</code> na se\u00e7\u00e3o \"Modules\".</li> <li>Se adicionar nova API p\u00fablica ou m\u00f3dulos, garanta que p\u00e1ginas mkdocstrings existam e a navega\u00e7\u00e3o em   <code>mkdocs.yml</code> seja atualizada.</li> <li>Valide localmente com <code>poe docs</code> (ou pr\u00e9-visualize com <code>poe docs-serve</code>).</li> </ul>"},{"location":"guides/guide/#scaffolding-tarefas-poe","title":"Scaffolding (Tarefas Poe)","text":"<ul> <li>Gen\u00e9rico: <code>poe new -- --kind &lt;analyzer|responder|detector&gt; --name &lt;Nome&gt; [--force]</code></li> <li>Atalhos:</li> <li>Analyzer: <code>poe new-analyzer -- --name Shodan</code></li> <li>Responder: <code>poe new-responder -- --name BlockIp</code></li> <li>Detector: <code>poe new-detector -- --name MyType</code></li> </ul> <p>Sa\u00eddas (c\u00f3digo + exemplo): - Analyzer: <code>src/sentineliqsdk/analyzers/&lt;snake&gt;.py</code> e <code>examples/analyzers/&lt;snake&gt;_example.py</code> - Responder: <code>src/sentineliqsdk/responders/&lt;snake&gt;.py</code> e   <code>examples/responders/&lt;snake&gt;_example.py</code> - Detector: <code>src/sentineliqsdk/extractors/custom/&lt;snake&gt;_detector.py</code> e   <code>examples/detectors/&lt;snake&gt;_example.py</code></p>"},{"location":"guides/guide/#inicio-rapido","title":"In\u00edcio R\u00e1pido","text":"<p>Analyzer m\u00ednimo usando dataclasses:</p> <pre><code>from __future__ import annotations\n\nimport json\n\nfrom sentineliqsdk import Analyzer, WorkerInput\nfrom sentineliqsdk.models import AnalyzerReport\n\n\nclass ReputationAnalyzer(Analyzer):\n    \"\"\"Marca 1.2.3.4 como malicioso, outros como seguros.\"\"\"\n\n    def execute(self) -&gt; AnalyzerReport:\n        observable = self.get_data()\n        verdict = \"malicious\" if observable == \"1.2.3.4\" else \"safe\"\n        tax = self.build_taxonomy(level=verdict, namespace=\"reputation\", predicate=\"static\",\n                                  value=str(observable))\n        return self.report({\n            \"observable\": observable,\n            \"verdict\": verdict,\n            \"taxonomy\": [tax.to_dict()],\n        })\n\n    def run(self) -&gt; AnalyzerReport:\n        return self.execute()\n\n\nif __name__ == \"__main__\":\n    report = ReputationAnalyzer(WorkerInput(data_type=\"ip\", data=\"1.2.3.4\")).run()\n    print(json.dumps(report.full_report, ensure_ascii=False))\n</code></pre> <p>Execute exemplos diretamente, ex.: <code>python examples/analyzers/shodan_analyzer_all_methods.py --help</code>.</p>"},{"location":"guides/guide/#regras-de-desenvolvimento-criando-novo-analyzerresponderdetector","title":"Regras de Desenvolvimento \u2014 Criando Novo Analyzer/Responder/Detector","text":"<p>Siga estas regras para componentes consistentes. Cada receita lista o layout de arquivos, nomenclatura de classes e um esqueleto m\u00ednimo alinhado com este SDK.</p>"},{"location":"guides/guide/#analyzer","title":"Analyzer","text":"<ul> <li>Arquivos:</li> <li>C\u00f3digo: <code>src/sentineliqsdk/analyzers/&lt;name&gt;.py</code></li> <li>Exemplo: <code>examples/analyzers/&lt;name&gt;_example.py</code></li> <li>Testes: <code>tests/analyzers/test_&lt;name&gt;.py</code></li> <li>Nome da classe: <code>&lt;Nome&gt;Analyzer</code> estendendo <code>sentineliqsdk.analyzers.Analyzer</code>.</li> <li>Imports: absolutos; sempre <code>from __future__ import annotations</code> primeiro.</li> <li>Implementar <code>execute() -&gt; AnalyzerReport</code> e fazer <code>run()</code> retornar <code>self.execute()</code>.</li> <li>Construir taxonomia via <code>self.build_taxonomy(...)</code>; incluir <code>taxonomy.to_dict()</code> no seu payload.</li> <li>Usar apenas dataclasses (<code>WorkerInput</code> \u00e9 obrigat\u00f3rio). TLP/PAP e proxies s\u00e3o aplicados pelo <code>Worker</code>.</li> <li>Exemplos devem ser dry-run por padr\u00e3o e suportar <code>--execute</code> para chamadas reais.</li> </ul> <p>Esqueleto:</p> <pre><code>from __future__ import annotations\n\nfrom sentineliqsdk import Analyzer\nfrom sentineliqsdk.models import AnalyzerReport\n\n\nclass MyAnalyzer(Analyzer):\n    def execute(self) -&gt; AnalyzerReport:\n        observable = self.get_data()\n        taxonomy = self.build_taxonomy(\"safe\", \"namespace\", \"predicate\", str(observable))\n        full = {\"observable\": observable, \"verdict\": \"safe\", \"taxonomy\": [taxonomy.to_dict()]}\n        return self.report(full)\n\n    def run(self) -&gt; AnalyzerReport:\n        return self.execute()\n</code></pre> <p>Checklist:</p> <ul> <li>Nomenclatura e imports em conformidade; classe termina com <code>Analyzer</code>.</li> <li><code>execute()</code> implementado; <code>run()</code> retorna <code>AnalyzerReport</code>.</li> <li>Chama <code>self.report(...)</code> com um dict; taxonomia inclu\u00edda.</li> <li>Exemplo em <code>examples/analyzers/</code> execut\u00e1vel e imprime resultado compacto.</li> <li>Testes adicionados; <code>poe lint</code> e <code>poe test</code> passam.</li> <li>Documenta\u00e7\u00e3o atualizada (Guia/Tutoriais/Exemplos/Refer\u00eancia), links adicionados, <code>mkdocs.yml</code> atualizado se necess\u00e1rio;   <code>poe docs</code> passa localmente.</li> <li>P\u00e1gina de documenta\u00e7\u00e3o program\u00e1tica adicionada: <code>docs/modulos/analyzers/&lt;name&gt;.md</code>.</li> </ul>"},{"location":"guides/guide/#responder","title":"Responder","text":"<ul> <li>Arquivos:</li> <li>C\u00f3digo: <code>src/sentineliqsdk/responders/&lt;name&gt;.py</code></li> <li>Exemplo: <code>examples/responders/&lt;name&gt;_example.py</code></li> <li>Testes: <code>tests/responders/test_&lt;name&gt;.py</code></li> <li>Nome da classe: <code>&lt;Nome&gt;Responder</code> estendendo <code>sentineliqsdk.responders.Responder</code>.</li> <li>Implementar <code>execute() -&gt; ResponderReport</code> e fazer <code>run()</code> retornar <code>self.execute()</code>.</li> <li>Construir opera\u00e7\u00f5es via <code>self.build_operation(...)</code> e chamar <code>self.report(full_report)</code>.</li> </ul> <p>Esqueleto:</p> <pre><code>from __future__ import annotations\n\nfrom sentineliqsdk import Responder\nfrom sentineliqsdk.models import ResponderReport\n\n\nclass MyResponder(Responder):\n    def execute(self) -&gt; ResponderReport:\n        target = self.get_data()\n        ops = [self.build_operation(\"block\", target=target)]\n        full = {\"action\": \"block\", \"target\": target}\n        return self.report(full)\n\n    def run(self) -&gt; ResponderReport:\n        return self.execute()\n</code></pre> <p>Checklist:</p> <ul> <li>Nomenclatura e caminhos corretos; imports absolutos.</li> <li><code>execute()</code> e <code>run()</code> retornam <code>ResponderReport</code>.</li> <li>Opera\u00e7\u00f5es criadas via <code>build_operation</code> e reportadas.</li> <li>Exemplo em <code>examples/responders/</code> execut\u00e1vel e imprime resultado compacto.</li> <li>Documenta\u00e7\u00e3o atualizada (Guia/Tutoriais/Exemplos/Refer\u00eancia), links adicionados, <code>mkdocs.yml</code> atualizado se necess\u00e1rio;   <code>poe docs</code> passa localmente.</li> <li>P\u00e1gina de documenta\u00e7\u00e3o program\u00e1tica adicionada: <code>docs/modulos/responders/&lt;name&gt;.md</code>.</li> </ul>"},{"location":"guides/guide/#detector","title":"Detector","text":"<ul> <li>Arquivos:</li> <li>Principal: estender <code>src/sentineliqsdk/extractors/detectors.py</code> (preferido para tipos oficiais), ou     criar um detector customizado em <code>src/sentineliqsdk/extractors/custom/&lt;name&gt;_detector.py</code> e     registr\u00e1-lo via <code>Extractor.register_detector(...)</code> no seu analyzer.</li> <li>Exemplo: <code>examples/detectors/&lt;name&gt;_example.py</code></li> <li>Testes: <code>tests/extractors/test_&lt;name&gt;_detector.py</code></li> <li>Protocolo: <code>Detector</code> com atributo <code>name: str</code> e m\u00e9todo <code>matches(value: str) -&gt; bool</code>.</li> <li>Para incluir no core (tipo oficial):</li> <li>Adicionar o literal em <code>sentineliqsdk.models.DataType</code>.</li> <li>Importar/adicionar o detector na lista de preced\u00eancia em <code>Extractor</code> (<code>extractors/regex.py</code>).</li> <li>Considerar normaliza\u00e7\u00e3o/flags expostas por <code>DetectionContext</code> quando relevante.</li> <li>Para uso local apenas (sem tocar no core):</li> <li>Registrar via <code>Extractor.register_detector(MyDetector(), before=\"hash\")</code>, por exemplo.</li> </ul> <p>Esqueleto (customizado):</p> <pre><code>from __future__ import annotations\nfrom dataclasses import dataclass\n\n\n@dataclass\nclass MyDetector:\n    name: str = \"my_type\"\n\n    def matches(self, value: str) -&gt; bool:\n        return value.startswith(\"MY:\")\n</code></pre> <p>Checklist:</p> <ul> <li>Tipo inclu\u00eddo em <code>DataType</code> (se core) e preced\u00eancia ajustada em <code>Extractor</code>.</li> <li>Testes cobrem positivos/negativos; evitar falsos positivos \u00f3bvios.</li> <li>Exemplo em <code>examples/detectors/</code> demonstrando <code>Extractor.check_string/iterable</code>.</li> <li>Documenta\u00e7\u00e3o atualizada (Guia/Tutoriais/Exemplos/Refer\u00eancia), links adicionados, <code>mkdocs.yml</code> atualizado se necess\u00e1rio;   <code>poe docs</code> passa localmente.</li> <li>P\u00e1gina de documenta\u00e7\u00e3o program\u00e1tica adicionada: <code>docs/modulos/detectors/&lt;name&gt;.md</code>.</li> </ul>"},{"location":"guides/guide/#visao-geral-dos-modulos","title":"Vis\u00e3o Geral dos M\u00f3dulos","text":"<ul> <li><code>sentineliqsdk.Worker</code>: base comum para analyzers/responders (config, env, hooks de relat\u00f3rio).</li> <li><code>sentineliqsdk.Analyzer</code>: classe base para analyzers; inclui helpers de auto-extra\u00e7\u00e3o.</li> <li><code>sentineliqsdk.Responder</code>: classe base para responders; envelope mais simples.</li> <li><code>sentineliqsdk.Extractor</code>: extrator de IOC guiado por stdlib (ip/url/domain/hash/...).</li> <li><code>sentineliqsdk.runner(worker_cls, input_data)</code>: conveni\u00eancia para instanciar e executar.</li> <li><code>sentineliqsdk.models</code>: dataclasses para estruturas type-safe.</li> </ul> <p>Layout interno (para mantenedores): - <code>src/sentineliqsdk/core/worker.py</code> implementa <code>Worker</code>. - <code>src/sentineliqsdk/analyzers/base.py</code> implementa <code>Analyzer</code>. - <code>src/sentineliqsdk/responders/base.py</code> implementa <code>Responder</code>. - <code>src/sentineliqsdk/extractors/regex.py</code> implementa <code>Extractor</code>. - <code>src/sentineliqsdk/core/config/proxy.py</code> define proxies de env (<code>EnvProxyConfigurator</code>). - <code>src/sentineliqsdk/core/config/secrets.py</code> sanitiza config de payload de erro.</p>"},{"location":"guides/guide/#contrato-de-entradasaida","title":"Contrato de Entrada/Sa\u00edda","text":"<p>Workers recebem dados de entrada como dataclasses e retornam resultados na mem\u00f3ria. Este SDK removeu a entrada de dicion\u00e1rio legada da API p\u00fablica neste reposit\u00f3rio.</p> <ul> <li>Entrada: passe um dataclass <code>WorkerInput</code> para o construtor do worker.</li> <li>Sa\u00edda: <code>Analyzer.report(...)</code> retorna <code>AnalyzerReport</code>; <code>Responder.report(...)</code> retorna   <code>ResponderReport</code>. Exemplos podem imprimir JSON compacto para STDOUT explicitamente.</li> </ul>"},{"location":"guides/guide/#entrada-dataclasses","title":"Entrada (Dataclasses)","text":"<pre><code>from sentineliqsdk import WorkerInput, WorkerConfig, ProxyConfig\n\ninput_data = WorkerInput(\n    data_type=\"ip\",\n    data=\"1.2.3.4\",\n    filename=None,  # Optional, for file datatypes\n    tlp=2,\n    pap=2,\n    config=WorkerConfig(\n        check_tlp=True,\n        max_tlp=2,\n        check_pap=True,\n        max_pap=2,\n        auto_extract=True,\n        proxy=ProxyConfig(\n            http=\"http://proxy:8080\",\n            https=\"https://proxy:8080\"\n        )\n    )\n)\n</code></pre> <p>Campos de entrada comuns:</p> <ul> <li><code>data_type</code>: um de <code>ip</code>, <code>url</code>, <code>domain</code>, <code>fqdn</code>, <code>hash</code>, <code>mail</code>, <code>user-agent</code>,   <code>uri_path</code>, <code>registry</code>, <code>file</code>, <code>other</code>, <code>asn</code>, <code>cve</code>, <code>ip_port</code>, <code>mac</code>, <code>cidr</code>.</li> <li><code>data</code> ou <code>filename</code>: valor observ\u00e1vel ou nome do arquivo para <code>data_type == \"file\"</code>.</li> <li><code>tlp</code> e <code>pap</code>: n\u00fameros aplicados via config quando habilitado.</li> <li><code>config.*</code> inclui:</li> <li><code>config.check_tlp</code> / <code>config.max_tlp</code></li> <li><code>config.check_pap</code> / <code>config.max_pap</code></li> <li><code>config.proxy.http</code> / <code>config.proxy.https</code> (exportado internamente para clientes stdlib)</li> <li><code>config.auto_extract</code> para analyzers</li> <li><code>config.params</code> (dict/mapping): par\u00e2metros program\u00e1ticos por m\u00f3dulo</li> <li><code>config.secrets</code> (dict/mapping): segredos/credenciais por m\u00f3dulo</li> </ul> <p>Em caso de erro, chaves sens\u00edveis em <code>config</code> contendo qualquer um de <code>key</code>, <code>password</code>, <code>secret</code>, <code>token</code> s\u00e3o substitu\u00eddas por <code>\"REMOVED\"</code> no payload de erro.</p>"},{"location":"guides/guide/#conceitos-principais-worker","title":"Conceitos Principais: Worker","text":"<p>Assinatura: <code>Worker(input_data: WorkerInput, secret_phrases: tuple[str, ...] | None)</code></p> <ul> <li><code>get_param(name, default=None, message=None)</code>: n\u00e3o usado neste reposit\u00f3rio (apenas dataclasses).</li> <li><code>get_env(key, default=None, message=None)</code>: l\u00ea vari\u00e1veis de ambiente.</li> <li><code>get_config(path, default=None)</code>: l\u00ea de <code>WorkerConfig.params</code> via caminho pontuado   (ex.: <code>\"shodan.method\"</code>, <code>\"webhook.headers\"</code>).</li> <li><code>get_secret(path, default=None, message=None)</code>: l\u00ea de <code>WorkerConfig.secrets</code> via   caminho pontuado (ex.: <code>\"shodan.api_key\"</code>, <code>\"smtp.password\"</code>).</li> <li><code>get_data() -&gt; Any</code>: retorna o valor observ\u00e1vel (sobrescrito em subclasses).</li> <li><code>build_operation(op_type: str, **parameters) -&gt; Operation</code>: descreve opera\u00e7\u00f5es de acompanhamento.</li> <li><code>operations(raw) -&gt; list[Operation]</code>: hook para trabalho de acompanhamento; padr\u00e3o <code>[]</code>.</li> <li><code>summary(raw) -&gt; dict</code>: resumo curto; padr\u00e3o <code>{}</code>.</li> <li><code>artifacts(raw) -&gt; list[Artifact]</code>: override do analyzer executa auto-extra\u00e7\u00e3o quando habilitada.</li> <li><code>report(output: dict) -&gt; dict | AnalyzerReport | ResponderReport</code>: retorna resultado na mem\u00f3ria.</li> <li><code>error(message: str, ensure_ascii: bool = False) -&gt; NoReturn</code>: imprime JSON de erro e exit(1).</li> <li><code>run() -&gt; None</code>: sua l\u00f3gica principal (sobrescreva em subclasses).</li> </ul> <p>Aplica\u00e7\u00e3o TLP/PAP:</p> <ul> <li>Habilite com <code>config.check_tlp</code>/<code>config.check_pap</code>; defina <code>config.max_tlp</code>/<code>config.max_pap</code>.</li> <li>Se excedido, o worker chama <code>error(\"TLP is higher than allowed.\")</code> ou o equivalente PAP.</li> </ul>"},{"location":"guides/guide/#analyzer_1","title":"Analyzer","text":"<p><code>Analyzer</code> estende <code>Worker</code> com comportamento espec\u00edfico de analyzer:</p> <ul> <li><code>get_data()</code>: retorna <code>filename</code> quando <code>data_type == \"file\"</code>, caso contr\u00e1rio o campo <code>data</code>.</li> <li><code>auto_extract</code>: habilitado por padr\u00e3o a menos que <code>config.auto_extract</code> seja <code>False</code>.</li> <li><code>artifacts(raw)</code>: quando habilitado, usa <code>Extractor(ignore=self.get_data())</code> e retorna uma   cole\u00e7\u00e3o de dataclass <code>list[Artifact]</code> para o relat\u00f3rio completo.</li> <li><code>build_taxonomy(level, namespace, predicate, value) -&gt; TaxonomyEntry</code>: helper para entradas   de taxonomia onde <code>level</code> \u00e9 um de <code>info|safe|suspicious|malicious</code>.</li> <li><code>build_artifact(data_type, data, **kwargs) -&gt; Artifact</code>: constr\u00f3i um dataclass artifact.</li> <li><code>report(full_report: dict) -&gt; AnalyzerReport</code>: retorna um envelope com   <code>success/summary/artifacts/operations/full_report</code>.</li> </ul> <p>Notas: - Helpers legados como <code>getData</code>/<code>checkTlp</code> foram removidos; use apenas a API moderna. - Verifica\u00e7\u00f5es TLP/PAP executam automaticamente em <code>Worker.__init__</code>.</p>"},{"location":"guides/guide/#responder_1","title":"Responder","text":"<p><code>Responder</code> espelha <code>Analyzer</code> com um envelope mais simples:</p> <ul> <li><code>get_data()</code>: retorna o campo <code>data</code>.</li> <li><code>report(full_report) -&gt; ResponderReport</code> com <code>success/full_report/operations</code>.</li> </ul>"},{"location":"guides/guide/#extractor","title":"Extractor","text":"<p>Extrator de IOC usando helpers da stdlib do Python (ex.: <code>ipaddress</code>, <code>urllib.parse</code>, <code>email.utils</code>) em vez de regexes complexas. Tipos t\u00edpicos detectados incluem:</p> <ul> <li><code>ip</code> (IPv4 e IPv6), <code>cidr</code>, <code>url</code>, <code>domain</code>, <code>fqdn</code>, <code>hash</code> (MD5/SHA1/SHA256), <code>mail</code>,   <code>user-agent</code>, <code>uri_path</code>, <code>registry</code>, <code>mac</code>, <code>asn</code>, <code>cve</code>, <code>ip_port</code>.</li> </ul> <p>API:</p> <ul> <li><code>Extractor(ignore: str | None = None, strict_dns: bool = False, normalize_domains: bool = False,   normalize_urls: bool = False, support_mailto: bool = False, max_string_length: int = 10000,   max_iterable_depth: int = 100)</code></li> <li><code>check_string(value: str) -&gt; str</code>: retorna um nome de tipo de dados ou string vazia.</li> <li><code>check_iterable(iterable: list | dict | str | tuple | set) -&gt; list[ExtractorResult]</code>:   retorna uma lista de-duplicada de resultados dataclass.</li> </ul> <p>Ordem de preced\u00eancia (primeira correspond\u00eancia ganha): ip \u2192 cidr \u2192 url \u2192 domain \u2192 hash \u2192 user-agent \u2192 uri_path \u2192 registry \u2192 mail \u2192 mac \u2192 asn \u2192 cve \u2192 ip_port \u2192 fqdn. Use <code>Extractor.register_detector(detector, before=..., after=...)</code> para customizar.</p>"},{"location":"guides/guide/#exemplo-de-analyzer-minimo","title":"Exemplo de Analyzer M\u00ednimo","text":""},{"location":"guides/guide/#dataclasses","title":"Dataclasses","text":"<pre><code>from __future__ import annotations\n\nfrom sentineliqsdk import Analyzer, WorkerInput\n\n\nclass ReputationAnalyzer(Analyzer):\n    \"\"\"Analyzer de exemplo que marca \"1.2.3.4\" como malicioso e outros como seguros.\"\"\"\n\n    def run(self) -&gt; None:\n        observable = self.get_data()\n\n        verdict = \"malicious\" if observable == \"1.2.3.4\" else \"safe\"\n\n        # Construir taxonomia usando dataclass\n        taxonomy = self.build_taxonomy(\n            level=verdict,\n            namespace=\"reputation\",\n            predicate=\"static\",\n            value=str(observable),\n        )\n\n        full = {\n            \"observable\": observable,\n            \"verdict\": verdict,\n            \"taxonomy\": [taxonomy.to_dict()],\n        }\n\n        self.report(full)\n\n\nif __name__ == \"__main__\":\n    input_data = WorkerInput(data_type=\"ip\", data=\"1.2.3.4\")\n    ReputationAnalyzer(input_data).run()\n</code></pre>"},{"location":"guides/guide/#exemplo-de-responder-minimo","title":"Exemplo de Responder M\u00ednimo","text":""},{"location":"guides/guide/#dataclasses_1","title":"Dataclasses","text":"<pre><code>from __future__ import annotations\n\nfrom sentineliqsdk import Responder, WorkerInput\n\n\nclass BlockIpResponder(Responder):\n    def run(self) -&gt; None:\n        ip = self.get_data()\n\n        result = {\n            \"action\": \"block\",\n            \"target\": ip,\n            \"status\": \"ok\",\n        }\n        self.report(result)\n\n\nif __name__ == \"__main__\":\n    input_data = WorkerInput(data_type=\"ip\", data=\"1.2.3.4\")\n    BlockIpResponder(input_data).run()\n</code></pre>"},{"location":"guides/guide/#exemplo-de-entrada-e-saida","title":"Exemplo de Entrada e Sa\u00edda","text":"<p>Entrada (program\u00e1tica): <code>WorkerInput(data_type=\"ip\", data=\"1.2.3.4\", tlp=2, pap=2)</code></p> <p>Resultado program\u00e1tico do Analyzer (dataclass <code>AnalyzerReport</code>):</p> <pre><code>{\n  \"success\": true,\n  \"summary\": {},\n  \"artifacts\": [],\n  \"operations\": [],\n  \"full_report\": {\n    \"observable\": \"1.2.3.4\",\n    \"verdict\": \"malicious\",\n    \"taxonomy\": [\n      {\"level\": \"malicious\", \"namespace\": \"reputation\", \"predicate\": \"static\", \"value\": \"1.2.3.4\"}\n    ]\n  }\n}\n</code></pre> <p>Em caso de erro, o worker imprime para STDOUT e sai com c\u00f3digo 1:</p> <pre><code>{ \"success\": false, \"input\": { ... }, \"errorMessage\": \"&lt;reason&gt;\" }\n</code></pre>"},{"location":"guides/guide/#operacoes-e-artefatos","title":"Opera\u00e7\u00f5es e Artefatos","text":"<ul> <li>Use <code>build_operation(\"&lt;type&gt;\", **params)</code> e retorne uma lista de <code>operations(full_report)</code> para   disparar trabalho de acompanhamento.</li> <li>Construa artefatos em analyzers com <code>build_artifact(\"file\", \"/path/to/file\")</code> ou com   tipos n\u00e3o-arquivo: <code>build_artifact(\"ip\", \"8.8.8.8\", tlp=2)</code>.</li> <li>Quando <code>auto_extract</code> est\u00e1 habilitado (padr\u00e3o), <code>artifacts(full_report)</code> usa <code>Extractor</code> para detectar   IOCs no relat\u00f3rio, excluindo o valor observ\u00e1vel original.</li> </ul>"},{"location":"guides/guide/#execucao-e-depuracao","title":"Execu\u00e7\u00e3o e Depura\u00e7\u00e3o","text":"<ul> <li>Execute exemplos diretamente em <code>examples/</code> com <code>python ...</code>.</li> <li>Use <code>--execute</code> para chamadas de rede reais; caso contr\u00e1rio permane\u00e7a em dry\u2011run.</li> <li>Use <code>--include-dangerous</code> para habilitar a\u00e7\u00f5es impactantes quando aplic\u00e1vel.</li> <li>Proxies: defina <code>WorkerInput.config.proxy.http</code> / <code>.https</code>.</li> </ul>"},{"location":"guides/guide/#uso-programatico-sem-io-de-arquivo","title":"Uso Program\u00e1tico (Sem I/O de Arquivo)","text":"<p>Use o SDK diretamente passando <code>WorkerInput</code> para o construtor e imprimindo conforme necess\u00e1rio.</p>"},{"location":"guides/guide/#dataclasses_2","title":"Dataclasses","text":"<pre><code>from sentineliqsdk import Analyzer, WorkerInput\n\n\nclass MyAnalyzer(Analyzer):\n    def run(self) -&gt; None:\n        observable = self.get_data()\n        # Your analysis logic here\n        result = {\"observable\": observable, \"verdict\": \"safe\"}\n        self.report(result)\n\n\n# Criar dados de entrada usando dataclass\ninput_data = WorkerInput(\n    data_type=\"ip\",\n    data=\"1.2.3.4\",\n    tlp=2,\n    pap=2,\n)\n\nanalyzer = MyAnalyzer(input_data=input_data)\nanalyzer.run()\n</code></pre>"},{"location":"guides/guide/#resultados-em-memoria","title":"Resultados em Mem\u00f3ria","text":"<p>Para obter resultados em mem\u00f3ria, chame <code>execute()</code> (ou <code>run()</code> se sua classe retorna o relat\u00f3rio):</p> <pre><code>report = analyzer.execute()  # or analyzer.run() if run() returns the report\nprint(report.full_report)\n</code></pre>"},{"location":"guides/guide/#processamento-em-lote","title":"Processamento em Lote","text":"<p>Processe m\u00faltiplos observ\u00e1veis sem I/O de arquivo:</p> <pre><code>from sentineliqsdk import WorkerInput\n\nobservables = [\"1.2.3.4\", \"8.8.8.8\", \"5.6.7.8\"]\nresults = []\n\nfor obs in observables:\n    input_data = WorkerInput(\n        data_type=\"ip\",\n        data=obs,\n        tlp=2,\n        pap=2,\n    )\n\n    analyzer = MyAnalyzer(input_data=input_data)\n    # Processar e obter resultado em mem\u00f3ria\n    result = analyzer.execute()\n    results.append(result)\n</code></pre>"},{"location":"guides/guide/#dataclasses-e-seguranca-de-tipos","title":"Dataclasses e Seguran\u00e7a de Tipos","text":"<p>O SDK fornece dataclasses para melhor seguran\u00e7a de tipos e experi\u00eancia do desenvolvedor:</p> <ul> <li><code>WorkerInput</code>: Input data for workers</li> <li><code>WorkerConfig</code>: Worker configuration (TLP/PAP, proxy, etc.)</li> <li><code>ProxyConfig</code>: HTTP/HTTPS proxy configuration</li> <li><code>TaxonomyEntry</code>: Taxonomy entries for analyzers</li> <li><code>Artifact</code>: Extracted artifacts</li> <li><code>Operation</code>: Follow\u2011up operations</li> <li><code>AnalyzerReport</code>: Complete analyzer report</li> <li><code>ResponderReport</code>: Complete responder report</li> <li><code>WorkerError</code>: Error responses</li> <li><code>ExtractorResult</code>: Individual extraction results</li> <li><code>ExtractorResults</code>: Collection of extraction results</li> </ul>"},{"location":"guides/guide/#example-usage","title":"Example Usage","text":"<pre><code>from sentineliqsdk import (\n    WorkerInput, WorkerConfig, ProxyConfig,\n    TaxonomyEntry, Artifact, Operation,\n)\n\n# Criar entrada estruturada\ninput_data = WorkerInput(\n    data_type=\"ip\",\n    data=\"1.2.3.4\",\n    config=WorkerConfig(\n        check_tlp=True,\n        max_tlp=2,\n        proxy=ProxyConfig(http=\"http://proxy:8080\"),\n    ),\n)\n\n# Criar entrada de taxonomia\ntaxonomy = TaxonomyEntry(\n    level=\"malicious\",\n    namespace=\"reputation\",\n    predicate=\"static\",\n    value=\"1.2.3.4\",\n)\n\n# Criar artefato\nartifact = Artifact(\n    data_type=\"ip\",\n    data=\"8.8.8.8\",\n    tlp=2,\n    extra={\"confidence\": 0.9},\n)\n\n# Criar opera\u00e7\u00e3o\noperation = Operation(\n    operation_type=\"hunt\",\n    parameters={\"target\": \"1.2.3.4\", \"priority\": \"high\"},\n)\n\n# Converter para dict para serializa\u00e7\u00e3o JSON\n# Nota: use dataclasses.asdict para dataclasses sem to_dict() customizado\nfrom dataclasses import asdict\njson_data = {\n    \"taxonomy\": [taxonomy.to_dict()],\n    \"artifacts\": [asdict(artifact)],\n    \"operations\": [asdict(operation)],\n}\n</code></pre>"},{"location":"guides/guide/#dicas-de-projeto-e-ci","title":"Dicas de Projeto e CI","text":"<ul> <li>Lint e verifica\u00e7\u00e3o de tipos: <code>poe lint</code> (pre-commit com ruff/mypy configurado).</li> <li>Testes: <code>poe test</code> (pytest com cobertura para <code>reports/</code>).</li> <li>Docs: <code>poe docs</code> constr\u00f3i site MkDocs para <code>docs/</code> (veja <code>.github/workflows/docs.yml</code>).</li> <li>Build: <code>uv build</code>; publica via CI no release do GitHub.</li> </ul>"},{"location":"guides/guide/#releases-cicd","title":"Releases (CI/CD)","text":"<p>Este reposit\u00f3rio publica no PyPI via GitHub Actions quando voc\u00ea cria um GitHub Release.</p> <ul> <li>Workflow: veja <code>.github/workflows/publish.yml</code> (executa <code>uv build</code> ent\u00e3o <code>uv publish</code>).</li> <li>Auth: GitHub OIDC (<code>permissions: id-token: write</code>) com um PyPI Trusted Publisher.</li> <li>Trigger: GitHub Release para uma tag como <code>vX.Y.Z</code>.</li> </ul> <p>Checklist de release (mantenedores):</p> <ol> <li>Garantir que <code>main</code> est\u00e1 verde</li> <li>Abrir um PR e aguardar o workflow \"Test\" passar.</li> <li>Fazer merge para <code>main</code> quando lint, tipos e testes passarem.</li> <li>Atualizar vers\u00e3o e changelog com Commitizen</li> <li>Recomendado (usa o env do projeto): <code>uv run cz bump</code></li> <li>Exemplos n\u00e3o-interativos:<ul> <li>Patch: <code>uv run cz bump --increment patch</code></li> <li>Minor: <code>uv run cz bump --increment minor</code></li> <li>Major: <code>uv run cz bump --increment major</code></li> </ul> </li> <li>Pr\u00e9-releases:<ul> <li>Primeiro RC: <code>uv run cz bump --prerelease rc</code></li> <li>Pr\u00f3ximo RC: <code>uv run cz bump --prerelease rc</code></li> <li>RC para pr\u00f3ximo minor: <code>uv run cz bump --increment minor --prerelease rc</code></li> </ul> </li> <li>Commitizen atualiza <code>[project].version</code> em <code>pyproject.toml</code>, atualiza <code>CHANGELOG.md</code>, cria      a tag <code>vX.Y.Z</code> e faz commit da mudan\u00e7a (conforme <code>[tool.commitizen]</code>).</li> <li>Push do branch e tags</li> <li><code>git push origin main --follow-tags</code></li> <li>Se seu branch local estiver atrasado: <code>git pull --rebase origin main</code> ent\u00e3o push novamente.</li> <li>Criar um GitHub Release para a nova tag</li> <li>UI: Releases \u2192 New release \u2192 Escolher tag <code>vX.Y.Z</code> \u2192 Publish.</li> <li>CLI: <code>gh release create vX.Y.Z --title \"vX.Y.Z\" --notes-file CHANGELOG.md --latest</code></li> <li>CI publica no PyPI</li> <li>O workflow \"Publish\" executa e chama <code>uv publish</code> usando OIDC.</li> <li>Acompanhar em Actions \u2192 Publish (ou <code>gh run list --workflow=Publish</code>).</li> <li>Verificar o release</li> <li><code>pip install sentineliqsdk==X.Y.Z</code></li> <li><code>python -c \"import importlib.metadata as m; print(m.version('sentineliqsdk'))\"</code></li> </ol> <p>Pr\u00e9-requisitos (uma vez, org/mantenedores):</p> <ul> <li>Configurar um PyPI Trusted Publisher para este repo:</li> <li>PyPI: Project \u2192 Settings \u2192 Collaboration \u2192 Trusted Publishers \u2192 Add \u2192 GitHub<ul> <li>Repository: <code>killsearch/sentineliqsdk</code></li> <li>Workflows: permitir <code>.github/workflows/publish.yml</code></li> </ul> </li> <li>Sem tokens de API cl\u00e1ssicos; OIDC \u00e9 concedido por <code>id-token: write</code>.</li> <li>Opcional: proteger o ambiente <code>pypi</code> no GitHub com revisores obrigat\u00f3rios.</li> </ul> <p>Notas e dicas:</p> <ul> <li>Formato da tag \u00e9 <code>v$version</code> (config Commitizen); deve corresponder ao <code>pyproject.toml</code>.</li> <li>Marcar GitHub Releases como \"Pre-release\" ao publicar RCs (<code>X.Y.Z-rc.N</code>).</li> <li>Se o job Publish falhar com erro de permiss\u00e3o PyPI, revisar as configura\u00e7\u00f5es do Trusted Publisher   e as <code>permissions</code> do workflow.</li> </ul>"},{"location":"guides/httpx-client/","title":"HTTPX Client Pattern","text":"<p>Padronize novos clientes HTTP usando httpx (sincrono) com uma estrutura m\u00ednima e clara.</p> <ul> <li>Usa <code>httpx.Client</code> com <code>timeout</code> e respeito a proxies de ambiente (<code>http_proxy</code>/<code>https_proxy</code>).</li> <li>Dataclass imut\u00e1vel com <code>base_url</code>, <code>timeout</code>, <code>user_agent</code> e credenciais.</li> <li>M\u00e9todo privado <code>_request()</code> centraliza: query, headers, corpo (<code>json</code>/<code>data</code>/<code>content</code>),   parse de resposta e erros.</li> <li>M\u00e9todos p\u00fablicos s\u00e3o wrappers finos sobre <code>_request()</code>.</li> </ul> <p>Exemplo:</p> <pre><code>from __future__ import annotations\n\nfrom dataclasses import dataclass\nfrom collections.abc import Mapping\nfrom typing import Any\nimport urllib.parse\nimport httpx\nimport json\n\n\ndef _merge_query(url: str, params: Mapping[str, Any] | None) -&gt; str:\n    if not params:\n        return url\n    parts = urllib.parse.urlsplit(url)\n    current = urllib.parse.parse_qsl(parts.query, keep_blank_values=True)\n    extras = []\n    for k, v in params.items():\n        if v is None:\n            continue\n        extras.append((k, str(v if not isinstance(v, bool) else str(v).lower())))\n    query = urllib.parse.urlencode(current + extras)\n    return urllib.parse.urlunsplit((parts.scheme, parts.netloc, parts.path, query, parts.fragment))\n\n\n@dataclass(frozen=True)\nclass MyApiClient:\n    token: str\n    base_url: str = \"https://api.example.com\"\n    timeout: float = 30.0\n    user_agent: str = \"sentineliqsdk-example/1.0\"\n\n    def _request(\n        self,\n        method: str,\n        path: str,\n        *,\n        query: Mapping[str, Any] | None = None,\n        headers: Mapping[str, str] | None = None,\n        data: Mapping[str, Any] | bytes | None = None,\n        json_body: Mapping[str, Any] | None = None,\n    ) -&gt; Any:\n        url = _merge_query(self.base_url.rstrip(\"/\") + \"/\" + path.lstrip(\"/\"), query)\n        req_headers = {\"User-Agent\": self.user_agent, \"Authorization\": f\"Bearer {self.token}\"}\n        if headers:\n            req_headers.update(headers)\n\n        kwargs: dict[str, Any] = {\"headers\": req_headers}\n        if json_body is not None:\n            kwargs[\"json\"] = json_body\n        elif isinstance(data, (dict, tuple)):\n            kwargs[\"data\"] = urllib.parse.urlencode(data)\n            req_headers.setdefault(\n                \"Content-Type\", \"application/x-www-form-urlencoded; charset=utf-8\"\n            )\n        elif isinstance(data, bytes):\n            kwargs[\"content\"] = data\n\n        with httpx.Client(timeout=self.timeout) as client:\n            resp = client.request(method.upper(), url, **kwargs)\n            if resp.status_code &gt;= 400:\n                # Inclui corpo no erro para facilitar debugging\n                msg = f\"HTTP {resp.status_code} for {resp.request.method} {resp.request.url}: {resp.text}\"\n                raise httpx.HTTPStatusError(msg, request=resp.request, response=resp)\n            ctype = resp.headers.get(\"Content-Type\", \"application/json\")\n            if not resp.content:\n                return None\n            if \"json\" in ctype:\n                try:\n                    return resp.json()\n                except json.JSONDecodeError:\n                    return resp.text\n            return resp.text\n\n    # Wrappers p\u00fablicos\n    def list_items(self, page: int | None = None) -&gt; Any:\n        return self._request(\"GET\", \"/items\", query={\"page\": page})\n\n    def create_item(self, payload: Mapping[str, Any]) -&gt; Any:\n        return self._request(\"POST\", \"/items\", json_body=payload)\n</code></pre> <p>Boas pr\u00e1ticas:</p> <ul> <li>Prefira <code>json=</code> para corpos JSON; use <code>data=</code> com <code>application/x-www-form-urlencoded</code> quando   necess\u00e1rio; <code>content=</code> para bytes brutos.</li> <li>Sempre defina <code>User-Agent</code> espec\u00edfico do cliente; inclua vers\u00e3o.</li> <li>Propague timeouts adequados; <code>httpx</code> j\u00e1 respeita proxies via ambiente (SDK exporta para env).</li> <li>Em erros, propague corpo no <code>HTTPStatusError</code> para facilitar troubleshooting.</li> </ul>"},{"location":"modulos/analyzers/abuseipdb/","title":"AbuseIPDB Analyzer","text":"<p>Consulta a API v2 da AbuseIPDB para reputa\u00e7\u00e3o de IPs e retorna um <code>AnalyzerReport</code> com <code>verdict</code>, <code>taxonomy</code> e dados enriquecidos (pa\u00edses de reporte, categorias mais frequentes e \"freshness\").</p>"},{"location":"modulos/analyzers/abuseipdb/#visao-geral","title":"Vis\u00e3o Geral","text":"<ul> <li>Aceita <code>data_type == \"ip\"</code> e chama o endpoint <code>check</code>.</li> <li>Taxonomia resume: whitelist, TOR, usage type, <code>abuseConfidenceScore</code> e total de reports.</li> <li>Artefatos: adiciona dominios/hostnames reportados (domain/fqdn) e auto\u2011extra\u00e7\u00e3o do relat\u00f3rio.</li> <li>Proxies s\u00e3o honrados via <code>WorkerInput.config.proxy</code>.</li> </ul>"},{"location":"modulos/analyzers/abuseipdb/#instalacao-requisitos","title":"Instala\u00e7\u00e3o / Requisitos","text":"<ul> <li>SDK: utilize as dataclasses do pacote <code>sentineliqsdk</code>.</li> <li>Autentica\u00e7\u00e3o: <code>config.secrets['abuseipdb']['api_key']</code>.</li> </ul>"},{"location":"modulos/analyzers/abuseipdb/#uso-programatico","title":"Uso Program\u00e1tico","text":"<pre><code>from __future__ import annotations\nfrom sentineliqsdk import WorkerInput, WorkerConfig\nfrom sentineliqsdk.analyzers.abuseipdb import AbuseIPDBAnalyzer\n\ninp = WorkerInput(\n    data_type=\"ip\",\n    data=\"1.2.3.4\",\n    config=WorkerConfig(\n        secrets={\"abuseipdb\": {\"api_key\": \"SUA_CHAVE\"}},\n        params={\"abuseipdb\": {\"days\": 30}},  # opcional\n    ),\n)\nreport = AbuseIPDBAnalyzer(inp).execute()\nprint(report.full_report[\"verdict\"], report.full_report[\"taxonomy\"][0])\n</code></pre>"},{"location":"modulos/analyzers/abuseipdb/#exemplo-cli","title":"Exemplo (CLI)","text":"<p>Exemplo execut\u00e1vel na pasta <code>examples/</code> (dry\u2011run por padr\u00e3o; use <code>--execute</code> para chamar a API):</p> <pre><code>python examples/analyzers/abuseipdb_example.py --ip 1.2.3.4 --api-key YOUR_KEY           # plano\npython examples/analyzers/abuseipdb_example.py --ip 1.2.3.4 --api-key YOUR_KEY --execute  # real\n</code></pre> <p>Arquivo: <code>examples/analyzers/abuseipdb_example.py</code></p>"},{"location":"modulos/analyzers/abuseipdb/#taxonomia","title":"Taxonomia","text":"<ul> <li><code>info/safe/suspicious/malicious</code> conforme <code>abuseConfidenceScore</code> e whitelist.</li> <li>Campos gerados:</li> <li><code>is-whitelist</code> (info)</li> <li><code>is-tor</code> (info)</li> <li><code>usage-type</code> (info)</li> <li><code>abuse-confidence-score</code> (safe/suspicious/malicious)</li> <li><code>records</code> (safe/malicious ou info se whitelisted)</li> </ul>"},{"location":"modulos/analyzers/abuseipdb/#metadata","title":"Metadata","text":"<p>O analisador inclui <code>full_report.metadata</code> com:</p> <pre><code>{\n  \"Name\": \"AbuseIPDB Analyzer\",\n  \"Description\": \"Consulta reputa\u00e7\u00e3o de IPs na AbuseIPDB (API v2)\",\n  \"Author\": [\"SentinelIQ Team &lt;team@sentineliq.com.br&gt;\"],\n  \"License\": \"SentinelIQ License\",\n  \"pattern\": \"threat-intel\",\n  \"doc_pattern\": \"MkDocs module page; programmatic usage\",\n  \"doc\": \"https://killsearch.github.io/sentineliqsdk/modulos/analyzers/abuseipdb/\",\n  \"VERSION\": \"TESTING\"\n}\n</code></pre>"},{"location":"modulos/analyzers/anyrun/","title":"AnyRun Analyzer","text":"<p>O AnyRun Analyzer permite submeter arquivos e URLs para an\u00e1lise em sandbox usando a API do AnyRun. Este analisador suporta configura\u00e7\u00f5es avan\u00e7adas de ambiente e op\u00e7\u00f5es de rede para an\u00e1lises personalizadas.</p>"},{"location":"modulos/analyzers/anyrun/#caracteristicas","title":"Caracter\u00edsticas","text":"<ul> <li>Suporte a arquivos e URLs: Analisa tanto arquivos quanto URLs suspeitas</li> <li>Configura\u00e7\u00e3o flex\u00edvel: Permite configurar ambiente, op\u00e7\u00f5es de rede e outros par\u00e2metros</li> <li>Polling inteligente: Aguarda automaticamente a conclus\u00e3o da an\u00e1lise</li> <li>Taxonomia detalhada: Gera entradas de taxonomia baseadas nos scores do AnyRun</li> <li>Limpeza de relat\u00f3rios: Remove campos grandes para otimizar o uso de mem\u00f3ria</li> </ul>"},{"location":"modulos/analyzers/anyrun/#configuracao","title":"Configura\u00e7\u00e3o","text":""},{"location":"modulos/analyzers/anyrun/#parametros-obrigatorios","title":"Par\u00e2metros Obrigat\u00f3rios","text":"<ul> <li>Token da API: Token de autentica\u00e7\u00e3o do AnyRun</li> <li>Tipo de privacidade: Tipo de privacidade para a an\u00e1lise (ex: \"public\", \"private\")</li> </ul>"},{"location":"modulos/analyzers/anyrun/#parametros-opcionais","title":"Par\u00e2metros Opcionais","text":""},{"location":"modulos/analyzers/anyrun/#configuracoes-de-ambiente","title":"Configura\u00e7\u00f5es de Ambiente","text":"<ul> <li><code>env_bitness</code>: Arquitetura do ambiente (32, 64)</li> <li><code>env_version</code>: Vers\u00e3o do ambiente</li> <li><code>env_type</code>: Tipo do ambiente</li> </ul>"},{"location":"modulos/analyzers/anyrun/#opcoes-de-rede","title":"Op\u00e7\u00f5es de Rede","text":"<ul> <li><code>opt_network_connect</code>: Permitir conex\u00f5es de rede</li> <li><code>opt_network_fakenet</code>: Usar rede simulada</li> <li><code>opt_network_tor</code>: Usar rede Tor</li> <li><code>opt_network_mitm</code>: Interceptar tr\u00e1fego de rede</li> <li><code>opt_network_geo</code>: Configura\u00e7\u00f5es geogr\u00e1ficas</li> </ul>"},{"location":"modulos/analyzers/anyrun/#outras-opcoes","title":"Outras Op\u00e7\u00f5es","text":"<ul> <li><code>opt_kernel_heavyevasion</code>: Evas\u00e3o pesada do kernel</li> <li><code>opt_timeout</code>: Timeout da an\u00e1lise em segundos</li> <li><code>obj_ext_startfolder</code>: Pasta inicial para extra\u00e7\u00e3o</li> <li><code>obj_ext_browser</code>: Configura\u00e7\u00f5es do navegador</li> <li><code>verify_ssl</code>: Verificar certificados SSL (padr\u00e3o: True)</li> </ul>"},{"location":"modulos/analyzers/anyrun/#uso-programatico","title":"Uso Program\u00e1tico","text":""},{"location":"modulos/analyzers/anyrun/#analise-de-arquivo","title":"An\u00e1lise de Arquivo","text":"<pre><code>from sentineliqsdk import WorkerInput, WorkerConfig\nfrom sentineliqsdk.analyzers.anyrun import AnyRunAnalyzer\n\n# Configurar entrada\ninput_data = WorkerInput(\n    data_type=\"file\",\n    filename=\"/path/to/sample.exe\",\n    config=WorkerConfig(\n        secrets={\"anyrun\": {\"token\": \"YOUR_API_TOKEN\"}},\n        params={\"anyrun\": {\"privacy_type\": \"public\"}}\n    ),\n)\n\n# Executar an\u00e1lise\nanalyzer = AnyRunAnalyzer(input_data)\nreport = analyzer.execute()\n\n# Verificar resultado\nprint(f\"Veredicto: {report.full_report['verdict']}\")\nprint(f\"Task ID: {report.full_report['task_id']}\")\n</code></pre>"},{"location":"modulos/analyzers/anyrun/#analise-de-url","title":"An\u00e1lise de URL","text":"<pre><code>from sentineliqsdk import WorkerInput, WorkerConfig\nfrom sentineliqsdk.analyzers.anyrun import AnyRunAnalyzer\n\n# Configurar entrada\ninput_data = WorkerInput(\n    data_type=\"url\",\n    data=\"https://example.com/malware.exe\",\n    config=WorkerConfig(\n        secrets={\"anyrun\": {\"token\": \"YOUR_API_TOKEN\"}},\n        params={\n            \"anyrun\": {\n                \"privacy_type\": \"public\",\n                \"env_bitness\": \"64\",\n                \"opt_timeout\": 300\n            }\n        }\n    ),\n)\n\n# Executar an\u00e1lise\nanalyzer = AnyRunAnalyzer(input_data)\nreport = analyzer.execute()\n</code></pre>"},{"location":"modulos/analyzers/anyrun/#configuracao-avancada","title":"Configura\u00e7\u00e3o Avan\u00e7ada","text":"<pre><code>from sentineliqsdk import WorkerInput, WorkerConfig\nfrom sentineliqsdk.analyzers.anyrun import AnyRunAnalyzer\n\n# Configura\u00e7\u00e3o completa\nconfig = WorkerConfig(\n    secrets={\"anyrun\": {\"token\": \"YOUR_API_TOKEN\"}},\n    params={\n        \"anyrun\": {\n            \"privacy_type\": \"private\",\n            \"env_bitness\": \"64\",\n            \"env_version\": \"10\",\n            \"env_type\": \"windows\",\n            \"opt_network_connect\": True,\n            \"opt_network_fakenet\": True,\n            \"opt_network_tor\": False,\n            \"opt_network_mitm\": True,\n            \"opt_kernel_heavyevasion\": True,\n            \"opt_timeout\": 600,\n            \"obj_ext_startfolder\": \"C:\\\\Users\\\\Public\",\n            \"obj_ext_browser\": \"chrome\",\n            \"verify_ssl\": True\n        }\n    }\n)\n\ninput_data = WorkerInput(\n    data_type=\"file\",\n    filename=\"/path/to/sample.exe\",\n    config=config,\n)\n\nanalyzer = AnyRunAnalyzer(input_data)\nreport = analyzer.execute()\n</code></pre>"},{"location":"modulos/analyzers/anyrun/#estrutura-do-relatorio","title":"Estrutura do Relat\u00f3rio","text":"<p>O relat\u00f3rio retornado cont\u00e9m:</p> <pre><code>{\n  \"observable\": \"arquivo.exe\",\n  \"verdict\": \"malicious\",\n  \"taxonomy\": [\n    {\n      \"level\": \"malicious\",\n      \"namespace\": \"anyrun\",\n      \"predicate\": \"sandbox-score\",\n      \"value\": \"100/100\"\n    }\n  ],\n  \"source\": \"anyrun\",\n  \"data_type\": \"file\",\n  \"task_id\": \"12345678-1234-1234-1234-123456789012\",\n  \"analysis\": {\n    \"scores\": {\n      \"verdict\": {\"score\": 100},\n      \"behavior\": {\"score\": 85},\n      \"network\": {\"score\": 70}\n    },\n    \"incidents\": [...],\n    \"processes\": [...]\n  },\n  \"metadata\": {\n    \"Name\": \"AnyRun Analyzer\",\n    \"Description\": \"Submete arquivos e URLs para an\u00e1lise em sandbox via AnyRun API\",\n    \"Author\": [\"SentinelIQ Team &lt;team@sentineliq.com.br&gt;\"],\n    \"License\": \"SentinelIQ License\",\n    \"pattern\": \"threat-intel\",\n    \"doc_pattern\": \"MkDocs module page; programmatic usage\",\n    \"doc\": \"https://killsearch.github.io/sentineliqsdk/modulos/analyzers/anyrun/\",\n    \"VERSION\": \"TESTING\"\n  }\n}\n</code></pre>"},{"location":"modulos/analyzers/anyrun/#niveis-de-taxonomia","title":"N\u00edveis de Taxonomia","text":"<p>O analisador gera entradas de taxonomia baseadas nos scores do AnyRun:</p> <ul> <li>safe: Score 0-50</li> <li>suspicious: Score 51-99  </li> <li>malicious: Score 100</li> </ul>"},{"location":"modulos/analyzers/anyrun/#entradas-de-taxonomia","title":"Entradas de Taxonomia","text":"<ul> <li><code>anyrun/sandbox-score</code>: Score principal do veredicto</li> <li><code>anyrun/{score_type}-score</code>: Scores espec\u00edficos (behavior, network, etc.)</li> </ul>"},{"location":"modulos/analyzers/anyrun/#exemplo-de-uso","title":"Exemplo de Uso","text":"<p>Veja o arquivo de exemplo completo em <code>examples/analyzers/anyrun_example.py</code>:</p> <pre><code># An\u00e1lise de arquivo (modo dry-run)\npython examples/analyzers/anyrun_example.py --file /path/to/sample.exe --include-dangerous\n\n# An\u00e1lise de URL (modo dry-run)\npython examples/analyzers/anyrun_example.py --url \"https://example.com/malware.exe\"\n\n# Executar an\u00e1lise real\npython examples/analyzers/anyrun_example.py --url \"https://example.com/malware.exe\" --execute\n\n# Configura\u00e7\u00e3o personalizada\npython examples/analyzers/anyrun_example.py \\\n  --url \"https://example.com/malware.exe\" \\\n  --execute \\\n  --privacy-type private \\\n  --env-bitness 64 \\\n  --timeout 600\n</code></pre>"},{"location":"modulos/analyzers/anyrun/#limitacoes-e-consideracoes","title":"Limita\u00e7\u00f5es e Considera\u00e7\u00f5es","text":"<ol> <li> <p>Rate Limiting: A API do AnyRun tem limites de taxa. O analisador implementa retry autom\u00e1tico com backoff.</p> </li> <li> <p>Timeout: An\u00e1lises podem levar v\u00e1rios minutos. O timeout padr\u00e3o \u00e9 de 15 minutos.</p> </li> <li> <p>Tamanho de Arquivo: Verifique os limites de tamanho de arquivo da API do AnyRun.</p> </li> <li> <p>Privacidade: Configure adequadamente o tipo de privacidade conforme suas necessidades.</p> </li> <li> <p>Custos: An\u00e1lises reais podem ter custos associados dependendo do plano da API.</p> </li> </ol>"},{"location":"modulos/analyzers/anyrun/#tratamento-de-erros","title":"Tratamento de Erros","text":"<p>O analisador trata os seguintes cen\u00e1rios de erro:</p> <ul> <li>Token de API inv\u00e1lido ou ausente</li> <li>Tipo de privacidade n\u00e3o especificado</li> <li>Arquivo n\u00e3o encontrado</li> <li>Erros de rede e timeout</li> <li>Rate limiting da API</li> <li>An\u00e1lise que excede o tempo limite</li> </ul>"},{"location":"modulos/analyzers/anyrun/#integracao-com-outros-modulos","title":"Integra\u00e7\u00e3o com Outros M\u00f3dulos","text":"<p>Este analisador pode ser usado em conjunto com:</p> <ul> <li>Extractors: Para extrair IOCs dos relat\u00f3rios de an\u00e1lise</li> <li>Responders: Para a\u00e7\u00f5es baseadas nos resultados da an\u00e1lise</li> <li>Detectors: Para detec\u00e7\u00e3o autom\u00e1tica de tipos de arquivo suspeitos</li> </ul>"},{"location":"modulos/analyzers/autofocus/","title":"AutoFocus Analyzer","text":"<p>O AutoFocus Analyzer permite consultar a plataforma de intelig\u00eancia de amea\u00e7as AutoFocus da Palo Alto Networks para an\u00e1lise de amostras e busca de IOCs (Indicators of Compromise). Este analisador suporta m\u00faltiplos tipos de dados e servi\u00e7os para an\u00e1lises abrangentes de seguran\u00e7a.</p>"},{"location":"modulos/analyzers/autofocus/#caracteristicas","title":"Caracter\u00edsticas","text":"<ul> <li>M\u00faltiplos tipos de dados: Suporta ip, domain, fqdn, hash, url, user-agent</li> <li>Dois servi\u00e7os principais: <code>get_sample_analysis</code> (para hashes) e <code>search_ioc</code> (para outros tipos)</li> <li>Metadados detalhados: Retorna metadados, tags e resultados de an\u00e1lise do AutoFocus</li> <li>Taxonomia inteligente: Gera entradas de taxonomia baseadas nos resultados da busca</li> <li>Busca personalizada: Suporte para consultas JSON customizadas</li> </ul>"},{"location":"modulos/analyzers/autofocus/#configuracao","title":"Configura\u00e7\u00e3o","text":""},{"location":"modulos/analyzers/autofocus/#parametros-obrigatorios","title":"Par\u00e2metros Obrigat\u00f3rios","text":"<ul> <li>API Key: Chave de API do AutoFocus</li> <li>Service: Tipo de servi\u00e7o a ser utilizado</li> </ul>"},{"location":"modulos/analyzers/autofocus/#servicos-disponiveis","title":"Servi\u00e7os Dispon\u00edveis","text":""},{"location":"modulos/analyzers/autofocus/#get_sample_analysis","title":"<code>get_sample_analysis</code>","text":"<ul> <li>Uso: An\u00e1lise detalhada de amostras por hash</li> <li>Tipos suportados: <code>hash</code></li> <li>Retorna: Metadados, tags e an\u00e1lises detalhadas da amostra</li> </ul>"},{"location":"modulos/analyzers/autofocus/#search_ioc","title":"<code>search_ioc</code>","text":"<ul> <li>Uso: Busca de IOCs na base de dados do AutoFocus</li> <li>Tipos suportados: <code>ip</code>, <code>domain</code>, <code>fqdn</code>, <code>url</code>, <code>user-agent</code></li> <li>Retorna: Lista de amostras que correspondem ao IOC</li> </ul>"},{"location":"modulos/analyzers/autofocus/#search_json","title":"<code>search_json</code>","text":"<ul> <li>Uso: Busca usando consulta JSON personalizada</li> <li>Tipos suportados: <code>other</code></li> <li>Retorna: Resultados baseados na consulta customizada</li> </ul>"},{"location":"modulos/analyzers/autofocus/#uso-programatico","title":"Uso Program\u00e1tico","text":""},{"location":"modulos/analyzers/autofocus/#analise-de-hash-get_sample_analysis","title":"An\u00e1lise de Hash (get_sample_analysis)","text":"<pre><code>from sentineliqsdk import WorkerInput, WorkerConfig\nfrom sentineliqsdk.analyzers.autofocus import AutoFocusAnalyzer\n\n# Configurar entrada para an\u00e1lise de hash\ninput_data = WorkerInput(\n    data_type=\"hash\",\n    data=\"abc123def456...\",\n    config=WorkerConfig(\n        secrets={\"autofocus\": {\"apikey\": \"YOUR_API_KEY\"}},\n        params={\"autofocus\": {\"service\": \"get_sample_analysis\"}}\n    ),\n)\n\n# Executar an\u00e1lise\nanalyzer = AutoFocusAnalyzer(input_data)\nreport = analyzer.execute()\n\n# Verificar resultado\nprint(f\"Metadados: {report.full_report['result']['metadata']}\")\nprint(f\"Tags: {report.full_report['result']['tags']}\")\n</code></pre>"},{"location":"modulos/analyzers/autofocus/#busca-de-ip-search_ioc","title":"Busca de IP (search_ioc)","text":"<pre><code>from sentineliqsdk import WorkerInput, WorkerConfig\nfrom sentineliqsdk.analyzers.autofocus import AutoFocusAnalyzer\n\n# Configurar entrada para busca de IP\ninput_data = WorkerInput(\n    data_type=\"ip\",\n    data=\"1.2.3.4\",\n    config=WorkerConfig(\n        secrets={\"autofocus\": {\"apikey\": \"YOUR_API_KEY\"}},\n        params={\"autofocus\": {\"service\": \"search_ioc\"}}\n    ),\n)\n\n# Executar busca\nanalyzer = AutoFocusAnalyzer(input_data)\nreport = analyzer.execute()\n\n# Verificar resultados\nrecords = report.full_report['result']['records']\nprint(f\"Encontradas {len(records)} amostras\")\n</code></pre>"},{"location":"modulos/analyzers/autofocus/#busca-de-dominio-search_ioc","title":"Busca de Dom\u00ednio (search_ioc)","text":"<pre><code>from sentineliqsdk import WorkerInput, WorkerConfig\nfrom sentineliqsdk.analyzers.autofocus import AutoFocusAnalyzer\n\n# Configurar entrada para busca de dom\u00ednio\ninput_data = WorkerInput(\n    data_type=\"domain\",\n    data=\"malicious-domain.com\",\n    config=WorkerConfig(\n        secrets={\"autofocus\": {\"apikey\": \"YOUR_API_KEY\"}},\n        params={\"autofocus\": {\"service\": \"search_ioc\"}}\n    ),\n)\n\n# Executar busca\nanalyzer = AutoFocusAnalyzer(input_data)\nreport = analyzer.execute()\n</code></pre>"},{"location":"modulos/analyzers/autofocus/#busca-de-url-search_ioc","title":"Busca de URL (search_ioc)","text":"<pre><code>from sentineliqsdk import WorkerInput, WorkerConfig\nfrom sentineliqsdk.analyzers.autofocus import AutoFocusAnalyzer\n\n# Configurar entrada para busca de URL\ninput_data = WorkerInput(\n    data_type=\"url\",\n    data=\"https://malicious-site.com/payload.exe\",\n    config=WorkerConfig(\n        secrets={\"autofocus\": {\"apikey\": \"YOUR_API_KEY\"}},\n        params={\"autofocus\": {\"service\": \"search_ioc\"}}\n    ),\n)\n\n# Executar busca\nanalyzer = AutoFocusAnalyzer(input_data)\nreport = analyzer.execute()\n</code></pre>"},{"location":"modulos/analyzers/autofocus/#busca-de-user-agent-search_ioc","title":"Busca de User-Agent (search_ioc)","text":"<pre><code>from sentineliqsdk import WorkerInput, WorkerConfig\nfrom sentineliqsdk.analyzers.autofocus import AutoFocusAnalyzer\n\n# Configurar entrada para busca de User-Agent\ninput_data = WorkerInput(\n    data_type=\"user-agent\",\n    data=\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36\",\n    config=WorkerConfig(\n        secrets={\"autofocus\": {\"apikey\": \"YOUR_API_KEY\"}},\n        params={\"autofocus\": {\"service\": \"search_ioc\"}}\n    ),\n)\n\n# Executar busca\nanalyzer = AutoFocusAnalyzer(input_data)\nreport = analyzer.execute()\n</code></pre>"},{"location":"modulos/analyzers/autofocus/#busca-json-personalizada-search_json","title":"Busca JSON Personalizada (search_json)","text":"<pre><code>from sentineliqsdk import WorkerInput, WorkerConfig\nfrom sentineliqsdk.analyzers.autofocus import AutoFocusAnalyzer\n\n# Configurar entrada para busca JSON personalizada\ncustom_query = '{\"operator\":\"all\",\"children\":[{\"field\":\"sample.tag\",\"operator\":\"is in the list\",\"value\":[\"APT29\"]}]}'\n\ninput_data = WorkerInput(\n    data_type=\"other\",\n    data=custom_query,\n    config=WorkerConfig(\n        secrets={\"autofocus\": {\"apikey\": \"YOUR_API_KEY\"}},\n        params={\"autofocus\": {\"service\": \"search_json\"}}\n    ),\n)\n\n# Executar busca\nanalyzer = AutoFocusAnalyzer(input_data)\nreport = analyzer.execute()\n</code></pre>"},{"location":"modulos/analyzers/autofocus/#estrutura-do-relatorio","title":"Estrutura do Relat\u00f3rio","text":""},{"location":"modulos/analyzers/autofocus/#relatorio-de-analise-de-amostra-get_sample_analysis","title":"Relat\u00f3rio de An\u00e1lise de Amostra (get_sample_analysis)","text":"<pre><code>{\n  \"observable\": \"abc123def456...\",\n  \"data_type\": \"hash\",\n  \"service\": \"get_sample_analysis\",\n  \"result\": {\n    \"metadata\": {\n      \"sha256\": \"abc123def456...\",\n      \"md5\": \"def456ghi789...\",\n      \"sha1\": \"ghi789jkl012...\",\n      \"file_type\": \"PE32 executable\",\n      \"file_size\": 1234567\n    },\n    \"tags\": [\n      {\n        \"tag\": \"APT29\",\n        \"public_tag_name\": \"APT29\",\n        \"tag_class\": \"actor\"\n      }\n    ],\n    \"analysis\": {\n      \"StaticAnalysis\": [\n        {\n          \"analysis_type\": \"static\",\n          \"results\": {...}\n        }\n      ],\n      \"DynamicAnalysis\": [\n        {\n          \"analysis_type\": \"dynamic\",\n          \"results\": {...}\n        }\n      ]\n    }\n  },\n  \"taxonomy\": [\n    {\n      \"level\": \"info\",\n      \"namespace\": \"PaloAltoNetworks\",\n      \"predicate\": \"AutoFocus\",\n      \"value\": \"Sample found\"\n    }\n  ],\n  \"metadata\": {\n    \"Name\": \"AutoFocus Analyzer\",\n    \"Description\": \"Query Palo Alto Networks AutoFocus for threat intelligence and sample analysis\",\n    \"Author\": [\"SentinelIQ Team &lt;team@sentineliq.com.br&gt;\"],\n    \"License\": \"SentinelIQ License\",\n    \"pattern\": \"threat-intel\",\n    \"doc_pattern\": \"MkDocs module page; programmatic usage\",\n    \"doc\": \"https://killsearch.github.io/sentineliqsdk/modulos/analyzers/autofocus/\",\n    \"VERSION\": \"TESTING\"\n  }\n}\n</code></pre>"},{"location":"modulos/analyzers/autofocus/#relatorio-de-busca-de-ioc-search_ioc","title":"Relat\u00f3rio de Busca de IOC (search_ioc)","text":"<pre><code>{\n  \"observable\": \"1.2.3.4\",\n  \"data_type\": \"ip\",\n  \"service\": \"search_ioc\",\n  \"result\": {\n    \"search\": {\n      \"operator\": \"all\",\n      \"children\": [\n        {\n          \"field\": \"alias.ip_address\",\n          \"operator\": \"contains\",\n          \"value\": \"1.2.3.4\"\n        }\n      ]\n    },\n    \"records\": [\n      {\n        \"metadata\": {\n          \"sha256\": \"sample1_sha256...\",\n          \"file_type\": \"PE32 executable\",\n          \"file_size\": 1234567\n        },\n        \"tags\": [\n          {\n            \"tag\": \"APT29\",\n            \"public_tag_name\": \"APT29\",\n            \"tag_class\": \"actor\"\n          }\n        ]\n      }\n    ]\n  },\n  \"taxonomy\": [\n    {\n      \"level\": \"suspicious\",\n      \"namespace\": \"PaloAltoNetworks\",\n      \"predicate\": \"AutoFocus\",\n      \"value\": \"3 sample(s) found\"\n    }\n  ],\n  \"metadata\": {\n    \"Name\": \"AutoFocus Analyzer\",\n    \"Description\": \"Query Palo Alto Networks AutoFocus for threat intelligence and sample analysis\",\n    \"Author\": [\"SentinelIQ Team &lt;team@sentineliq.com.br&gt;\"],\n    \"License\": \"SentinelIQ License\",\n    \"pattern\": \"threat-intel\",\n    \"doc_pattern\": \"MkDocs module page; programmatic usage\",\n    \"doc\": \"https://killsearch.github.io/sentineliqsdk/modulos/analyzers/autofocus/\",\n    \"VERSION\": \"TESTING\"\n  }\n}\n</code></pre>"},{"location":"modulos/analyzers/autofocus/#niveis-de-taxonomia","title":"N\u00edveis de Taxonomia","text":"<p>O analisador gera entradas de taxonomia baseadas nos resultados da busca:</p> <ul> <li>info: Nenhum resultado encontrado ou amostra encontrada</li> <li>suspicious: M\u00faltiplas amostras encontradas (indica poss\u00edvel atividade maliciosa)</li> <li>malicious: Amostra confirmada como maliciosa (baseado em tags e an\u00e1lise)</li> </ul>"},{"location":"modulos/analyzers/autofocus/#entradas-de-taxonomia","title":"Entradas de Taxonomia","text":"<ul> <li><code>PaloAltoNetworks/AutoFocus</code>: Resultado principal da busca</li> <li>info: \"Sample found\" ou \"No results\"</li> <li>suspicious: \"X sample(s) found\" (quando X &gt; 0)</li> </ul>"},{"location":"modulos/analyzers/autofocus/#exemplo-de-uso","title":"Exemplo de Uso","text":"<p>Veja o arquivo de exemplo completo em <code>examples/analyzers/autofocus_example.py</code>:</p> <pre><code># Busca de IP (modo dry-run)\npython examples/analyzers/autofocus_example.py --data-type ip --data 1.2.3.4 --service search_ioc\n\n# An\u00e1lise de hash (modo dry-run)\npython examples/analyzers/autofocus_example.py --data-type hash --data abc123... --service get_sample_analysis\n\n# Busca de dom\u00ednio (modo dry-run)\npython examples/analyzers/autofocus_example.py --data-type domain --data malicious.com --service search_ioc\n\n# Executar busca real\npython examples/analyzers/autofocus_example.py --data-type ip --data 1.2.3.4 --service search_ioc --execute\n\n# Busca com API key espec\u00edfica\npython examples/analyzers/autofocus_example.py \\\n  --data-type url \\\n  --data \"https://malicious.com/payload.exe\" \\\n  --service search_ioc \\\n  --apikey YOUR_API_KEY \\\n  --execute\n</code></pre>"},{"location":"modulos/analyzers/autofocus/#limitacoes-e-consideracoes","title":"Limita\u00e7\u00f5es e Considera\u00e7\u00f5es","text":"<ol> <li> <p>API Key: \u00c9 necess\u00e1ria uma chave de API v\u00e1lida do AutoFocus para uso em produ\u00e7\u00e3o.</p> </li> <li> <p>Rate Limiting: A API do AutoFocus tem limites de taxa. Monitore o uso para evitar bloqueios.</p> </li> <li> <p>Depend\u00eancias: O analisador requer a biblioteca <code>autofocus</code> instalada:    <code>bash    pip install autofocus</code></p> </li> <li> <p>Tipos de Dados: Nem todos os tipos de dados s\u00e3o suportados por todos os servi\u00e7os:</p> </li> <li><code>get_sample_analysis</code>: apenas <code>hash</code></li> <li><code>search_ioc</code>: <code>ip</code>, <code>domain</code>, <code>fqdn</code>, <code>url</code>, <code>user-agent</code></li> <li> <p><code>search_json</code>: apenas <code>other</code></p> </li> <li> <p>Resultados: O n\u00famero de resultados pode variar dependendo da disponibilidade de dados no AutoFocus.</p> </li> </ol>"},{"location":"modulos/analyzers/autofocus/#tratamento-de-erros","title":"Tratamento de Erros","text":"<p>O analisador trata os seguintes cen\u00e1rios de erro:</p> <ul> <li>Chave de API inv\u00e1lida ou ausente</li> <li>Servi\u00e7o n\u00e3o suportado para o tipo de dados</li> <li>Amostra n\u00e3o encontrada no AutoFocus</li> <li>Erros de servidor do AutoFocus</li> <li>Erros de cliente (par\u00e2metros inv\u00e1lidos)</li> <li>Erros de rede e timeout</li> </ul>"},{"location":"modulos/analyzers/autofocus/#integracao-com-outros-modulos","title":"Integra\u00e7\u00e3o com Outros M\u00f3dulos","text":"<p>Este analisador pode ser usado em conjunto com:</p> <ul> <li>Extractors: Para extrair IOCs dos relat\u00f3rios de an\u00e1lise</li> <li>Responders: Para a\u00e7\u00f5es baseadas nos resultados da busca</li> <li>Detectors: Para detec\u00e7\u00e3o autom\u00e1tica de tipos de dados suspeitos</li> <li>Outros Analyzers: Para correla\u00e7\u00e3o de dados de m\u00faltiplas fontes</li> </ul>"},{"location":"modulos/analyzers/autofocus/#referencias","title":"Refer\u00eancias","text":"<ul> <li>AutoFocus API Documentation</li> <li>Palo Alto Networks AutoFocus</li> <li>AutoFocus Python Library</li> </ul>"},{"location":"modulos/analyzers/axur/","title":"Axur Analyzer","text":"<p>O Axur Analyzer \u00e9 um inv\u00f3lucro din\u00e2mico para a Axur Platform API. Ele aceita um m\u00e9todo permitido e par\u00e2metros via <code>data_type == \"other\"</code> (JSON) ou <code>config.params</code>, executa a chamada e retorna um <code>AnalyzerReport</code> com os detalhes da resposta.</p>"},{"location":"modulos/analyzers/axur/#visao-geral","title":"Vis\u00e3o Geral","text":"<ul> <li>Chamadas din\u00e2micas: <code>axur.method</code>/<code>axur.params</code> em <code>WorkerConfig.params</code> ou   <code>data_type == \"other\"</code> com <code>{ \"method\": \"...\", \"params\": {...} }</code>.</li> <li>M\u00e9todo gen\u00e9rico <code>call</code> permite invocar qualquer rota REST (<code>http_method</code>, <code>path</code>, <code>query</code>,   <code>headers</code>, <code>json</code>, <code>data</code>, <code>dry_run</code>).</li> </ul>"},{"location":"modulos/analyzers/axur/#metodos-suportados","title":"M\u00e9todos Suportados","text":"<ul> <li>Gen\u00e9rico: <code>call</code></li> <li>Conveni\u00eancia: <code>customers</code>, <code>users</code>, <code>users_stream</code>, <code>tickets_search</code>, <code>ticket_create</code>,   <code>tickets_by_keys</code>, <code>filter_create</code>, <code>filter_results</code>, <code>ticket_get</code>, <code>ticket_types</code>,   <code>ticket_texts</code>, <code>integration_feed</code></li> </ul>"},{"location":"modulos/analyzers/axur/#como-funciona","title":"Como Funciona","text":"<ul> <li>O analisador cria um cliente Axur a partir de <code>WorkerConfig.secrets['axur']['api_token']</code>.</li> <li>Valida o m\u00e9todo contra uma lista de permitidos.</li> <li>Para <code>call</code>, mapeia os campos <code>http_method</code>, <code>path</code>, <code>query</code>, <code>headers</code>, <code>json</code>, <code>data</code>,   <code>dry_run</code> para a fun\u00e7\u00e3o gen\u00e9rica do cliente.</li> <li>Retorna <code>AnalyzerReport</code> com <code>details.method</code>, <code>details.params</code> e <code>details.result</code>.</li> </ul>"},{"location":"modulos/analyzers/axur/#instanciacao","title":"Instancia\u00e7\u00e3o","text":"<pre><code>from __future__ import annotations\nimport json\nfrom sentineliqsdk import WorkerInput\nfrom sentineliqsdk.analyzers.axur import AxurAnalyzer\n\n# Exemplo simples com m\u00e9todo de conveni\u00eancia\npayload = {\"method\": \"customers\", \"params\": {}}\ninp = WorkerInput(data_type=\"other\", data=json.dumps(payload))\nreport = AxurAnalyzer(inp).execute()\n\n# Chamada gen\u00e9rica para uma rota arbitr\u00e1ria\npayload = {\n    \"method\": \"call\",\n    \"params\": {\n        \"http_method\": \"GET\",\n        \"path\": \"/v1/customers\",\n        \"query\": {\"page\": 1},\n        \"dry_run\": True\n    },\n}\ninp = WorkerInput(data_type=\"other\", data=json.dumps(payload))\nreport = AxurAnalyzer(inp).execute()\n</code></pre>"},{"location":"modulos/analyzers/axur/#configuracao","title":"Configura\u00e7\u00e3o","text":"<ul> <li><code>axur.api_token</code> em <code>WorkerConfig.secrets</code></li> <li><code>axur.method</code> e <code>axur.params</code> (dict) em <code>WorkerConfig.params</code></li> <li>Proxies: <code>WorkerInput.config.proxy</code></li> </ul> <p>Nota: n\u00e3o h\u00e1 suporte por vari\u00e1veis de ambiente.</p>"},{"location":"modulos/analyzers/axur/#uso-correto","title":"Uso Correto","text":"<ul> <li>Sempre forne\u00e7a <code>data_type == \"other\"</code> com JSON v\u00e1lido ao usar chamadas din\u00e2micas.</li> <li>Para <code>call</code>, <code>path</code> \u00e9 obrigat\u00f3rio e <code>http_method</code> padr\u00e3o \u00e9 <code>GET</code>.</li> <li><code>query</code>, <code>headers</code> e <code>json</code> devem ser objetos (mapeamentos JSON).</li> </ul>"},{"location":"modulos/analyzers/axur/#retorno","title":"Retorno","text":"<ul> <li><code>AnalyzerReport</code> com <code>full_report.details</code> incluindo:</li> <li><code>method</code>, <code>params</code>, <code>result</code></li> </ul>"},{"location":"modulos/analyzers/axur/#metadata","title":"Metadata","text":"<p>O analisador inclui <code>full_report.metadata</code> com:</p> <pre><code>{\n  \"Name\": \"Axur Analyzer\",\n  \"Description\": \"Dynamic wrapper for Axur Platform API endpoints\",\n  \"Author\": [\"SentinelIQ Team &lt;team@sentineliq.com.br&gt;\"],\n  \"License\": \"SentinelIQ License\",\n  \"pattern\": \"platform\",\n  \"doc_pattern\": \"MkDocs module page; programmatic usage documented\",\n  \"doc\": \"https://killsearch.github.io/sentineliqsdk/modulos/analyzers/axur/\",\n  \"VERSION\": \"STABLE\"\n}\n</code></pre>"},{"location":"modulos/analyzers/censys/","title":"Censys Analyzer","text":"<p>The Censys Analyzer provides comprehensive access to the Censys Platform API, enabling threat intelligence analysis of IP addresses, domains, certificates, and more. This analyzer implements all available Censys Platform API methods including collections management, global data search, and aggregation capabilities.</p>"},{"location":"modulos/analyzers/censys/#features","title":"Features","text":"<ul> <li>Full API Coverage: Access to all Censys Platform API methods</li> <li>Collections Management: Create, list, update, and delete collections</li> <li>Global Data Search: Search hosts, certificates, and web properties</li> <li>Timeline Analysis: Historical data analysis for hosts</li> <li>Dynamic Method Calls: Programmatic access to any Censys API method</li> <li>Comprehensive Analysis: IP, domain, and certificate analysis with verdict determination</li> </ul>"},{"location":"modulos/analyzers/censys/#supported-data-types","title":"Supported Data Types","text":"<ul> <li><code>ip</code>: IPv4 and IPv6 addresses</li> <li><code>domain</code>: Domain names</li> <li><code>fqdn</code>: Fully qualified domain names</li> <li><code>hash</code>: Certificate fingerprints (SHA-256)</li> <li><code>other</code>: JSON payload for dynamic method calls</li> </ul>"},{"location":"modulos/analyzers/censys/#configuration","title":"Configuration","text":""},{"location":"modulos/analyzers/censys/#required-credentials","title":"Required Credentials","text":"<p>The analyzer requires Censys Platform API credentials:</p> <pre><code>from sentineliqsdk import WorkerInput, WorkerConfig\n\nsecrets = {\n    \"censys\": {\n        \"personal_access_token\": \"your_censys_token_here\",\n        \"organization_id\": \"your_organization_id_here\"\n    }\n}\n\nconfig = WorkerConfig(secrets=secrets)\ninput_data = WorkerInput(\n    data_type=\"ip\",\n    data=\"1.2.3.4\",\n    config=config\n)\n</code></pre>"},{"location":"modulos/analyzers/censys/#optional-configuration","title":"Optional Configuration","text":"<pre><code>config = WorkerConfig(\n    secrets=secrets,\n    # Method-specific configuration\n    censys_method=\"global_data_search\",\n    censys_params={\n        \"search_query_input_body\": {\"query\": \"services.port:80\"}\n    }\n)\n</code></pre>"},{"location":"modulos/analyzers/censys/#usage-examples","title":"Usage Examples","text":""},{"location":"modulos/analyzers/censys/#basic-ip-analysis","title":"Basic IP Analysis","text":"<pre><code>from sentineliqsdk import WorkerInput, WorkerConfig\nfrom sentineliqsdk.analyzers.censys import CensysAnalyzer\n\n# Configure credentials\nsecrets = {\n    \"censys\": {\n        \"personal_access_token\": \"your_token\",\n        \"organization_id\": \"your_org_id\"\n    }\n}\n\n# Analyze IP address\ninput_data = WorkerInput(\n    data_type=\"ip\",\n    data=\"8.8.8.8\",\n    config=WorkerConfig(secrets=secrets)\n)\n\nanalyzer = CensysAnalyzer(input_data)\nreport = analyzer.execute()\n\nprint(f\"Verdict: {report.full_report['verdict']}\")\nprint(f\"Taxonomy: {report.full_report['taxonomy']}\")\n</code></pre>"},{"location":"modulos/analyzers/censys/#domain-analysis","title":"Domain Analysis","text":"<pre><code># Analyze domain\ninput_data = WorkerInput(\n    data_type=\"domain\",\n    data=\"example.com\",\n    config=WorkerConfig(secrets=secrets)\n)\n\nanalyzer = CensysAnalyzer(input_data)\nreport = analyzer.execute()\n\nprint(f\"Domain: {report.full_report['observable']}\")\nprint(f\"Verdict: {report.full_report['verdict']}\")\n</code></pre>"},{"location":"modulos/analyzers/censys/#certificate-analysis","title":"Certificate Analysis","text":"<pre><code># Analyze certificate hash\ninput_data = WorkerInput(\n    data_type=\"hash\",\n    data=\"sha256_certificate_hash\",\n    config=WorkerConfig(secrets=secrets)\n)\n\nanalyzer = CensysAnalyzer(input_data)\nreport = analyzer.execute()\n\nprint(f\"Certificate: {report.full_report['observable']}\")\nprint(f\"Verdict: {report.full_report['verdict']}\")\n</code></pre>"},{"location":"modulos/analyzers/censys/#dynamic-method-calls","title":"Dynamic Method Calls","text":""},{"location":"modulos/analyzers/censys/#using-configuration-parameters","title":"Using Configuration Parameters","text":"<pre><code># Call specific method via configuration\nconfig = WorkerConfig(\n    secrets=secrets,\n    censys_method=\"collections_list\",\n    censys_params={\"page_size\": 10}\n)\n\ninput_data = WorkerInput(\n    data_type=\"ip\",\n    data=\"1.2.3.4\",\n    config=config\n)\n\nanalyzer = CensysAnalyzer(input_data)\nreport = analyzer.execute()\n\nprint(f\"Method: {report.full_report['details']['method']}\")\nprint(f\"Result: {report.full_report['details']['result']}\")\n</code></pre>"},{"location":"modulos/analyzers/censys/#using-json-payload","title":"Using JSON Payload","text":"<pre><code>import json\n\n# Call method via JSON payload\npayload = {\n    \"method\": \"global_data_search\",\n    \"params\": {\n        \"search_query_input_body\": {\"query\": \"services.port:443\"}\n    }\n}\n\ninput_data = WorkerInput(\n    data_type=\"other\",\n    data=json.dumps(payload),\n    config=WorkerConfig(secrets=secrets)\n)\n\nanalyzer = CensysAnalyzer(input_data)\nreport = analyzer.execute()\n\nprint(f\"Method: {report.full_report['details']['method']}\")\nprint(f\"Query: {report.full_report['details']['params']}\")\n</code></pre>"},{"location":"modulos/analyzers/censys/#available-api-methods","title":"Available API Methods","text":""},{"location":"modulos/analyzers/censys/#collections-methods","title":"Collections Methods","text":"<ul> <li><code>collections_list</code>: List all collections</li> <li><code>collections_create</code>: Create a new collection</li> <li><code>collections_delete</code>: Delete a collection</li> <li><code>collections_get</code>: Get collection details</li> <li><code>collections_update</code>: Update a collection</li> <li><code>collections_list_events</code>: List collection events</li> <li><code>collections_aggregate</code>: Aggregate collection data</li> <li><code>collections_search</code>: Search within collections</li> </ul>"},{"location":"modulos/analyzers/censys/#global-data-methods","title":"Global Data Methods","text":"<ul> <li><code>global_data_get_certificates</code>: Get certificates in bulk</li> <li><code>global_data_get_certificate</code>: Get specific certificate</li> <li><code>global_data_get_hosts</code>: Get hosts in bulk</li> <li><code>global_data_get_host</code>: Get specific host</li> <li><code>global_data_get_host_timeline</code>: Get host timeline</li> <li><code>global_data_get_web_properties</code>: Get web properties in bulk</li> <li><code>global_data_get_web_property</code>: Get specific web property</li> <li><code>global_data_aggregate</code>: Aggregate global data</li> <li><code>global_data_search</code>: Search global data</li> </ul>"},{"location":"modulos/analyzers/censys/#verdict-logic","title":"Verdict Logic","text":"<p>The analyzer determines verdicts based on Censys data analysis:</p> <ul> <li>Safe: No suspicious indicators found</li> <li>Suspicious: Suspicious ports, services, or patterns detected</li> <li>Malicious: Known malicious banners or indicators found</li> </ul>"},{"location":"modulos/analyzers/censys/#suspicious-indicators","title":"Suspicious Indicators","text":"<ul> <li>Common attack vector ports (22, 23, 135, 139, 445, 1433, 3389)</li> <li>Self-signed certificates</li> <li>Expired certificates</li> <li>High number of search results</li> </ul>"},{"location":"modulos/analyzers/censys/#malicious-indicators","title":"Malicious Indicators","text":"<ul> <li>Malware-related banners</li> <li>Trojan or backdoor indicators</li> <li>Exploit-related content</li> </ul>"},{"location":"modulos/analyzers/censys/#error-handling","title":"Error Handling","text":"<p>The analyzer handles various error conditions:</p> <ul> <li>Missing API credentials</li> <li>Invalid method names</li> <li>API call failures</li> <li>Invalid JSON payloads</li> <li>Unsupported data types</li> </ul>"},{"location":"modulos/analyzers/censys/#example-output","title":"Example Output","text":"<pre><code>{\n  \"success\": true,\n  \"summary\": {},\n  \"artifacts\": [],\n  \"operations\": [],\n  \"full_report\": {\n    \"observable\": \"8.8.8.8\",\n    \"verdict\": \"safe\",\n    \"taxonomy\": [\n      {\n        \"level\": \"safe\",\n        \"namespace\": \"censys\",\n        \"predicate\": \"reputation\",\n        \"value\": \"8.8.8.8\"\n      }\n    ],\n    \"source\": \"censys\",\n    \"data_type\": \"ip\",\n    \"details\": {\n      \"host\": {...},\n      \"timeline\": {...},\n      \"search_results\": {...}\n    },\n    \"metadata\": {\n      \"name\": \"Censys Analyzer\",\n      \"description\": \"Comprehensive Censys Platform API analyzer\",\n      \"author\": [\"SentinelIQ Team &lt;team@sentineliq.com.br&gt;\"],\n      \"pattern\": \"threat-intel\",\n      \"version_stage\": \"STABLE\"\n    }\n  }\n}\n</code></pre>"},{"location":"modulos/analyzers/censys/#dependencies","title":"Dependencies","text":"<p>The analyzer requires the Censys Platform SDK:</p> <pre><code>pip install censys-platform\n</code></pre>"},{"location":"modulos/analyzers/censys/#security-considerations","title":"Security Considerations","text":"<ul> <li>Store API credentials securely using <code>WorkerConfig.secrets</code></li> <li>Never hardcode credentials in source code</li> <li>Use appropriate TLP/PAP levels for data sensitivity</li> <li>Monitor API usage and rate limits</li> </ul>"},{"location":"modulos/analyzers/censys/#troubleshooting","title":"Troubleshooting","text":""},{"location":"modulos/analyzers/censys/#common-issues","title":"Common Issues","text":"<ol> <li>Import Error: Ensure <code>censys-platform</code> is installed</li> <li>Authentication Error: Verify API credentials are correct</li> <li>Method Not Found: Check method name against allowlist</li> <li>Invalid Params: Ensure parameters are valid JSON objects</li> </ol>"},{"location":"modulos/analyzers/censys/#debug-mode","title":"Debug Mode","text":"<p>Enable debug logging to troubleshoot API calls:</p> <pre><code>import logging\nlogging.basicConfig(level=logging.DEBUG)\n</code></pre>"},{"location":"modulos/analyzers/censys/#related-documentation","title":"Related Documentation","text":"<ul> <li>Censys Platform API Documentation</li> <li>Censys Python SDK</li> <li>SentinelIQ SDK Configuration</li> <li>Analyzer Development Guide</li> </ul>"},{"location":"modulos/analyzers/chainabuse/","title":"ChainAbuse Analyzer","text":"<p>Consulta a API da ChainAbuse para reputa\u00e7\u00e3o de endere\u00e7os blockchain e URLs, retornando um <code>AnalyzerReport</code> com <code>verdict</code>, <code>taxonomy</code> e dados de relat\u00f3rios maliciosos e endere\u00e7os sancionados.</p>"},{"location":"modulos/analyzers/chainabuse/#visao-geral","title":"Vis\u00e3o Geral","text":"<ul> <li>Aceita <code>data_type</code> em <code>[\"ip\", \"url\", \"domain\", \"hash\"]</code> e consulta os endpoints de relat\u00f3rios.</li> <li>Verifica se endere\u00e7os/URLs foram reportados como maliciosos ou est\u00e3o sancionados.</li> <li>Taxonomia resume: contagem de relat\u00f3rios, status de san\u00e7\u00e3o e tipo de dados.</li> <li>Suporta verifica\u00e7\u00e3o de endere\u00e7os blockchain sancionados via endpoint dedicado.</li> <li>Proxies s\u00e3o honrados via <code>WorkerInput.config.proxy</code>.</li> </ul>"},{"location":"modulos/analyzers/chainabuse/#instalacao-requisitos","title":"Instala\u00e7\u00e3o / Requisitos","text":"<ul> <li>SDK: utilize as dataclasses do pacote <code>sentineliqsdk</code>.</li> <li>Autentica\u00e7\u00e3o: <code>config.secrets['chainabuse']['api_key']</code>.</li> <li>API ChainAbuse: chave de API v\u00e1lida da ChainAbuse.</li> </ul>"},{"location":"modulos/analyzers/chainabuse/#uso-programatico","title":"Uso Program\u00e1tico","text":"<pre><code>from __future__ import annotations\nfrom sentineliqsdk import WorkerInput, WorkerConfig\nfrom sentineliqsdk.analyzers.chainabuse import ChainAbuseAnalyzer\n\n# An\u00e1lise de IP\ninp = WorkerInput(\n    data_type=\"ip\",\n    data=\"1.2.3.4\",\n    config=WorkerConfig(\n        secrets={\"chainabuse\": {\"api_key\": \"SUA_CHAVE\"}},\n        chainabuse_timeout=30,  # opcional, padr\u00e3o 30s\n    ),\n)\nreport = ChainAbuseAnalyzer(inp).execute()\nprint(report.full_report[\"verdict\"], report.full_report[\"taxonomy\"][0])\n\n# An\u00e1lise de URL\ninp_url = WorkerInput(\n    data_type=\"url\",\n    data=\"https://malicious-site.com\",\n    config=WorkerConfig(secrets={\"chainabuse\": {\"api_key\": \"SUA_CHAVE\"}}),\n)\nreport_url = ChainAbuseAnalyzer(inp_url).execute()\n\n# An\u00e1lise de endere\u00e7o blockchain\ninp_hash = WorkerInput(\n    data_type=\"hash\",\n    data=\"1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\",\n    config=WorkerConfig(secrets={\"chainabuse\": {\"api_key\": \"SUA_CHAVE\"}}),\n)\nreport_hash = ChainAbuseAnalyzer(inp_hash).execute()\n</code></pre>"},{"location":"modulos/analyzers/chainabuse/#exemplo-cli","title":"Exemplo (CLI)","text":"<p>Exemplo execut\u00e1vel na pasta <code>examples/</code> (dry\u2011run por padr\u00e3o; use <code>--execute</code> para chamar a API):</p> <pre><code>python examples/analyzers/chainabuse_example.py --api-key YOUR_KEY                    # plano\npython examples/analyzers/chainabuse_example.py --api-key YOUR_KEY --execute          # real\npython examples/analyzers/chainabuse_example.py --api-key YOUR_KEY --execute --include-dangerous\n</code></pre> <p>Arquivo: <code>examples/analyzers/chainabuse_example.py</code></p>"},{"location":"modulos/analyzers/chainabuse/#endpoints-da-api","title":"Endpoints da API","text":"<p>O analyzer utiliza os seguintes endpoints da ChainAbuse:</p>"},{"location":"modulos/analyzers/chainabuse/#get-reports","title":"GET /reports","text":"<ul> <li>Prop\u00f3sito: Verificar se endere\u00e7os/URLs foram reportados como maliciosos</li> <li>Par\u00e2metros: <code>address</code> (endere\u00e7o a verificar)</li> <li>Resposta: Lista de relat\u00f3rios com categorias, confian\u00e7a e timestamps</li> </ul>"},{"location":"modulos/analyzers/chainabuse/#get-sanctioned-addressesaddress","title":"GET /sanctioned-addresses/{address}","text":"<ul> <li>Prop\u00f3sito: Verificar se um endere\u00e7o blockchain est\u00e1 sancionado</li> <li>Par\u00e2metros: <code>address</code> (endere\u00e7o blockchain)</li> <li>Resposta: Status de san\u00e7\u00e3o e detalhes (se aplic\u00e1vel)</li> </ul>"},{"location":"modulos/analyzers/chainabuse/#taxonomia","title":"Taxonomia","text":"<ul> <li><code>safe/suspicious/malicious</code> baseado na contagem de relat\u00f3rios e status de san\u00e7\u00e3o.</li> <li>Campos gerados:</li> <li><code>report-count</code> (safe/suspicious/malicious) - n\u00famero de relat\u00f3rios</li> <li><code>sanctioned</code> (safe/malicious) - status de san\u00e7\u00e3o</li> <li><code>data-type</code> (info) - tipo de dados analisado</li> </ul>"},{"location":"modulos/analyzers/chainabuse/#logica-de-verdict","title":"L\u00f3gica de Verdict","text":"<ul> <li>Malicious: Endere\u00e7o sancionado OU \u22655 relat\u00f3rios</li> <li>Suspicious: 1-4 relat\u00f3rios (n\u00e3o sancionado)</li> <li>Safe: 0 relat\u00f3rios e n\u00e3o sancionado</li> </ul>"},{"location":"modulos/analyzers/chainabuse/#configuracao","title":"Configura\u00e7\u00e3o","text":""},{"location":"modulos/analyzers/chainabuse/#secrets-obrigatorio","title":"Secrets (Obrigat\u00f3rio)","text":"<pre><code>secrets = {\n    \"chainabuse\": {\n        \"api_key\": \"sua_chave_api_chainabuse\"\n    }\n}\n</code></pre>"},{"location":"modulos/analyzers/chainabuse/#configuracoes-opcionais","title":"Configura\u00e7\u00f5es Opcionais","text":"<pre><code>config = WorkerConfig(\n    secrets=secrets,\n    chainabuse_timeout=60,  # timeout em segundos (padr\u00e3o: 30)\n    check_tlp=True,\n    max_tlp=2,\n    check_pap=True,\n    max_pap=2\n)\n</code></pre>"},{"location":"modulos/analyzers/chainabuse/#autenticacao","title":"Autentica\u00e7\u00e3o","text":"<p>A ChainAbuse utiliza autentica\u00e7\u00e3o HTTP Basic onde a chave da API \u00e9 passada como nome de usu\u00e1rio e senha:</p> <pre><code>Authorization: Basic &lt;base64(api_key:api_key)&gt;\n</code></pre>"},{"location":"modulos/analyzers/chainabuse/#tipos-de-dados-suportados","title":"Tipos de Dados Suportados","text":"<ul> <li>ip: Endere\u00e7os IPv4/IPv6</li> <li>url: URLs completas</li> <li>domain: Nomes de dom\u00ednio</li> <li>hash: Endere\u00e7os blockchain (Bitcoin, Ethereum, etc.)</li> </ul>"},{"location":"modulos/analyzers/chainabuse/#tratamento-de-erros","title":"Tratamento de Erros","text":"<ul> <li>401/403: Chave de API inv\u00e1lida ou expirada</li> <li>404: Endere\u00e7o n\u00e3o encontrado (tratado como n\u00e3o sancionado)</li> <li>500: Erro interno da API</li> <li>Timeout: Configur\u00e1vel via <code>chainabuse_timeout</code></li> </ul>"},{"location":"modulos/analyzers/chainabuse/#metadata","title":"Metadata","text":"<p>O analisador inclui <code>full_report.metadata</code> com:</p> <pre><code>{\n  \"Name\": \"ChainAbuse Analyzer\",\n  \"Description\": \"Consulta reputa\u00e7\u00e3o de endere\u00e7os blockchain e URLs na ChainAbuse\",\n  \"Author\": [\"SentinelIQ Team &lt;team@sentineliq.com.br&gt;\"],\n  \"License\": \"SentinelIQ License\",\n  \"pattern\": \"threat-intel\",\n  \"doc_pattern\": \"MkDocs module page; programmatic usage\",\n  \"doc\": \"https://killsearch.github.io/sentineliqsdk/modulos/analyzers/chainabuse/\",\n  \"VERSION\": \"TESTING\"\n}\n</code></pre>"},{"location":"modulos/analyzers/chainabuse/#exemplo-de-resposta","title":"Exemplo de Resposta","text":"<pre><code>{\n  \"success\": true,\n  \"summary\": {},\n  \"artifacts\": [],\n  \"operations\": [],\n  \"full_report\": {\n    \"observable\": \"1.2.3.4\",\n    \"verdict\": \"suspicious\",\n    \"taxonomy\": [\n      {\n        \"level\": \"suspicious\",\n        \"namespace\": \"chainabuse\",\n        \"predicate\": \"report-count\",\n        \"value\": \"3\"\n      },\n      {\n        \"level\": \"safe\",\n        \"namespace\": \"chainabuse\",\n        \"predicate\": \"sanctioned\",\n        \"value\": \"False\"\n      },\n      {\n        \"level\": \"info\",\n        \"namespace\": \"chainabuse\",\n        \"predicate\": \"data-type\",\n        \"value\": \"ip\"\n      }\n    ],\n    \"source\": \"chainabuse\",\n    \"data_type\": \"ip\",\n    \"reports\": {\n      \"data\": [...],\n      \"count\": 3\n    },\n    \"sanctioned\": {\n      \"sanctioned\": false,\n      \"data\": null\n    },\n    \"metadata\": {...}\n  }\n}\n</code></pre>"},{"location":"modulos/analyzers/chainabuse/#limitacoes","title":"Limita\u00e7\u00f5es","text":"<ul> <li>Requer chave de API v\u00e1lida da ChainAbuse</li> <li>Rate limits aplicados pela API ChainAbuse</li> <li>Endere\u00e7os blockchain sancionados verificados apenas para <code>data_type=\"hash\"</code></li> <li>Timeout padr\u00e3o de 30 segundos (configur\u00e1vel)</li> </ul>"},{"location":"modulos/analyzers/circl_hashlookup/","title":"CIRCL Hashlookup Analyzer","text":"<p>O CIRCL Hashlookup Analyzer consulta o servi\u00e7o p\u00fablico CIRCL hashlookup para an\u00e1lise de reputa\u00e7\u00e3o de hashes, incluindo opera\u00e7\u00f5es b\u00e1sicas, bulk, relacionamentos parent/child e gerenciamento de sess\u00f5es.</p>"},{"location":"modulos/analyzers/circl_hashlookup/#visao-geral","title":"Vis\u00e3o Geral","text":"<ul> <li>Analisa <code>hash</code> diretamente, retornando um <code>AnalyzerReport</code> com <code>verdict</code>, <code>taxonomy</code> e <code>details</code>.</li> <li>Suporta chamadas din\u00e2micas a todos os m\u00e9todos da API via:</li> <li><code>circl.method</code> e <code>circl.params</code> (dict) em <code>WorkerConfig.params</code></li> <li>ou <code>data_type == \"other\"</code> com <code>data</code> em JSON: <code>{\"method\": \"...\", \"params\": {...}}</code></li> <li>Detecta automaticamente o tipo de hash (MD5, SHA1, SHA256, SHA512) baseado no comprimento e formato.</li> </ul>"},{"location":"modulos/analyzers/circl_hashlookup/#como-funciona","title":"Como Funciona","text":"<ul> <li>Hash: detecta o tipo automaticamente e consulta o endpoint apropriado (<code>/lookup/md5/</code>, <code>/lookup/sha1/</code>, <code>/lookup/sha256/</code>).</li> <li>Para SHA1, tamb\u00e9m tenta buscar relacionamentos parent/child quando dispon\u00edvel.</li> <li>Heur\u00edstica de veredito: marca como <code>safe</code> se houver <code>hashlookup:trust</code> ou <code>KnownGood</code>, <code>info</code> se n\u00e3o encontrado ou outros erros.</li> <li>Rede: utiliza <code>httpx</code>; proxies s\u00e3o honrados via <code>WorkerConfig.proxy</code>.</li> <li>N\u00e3o requer chave de API (servi\u00e7o p\u00fablico).</li> </ul>"},{"location":"modulos/analyzers/circl_hashlookup/#metodos-suportados-dinamico","title":"M\u00e9todos Suportados (din\u00e2mico)","text":"<p>Permitidos via <code>method</code>:</p>"},{"location":"modulos/analyzers/circl_hashlookup/#lookups-basicos","title":"Lookups B\u00e1sicos","text":"<ul> <li><code>lookup_md5</code> - Consulta hash MD5</li> <li><code>lookup_sha1</code> - Consulta hash SHA1  </li> <li><code>lookup_sha256</code> - Consulta hash SHA256</li> </ul>"},{"location":"modulos/analyzers/circl_hashlookup/#operacoes-bulk","title":"Opera\u00e7\u00f5es Bulk","text":"<ul> <li><code>bulk_md5</code> - Consulta m\u00faltiplos hashes MD5</li> <li><code>bulk_sha1</code> - Consulta m\u00faltiplos hashes SHA1</li> </ul>"},{"location":"modulos/analyzers/circl_hashlookup/#relacionamentos","title":"Relacionamentos","text":"<ul> <li><code>get_children</code> - Busca hashes filhos de um SHA1</li> <li><code>get_parents</code> - Busca hashes pais de um SHA1</li> </ul>"},{"location":"modulos/analyzers/circl_hashlookup/#utilitarios","title":"Utilit\u00e1rios","text":"<ul> <li><code>get_info</code> - Informa\u00e7\u00f5es sobre o banco de dados</li> <li><code>get_stats_top</code> - Estat\u00edsticas top do banco</li> </ul>"},{"location":"modulos/analyzers/circl_hashlookup/#sessoes","title":"Sess\u00f5es","text":"<ul> <li><code>create_session</code> - Cria uma sess\u00e3o para rastreamento</li> <li><code>get_session</code> - Obt\u00e9m resultados de uma sess\u00e3o</li> </ul>"},{"location":"modulos/analyzers/circl_hashlookup/#instanciacao","title":"Instancia\u00e7\u00e3o","text":"<pre><code>from __future__ import annotations\nimport json\nfrom sentineliqsdk import WorkerInput\nfrom sentineliqsdk.analyzers.circl_hashlookup import CirclHashlookupAnalyzer\n\n# Hash MD5\ninp = WorkerInput(data_type=\"hash\", data=\"5d41402abc4b2a76b9719d911017c592\")\nreport = CirclHashlookupAnalyzer(inp).execute()\n\n# Hash SHA1\ninp = WorkerInput(data_type=\"hash\", data=\"aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d\")\nreport = CirclHashlookupAnalyzer(inp).execute()\n\n# Din\u00e2mico (data payload)\npayload = {\"method\": \"bulk_md5\", \"params\": {\"hashes\": [\"5d41402abc4b2a76b9719d911017c592\"]}}\ninp = WorkerInput(data_type=\"other\", data=json.dumps(payload))\nreport = CirclHashlookupAnalyzer(inp).execute()\n</code></pre>"},{"location":"modulos/analyzers/circl_hashlookup/#configuracao","title":"Configura\u00e7\u00e3o","text":"<ul> <li>Autentica\u00e7\u00e3o: N\u00e3o requerida (servi\u00e7o p\u00fablico)</li> <li>Chamada din\u00e2mica: <code>circl.method</code> e <code>circl.params</code> (dict) em <code>WorkerConfig.params</code></li> <li>Proxies: <code>WorkerInput.config.proxy.http/https</code></li> </ul> <p>Exemplo (dataclasses):</p> <pre><code>from sentineliqsdk import WorkerInput, WorkerConfig, ProxyConfig\nfrom sentineliqsdk.analyzers.circl_hashlookup import CirclHashlookupAnalyzer\n\ninp = WorkerInput(\n    data_type=\"hash\",\n    data=\"5d41402abc4b2a76b9719d911017c592\",\n    config=WorkerConfig(\n        proxy=ProxyConfig(http=None, https=None),\n        params={\"circl\": {\"method\": None, \"params\": {}}},\n    ),\n)\nreport = CirclHashlookupAnalyzer(inp).execute()\n</code></pre>"},{"location":"modulos/analyzers/circl_hashlookup/#exemplos-de-uso","title":"Exemplos de Uso","text":""},{"location":"modulos/analyzers/circl_hashlookup/#consulta-basica-de-hash","title":"Consulta B\u00e1sica de Hash","text":"<pre><code>from sentineliqsdk import WorkerInput\nfrom sentineliqsdk.analyzers.circl_hashlookup import CirclHashlookupAnalyzer\n\n# Hash MD5 conhecido\ninput_data = WorkerInput(\n    data_type=\"hash\",\n    data=\"5d41402abc4b2a76b9719d911017c592\"  # \"hello\"\n)\n\nanalyzer = CirclHashlookupAnalyzer(input_data)\nreport = analyzer.execute()\n\nprint(f\"Verdict: {report.full_report['verdict']}\")\nprint(f\"Hash Type: {report.full_report['details']['hash_type']}\")\nprint(f\"Trust Level: {report.full_report['details']['lookup_result'].get('hashlookup:trust', 'N/A')}\")\n</code></pre>"},{"location":"modulos/analyzers/circl_hashlookup/#operacao-bulk","title":"Opera\u00e7\u00e3o Bulk","text":"<pre><code>import json\nfrom sentineliqsdk import WorkerInput\nfrom sentineliqsdk.analyzers.circl_hashlookup import CirclHashlookupAnalyzer\n\n# Consulta bulk de m\u00faltiplos hashes MD5\npayload = {\n    \"method\": \"bulk_md5\",\n    \"params\": {\n        \"hashes\": [\n            \"5d41402abc4b2a76b9719d911017c592\",  # \"hello\"\n            \"d41d8cd98f00b204e9800998ecf8427e\"   # empty string\n        ]\n    }\n}\n\ninput_data = WorkerInput(\n    data_type=\"other\",\n    data=json.dumps(payload)\n)\n\nanalyzer = CirclHashlookupAnalyzer(input_data)\nreport = analyzer.execute()\n\nresults = report.full_report['details']['result']\nfor result in results:\n    print(f\"MD5: {result.get('MD5', 'N/A')} - Found: {'Yes' if 'MD5' in result else 'No'}\")\n</code></pre>"},{"location":"modulos/analyzers/circl_hashlookup/#busca-de-relacionamentos","title":"Busca de Relacionamentos","text":"<pre><code>import json\nfrom sentineliqsdk import WorkerInput\nfrom sentineliqsdk.analyzers.circl_hashlookup import CirclHashlookupAnalyzer\n\n# Busca hashes filhos de um SHA1\npayload = {\n    \"method\": \"get_children\",\n    \"params\": {\n        \"sha1\": \"aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d\",\n        \"count\": 10,\n        \"cursor\": \"0\"\n    }\n}\n\ninput_data = WorkerInput(\n    data_type=\"other\",\n    data=json.dumps(payload)\n)\n\nanalyzer = CirclHashlookupAnalyzer(input_data)\nreport = analyzer.execute()\n\nchildren = report.full_report['details']['result']\nprint(f\"Children found: {len(children.get('children', []))}\")\n</code></pre>"},{"location":"modulos/analyzers/circl_hashlookup/#informacoes-do-banco","title":"Informa\u00e7\u00f5es do Banco","text":"<pre><code>import json\nfrom sentineliqsdk import WorkerInput\nfrom sentineliqsdk.analyzers.circl_hashlookup import CirclHashlookupAnalyzer\n\n# Obter informa\u00e7\u00f5es sobre o banco de dados\npayload = {\"method\": \"get_info\", \"params\": {}}\n\ninput_data = WorkerInput(\n    data_type=\"other\",\n    data=json.dumps(payload)\n)\n\nanalyzer = CirclHashlookupAnalyzer(input_data)\nreport = analyzer.execute()\n\ninfo = report.full_report['details']['result']\nprint(f\"Database version: {info.get('version', 'N/A')}\")\nprint(f\"Total hashes: {info.get('total', 'N/A')}\")\n</code></pre>"},{"location":"modulos/analyzers/circl_hashlookup/#uso-correto","title":"Uso Correto","text":"<ul> <li>Para hashes, use <code>data_type=\"hash\"</code>; para chamadas arbitr\u00e1rias, use <code>data_type == \"other\"</code> com JSON v\u00e1lido.</li> <li>Em chamadas din\u00e2micas, valide <code>method</code> com a lista permitida e forne\u00e7a <code>params</code> como objeto.</li> <li>Para opera\u00e7\u00f5es bulk, forne\u00e7a <code>hashes</code> como lista de strings.</li> <li>Para relacionamentos, use SHA1 como par\u00e2metro <code>sha1</code>.</li> </ul>"},{"location":"modulos/analyzers/circl_hashlookup/#retorno","title":"Retorno","text":"<ul> <li><code>AnalyzerReport</code> com <code>full_report</code> contendo:</li> <li><code>observable</code>, <code>verdict</code>, <code>taxonomy</code>, <code>source</code>, <code>data_type</code>, <code>details</code></li> <li><code>details</code> inclui <code>hash_type</code>, <code>lookup_result</code>, e <code>relationships</code> (quando aplic\u00e1vel)</li> </ul>"},{"location":"modulos/analyzers/circl_hashlookup/#tipos-de-hash-suportados","title":"Tipos de Hash Suportados","text":"<ul> <li>MD5: 32 caracteres hexadecimais (ex: <code>5d41402abc4b2a76b9719d911017c592</code>)</li> <li>SHA1: 40 caracteres hexadecimais (ex: <code>aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d</code>)</li> <li>SHA256: 64 caracteres hexadecimais (ex: <code>2cf24dba4f21a03f4b3d914f42305d25206eaf64a81f73b3e4e5b9bd3e978038</code>)</li> <li>SHA512: 128 caracteres hexadecimais</li> </ul>"},{"location":"modulos/analyzers/circl_hashlookup/#metadata","title":"Metadata","text":"<p>O analisador inclui <code>full_report.metadata</code> com:</p> <pre><code>{\n  \"Name\": \"CIRCL Hashlookup Analyzer\",\n  \"Description\": \"Query CIRCL hashlookup for hash reputation, relationships, and bulk operations\",\n  \"Author\": [\"SentinelIQ Team &lt;team@sentineliq.com.br&gt;\"],\n  \"License\": \"SentinelIQ License\",\n  \"pattern\": \"threat-intel\",\n  \"doc_pattern\": \"MkDocs module page; programmatic usage documented\",\n  \"doc\": \"https://killsearch.github.io/sentineliqsdk/modulos/analyzers/circl_hashlookup/\",\n  \"VERSION\": \"STABLE\"\n}\n</code></pre>"},{"location":"modulos/analyzers/circl_hashlookup/#limitacoes","title":"Limita\u00e7\u00f5es","text":"<ul> <li>Servi\u00e7o p\u00fablico sem autentica\u00e7\u00e3o</li> <li>Rate limiting pode ser aplicado pelo CIRCL</li> <li>Relacionamentos parent/child dispon\u00edveis apenas para SHA1</li> <li>Sess\u00f5es podem n\u00e3o estar habilitadas em todas as inst\u00e2ncias</li> </ul>"},{"location":"modulos/analyzers/circl_passivedns/","title":"CIRCL Passive DNS Analyzer","text":"<p>O CIRCL Passive DNS Analyzer \u00e9 um m\u00f3dulo da SentinelIQ SDK que consulta o servi\u00e7o CIRCL Passive DNS para obter registros DNS hist\u00f3ricos de dom\u00ednios, endere\u00e7os IP e URLs.</p>"},{"location":"modulos/analyzers/circl_passivedns/#visao-geral","title":"Vis\u00e3o Geral","text":"<p>O CIRCL Passive DNS \u00e9 um banco de dados que armazena registros DNS hist\u00f3ricos de v\u00e1rias fontes, incluindo an\u00e1lise de malware e parceiros. Os dados DNS hist\u00f3ricos s\u00e3o indexados, tornando-os pesquis\u00e1veis para analistas de seguran\u00e7a, manipuladores de incidentes ou pesquisadores.</p>"},{"location":"modulos/analyzers/circl_passivedns/#caracteristicas","title":"Caracter\u00edsticas","text":"<ul> <li>Consultas de dom\u00ednio: Analisa dom\u00ednios para encontrar registros DNS hist\u00f3ricos</li> <li>Consultas de IP: Encontra dom\u00ednios que resolveram para um endere\u00e7o IP espec\u00edfico</li> <li>Consultas de URL: Extrai o dom\u00ednio de uma URL e consulta os registros DNS hist\u00f3ricos</li> <li>Filtragem por tipo RR: Suporte para filtrar por tipos espec\u00edficos de registros DNS</li> <li>Pagina\u00e7\u00e3o: Suporte para pagina\u00e7\u00e3o de resultados grandes</li> <li>Autentica\u00e7\u00e3o: Requer credenciais CIRCL Passive DNS</li> </ul>"},{"location":"modulos/analyzers/circl_passivedns/#configuracao","title":"Configura\u00e7\u00e3o","text":""},{"location":"modulos/analyzers/circl_passivedns/#credenciais","title":"Credenciais","text":"<p>O analyzer requer credenciais CIRCL Passive DNS configuradas no <code>WorkerConfig.secrets</code>:</p> <pre><code>from sentineliqsdk import WorkerInput, WorkerConfig\n\nsecrets = {\n    \"circl_passivedns\": {\n        \"username\": \"seu_usuario\",\n        \"password\": \"sua_senha\"\n    }\n}\n\ninput_data = WorkerInput(\n    data_type=\"domain\",\n    data=\"example.com\",\n    config=WorkerConfig(secrets=secrets)\n)\n</code></pre>"},{"location":"modulos/analyzers/circl_passivedns/#proxy","title":"Proxy","text":"<p>O analyzer respeita configura\u00e7\u00f5es de proxy definidas em <code>WorkerConfig.proxy</code>:</p> <pre><code>from sentineliqsdk import WorkerInput, WorkerConfig, ProxyConfig\n\ninput_data = WorkerInput(\n    data_type=\"domain\",\n    data=\"example.com\",\n    config=WorkerConfig(\n        proxy=ProxyConfig(\n            http=\"http://proxy:8080\",\n            https=\"https://proxy:8080\"\n        )\n    )\n)\n</code></pre>"},{"location":"modulos/analyzers/circl_passivedns/#uso-programatico","title":"Uso Program\u00e1tico","text":""},{"location":"modulos/analyzers/circl_passivedns/#exemplo-basico","title":"Exemplo B\u00e1sico","text":"<pre><code>from sentineliqsdk import WorkerInput, WorkerConfig\nfrom sentineliqsdk.analyzers.circl_passivedns import CirclPassivednsAnalyzer\n\n# Configurar credenciais\nsecrets = {\n    \"circl_passivedns\": {\n        \"username\": \"seu_usuario\",\n        \"password\": \"sua_senha\"\n    }\n}\n\n# Criar dados de entrada\ninput_data = WorkerInput(\n    data_type=\"domain\",\n    data=\"example.com\",\n    tlp=2,\n    pap=2,\n    config=WorkerConfig(secrets=secrets)\n)\n\n# Executar an\u00e1lise\nanalyzer = CirclPassivednsAnalyzer(input_data)\nreport = analyzer.execute()\n\n# Acessar resultados\nprint(f\"Verdict: {report.full_report['verdict']}\")\nprint(f\"Resultados: {len(report.full_report['details']['results'])}\")\n</code></pre>"},{"location":"modulos/analyzers/circl_passivedns/#analise-de-dominio","title":"An\u00e1lise de Dom\u00ednio","text":"<pre><code>secrets = {\"circl_passivedns\": {\"username\": \"user\", \"password\": \"pass\"}}\ninput_data = WorkerInput(\n    data_type=\"domain\", \n    data=\"malicious-domain.com\",\n    config=WorkerConfig(secrets=secrets)\n)\nanalyzer = CirclPassivednsAnalyzer(input_data)\nreport = analyzer.execute()\n\n# Verificar resultados\ndetails = report.full_report['details']\nprint(f\"Encontrados {details['result_count']} registros DNS\")\nfor result in details['results'][:5]:  # Primeiros 5 resultados\n    print(f\"Tipo: {result['rrtype']}, Nome: {result['rrname']}\")\n</code></pre>"},{"location":"modulos/analyzers/circl_passivedns/#analise-de-ip","title":"An\u00e1lise de IP","text":"<pre><code>secrets = {\"circl_passivedns\": {\"username\": \"user\", \"password\": \"pass\"}}\ninput_data = WorkerInput(\n    data_type=\"ip\", \n    data=\"8.8.8.8\",\n    config=WorkerConfig(secrets=secrets)\n)\nanalyzer = CirclPassivednsAnalyzer(input_data)\nreport = analyzer.execute()\n\n# Verificar dom\u00ednios que resolveram para este IP\ndetails = report.full_report['details']\nfor result in details['results']:\n    if result['rrtype'] == 'A':\n        print(f\"Dom\u00ednio: {result['rdata']}\")\n</code></pre>"},{"location":"modulos/analyzers/circl_passivedns/#analise-de-url","title":"An\u00e1lise de URL","text":"<pre><code>secrets = {\"circl_passivedns\": {\"username\": \"user\", \"password\": \"pass\"}}\ninput_data = WorkerInput(\n    data_type=\"url\", \n    data=\"https://suspicious-site.com/path/to/page\",\n    config=WorkerConfig(secrets=secrets)\n)\nanalyzer = CirclPassivednsAnalyzer(input_data)\nreport = analyzer.execute()\n\n# O analyzer extrai automaticamente o dom\u00ednio da URL\ndetails = report.full_report['details']\nprint(f\"Dom\u00ednio extra\u00eddo: {details['query']}\")\nprint(f\"URL original: {details['original_url']}\")\n</code></pre>"},{"location":"modulos/analyzers/circl_passivedns/#estrutura-de-resposta","title":"Estrutura de Resposta","text":""},{"location":"modulos/analyzers/circl_passivedns/#analyzerreport","title":"AnalyzerReport","text":"<p>O analyzer retorna um <code>AnalyzerReport</code> com a seguinte estrutura:</p> <pre><code>{\n    \"success\": True,\n    \"summary\": {},\n    \"artifacts\": [],\n    \"operations\": [],\n    \"full_report\": {\n        \"observable\": \"example.com\",\n        \"verdict\": \"safe|suspicious|info\",\n        \"taxonomy\": [\n            {\n                \"level\": \"safe\",\n                \"namespace\": \"CIRCL\",\n                \"predicate\": \"PassiveDNS\",\n                \"value\": \"5 records\"\n            }\n        ],\n        \"source\": \"circl_passivedns\",\n        \"data_type\": \"domain\",\n        \"details\": {\n            \"query\": \"example.com\",\n            \"query_type\": \"domain\",\n            \"results\": [...],\n            \"result_count\": 5\n        },\n        \"metadata\": {...}\n    }\n}\n</code></pre>"},{"location":"modulos/analyzers/circl_passivedns/#estrutura-dos-resultados-dns","title":"Estrutura dos Resultados DNS","text":"<p>Cada resultado DNS cont\u00e9m:</p> <pre><code>{\n    \"rrtype\": \"A\",           # Tipo de registro DNS\n    \"rrname\": \"1.2.3.4\",     # Nome do registro\n    \"rdata\": \"example.com\",  # Dados do registro\n    \"count\": \"19\",           # N\u00famero de ocorr\u00eancias\n    \"time_first\": \"2023-10-01 12:00:00\",  # Primeira vez visto\n    \"time_last\": \"2023-10-15 18:30:00\"    # \u00daltima vez visto\n}\n</code></pre>"},{"location":"modulos/analyzers/circl_passivedns/#tipos-de-dados-suportados","title":"Tipos de Dados Suportados","text":"<ul> <li>domain: Dom\u00ednios para consulta DNS hist\u00f3rica</li> <li>ip: Endere\u00e7os IP para encontrar dom\u00ednios associados</li> <li>url: URLs (o dom\u00ednio \u00e9 extra\u00eddo automaticamente)</li> </ul>"},{"location":"modulos/analyzers/circl_passivedns/#verdicts","title":"Verdicts","text":"<p>O analyzer determina o verdict baseado no n\u00famero de registros encontrados:</p> <ul> <li>info: Nenhum registro hist\u00f3rico encontrado</li> <li>safe: 1-5 registros (provavelmente leg\u00edtimo)</li> <li>suspicious: Mais de 5 registros (vale investigar)</li> </ul>"},{"location":"modulos/analyzers/circl_passivedns/#tratamento-de-erros","title":"Tratamento de Erros","text":""},{"location":"modulos/analyzers/circl_passivedns/#erros-de-autenticacao","title":"Erros de Autentica\u00e7\u00e3o","text":"<pre><code># Erro 401: Credenciais inv\u00e1lidas\n# Erro 403: Acesso negado\n</code></pre>"},{"location":"modulos/analyzers/circl_passivedns/#erros-de-formato","title":"Erros de Formato","text":"<pre><code># Dom\u00ednio com '/' - use data_type=\"url\" em vez de \"domain\"\n# URL inv\u00e1lida - n\u00e3o \u00e9 poss\u00edvel extrair dom\u00ednio\n</code></pre>"},{"location":"modulos/analyzers/circl_passivedns/#erros-de-conexao","title":"Erros de Conex\u00e3o","text":"<pre><code># Timeout ou erro de rede\n# Servi\u00e7o indispon\u00edvel\n</code></pre>"},{"location":"modulos/analyzers/circl_passivedns/#exemplo-completo","title":"Exemplo Completo","text":"<pre><code>#!/usr/bin/env python3\nfrom sentineliqsdk import WorkerInput, WorkerConfig\nfrom sentineliqsdk.analyzers.circl_passivedns import CirclPassivednsAnalyzer\n\ndef analyze_domain(domain: str):\n    \"\"\"Analisa um dom\u00ednio usando CIRCL Passive DNS.\"\"\"\n    # Configurar credenciais\n    secrets = {\n        \"circl_passivedns\": {\n            \"username\": \"seu_usuario\",\n            \"password\": \"sua_senha\"\n        }\n    }\n\n    input_data = WorkerInput(\n        data_type=\"domain\", \n        data=domain,\n        config=WorkerConfig(secrets=secrets)\n    )\n    analyzer = CirclPassivednsAnalyzer(input_data)\n    report = analyzer.execute()\n\n    details = report.full_report['details']\n    print(f\"Dom\u00ednio: {domain}\")\n    print(f\"Verdict: {report.full_report['verdict']}\")\n    print(f\"Registros encontrados: {details['result_count']}\")\n\n    # Mostrar tipos de registro \u00fanicos\n    rrtype_counts = {}\n    for result in details['results']:\n        rrtype = result['rrtype']\n        rrtype_counts[rrtype] = rrtype_counts.get(rrtype, 0) + 1\n\n    print(\"Tipos de registro:\")\n    for rrtype, count in sorted(rrtype_counts.items()):\n        print(f\"  {rrtype}: {count} registros\")\n\n    return report\n\n# Exemplo de uso\nif __name__ == \"__main__\":\n    report = analyze_domain(\"example.com\")\n</code></pre>"},{"location":"modulos/analyzers/circl_passivedns/#limitacoes","title":"Limita\u00e7\u00f5es","text":"<ul> <li>Requer credenciais CIRCL Passive DNS v\u00e1lidas</li> <li>Acesso restrito a parceiros confi\u00e1veis</li> <li>Alguns dom\u00ednios podem ter muitos registros (requer pagina\u00e7\u00e3o)</li> <li>N\u00e3o suporta consultas CIDR</li> </ul>"},{"location":"modulos/analyzers/circl_passivedns/#referencias","title":"Refer\u00eancias","text":"<ul> <li>CIRCL Passive DNS Documentation</li> <li>Passive DNS - Common Output Format</li> <li>PyPDNS Library</li> </ul>"},{"location":"modulos/analyzers/circl_passivessl/","title":"CIRCL PassiveSSL Analyzer","text":"<p>The CIRCL PassiveSSL Analyzer queries the CIRCL PassiveSSL service to find relationships between IP addresses and SSL certificates. This analyzer can:</p> <ul> <li>Query IP addresses to find associated SSL certificates</li> <li>Query certificate hashes to find associated IP addresses</li> <li>Provide detailed certificate information and subject details</li> </ul>"},{"location":"modulos/analyzers/circl_passivessl/#features","title":"Features","text":"<ul> <li>IP Analysis: Find SSL certificates associated with a specific IP address</li> <li>Certificate Analysis: Find IP addresses that have used a specific certificate</li> <li>Detailed Results: Includes certificate fingerprints, subjects, and metadata</li> <li>Threat Intelligence: Helps identify suspicious certificate usage patterns</li> </ul>"},{"location":"modulos/analyzers/circl_passivessl/#supported-data-types","title":"Supported Data Types","text":"<ul> <li><code>ip</code>: IPv4 addresses (CIDR notation not supported)</li> <li><code>hash</code>: SHA1 certificate hashes (40 characters)</li> </ul>"},{"location":"modulos/analyzers/circl_passivessl/#configuration","title":"Configuration","text":""},{"location":"modulos/analyzers/circl_passivessl/#required-credentials","title":"Required Credentials","text":"<p>The analyzer requires CIRCL PassiveSSL credentials:</p> <pre><code>secrets = {\n    \"circl_passivessl\": {\n        \"username\": \"your_username\",\n        \"password\": \"your_password\"\n    }\n}\n</code></pre>"},{"location":"modulos/analyzers/circl_passivessl/#configuration-parameters","title":"Configuration Parameters","text":"<pre><code>config = WorkerConfig(\n    check_tlp=True,\n    max_tlp=2,\n    check_pap=True,\n    max_pap=2,\n    auto_extract=True,\n    secrets=secrets\n)\n</code></pre>"},{"location":"modulos/analyzers/circl_passivessl/#usage-examples","title":"Usage Examples","text":""},{"location":"modulos/analyzers/circl_passivessl/#ip-analysis","title":"IP Analysis","text":"<pre><code>from sentineliqsdk import WorkerInput, WorkerConfig\nfrom sentineliqsdk.analyzers.circl_passivessl import CirclPassivesslAnalyzer\n\n# Configure credentials\nsecrets = {\n    \"circl_passivessl\": {\n        \"username\": \"your_username\",\n        \"password\": \"your_password\"\n    }\n}\n\n# Create input for IP analysis\ninput_data = WorkerInput(\n    data_type=\"ip\",\n    data=\"1.2.3.4\",\n    tlp=2,\n    pap=2,\n    config=WorkerConfig(secrets=secrets)\n)\n\n# Run analysis\nanalyzer = CirclPassivesslAnalyzer(input_data)\nreport = analyzer.execute()\n\n# Access results\nprint(f\"Verdict: {report.full_report['verdict']}\")\nprint(f\"Certificates found: {len(report.full_report['details']['certificates'])}\")\n</code></pre>"},{"location":"modulos/analyzers/circl_passivessl/#certificate-hash-analysis","title":"Certificate Hash Analysis","text":"<pre><code># Create input for certificate hash analysis\ninput_data = WorkerInput(\n    data_type=\"hash\",\n    data=\"a1b2c3d4e5f6789012345678901234567890abcd\",\n    tlp=2,\n    pap=2,\n    config=WorkerConfig(secrets=secrets)\n)\n\n# Run analysis\nanalyzer = CirclPassivesslAnalyzer(input_data)\nreport = analyzer.execute()\n\n# Access results\ndetails = report.full_report['details']\nprint(f\"Query hits: {details['query']['hits']}\")\nprint(f\"IPs seen: {len(details['query']['seen'])}\")\n</code></pre>"},{"location":"modulos/analyzers/circl_passivessl/#output-format","title":"Output Format","text":""},{"location":"modulos/analyzers/circl_passivessl/#ip-analysis-output","title":"IP Analysis Output","text":"<pre><code>{\n  \"observable\": \"1.2.3.4\",\n  \"verdict\": \"suspicious\",\n  \"taxonomy\": [\n    {\n      \"level\": \"suspicious\",\n      \"namespace\": \"CIRCL\",\n      \"predicate\": \"PassiveSSL\",\n      \"value\": \"2 records\"\n    }\n  ],\n  \"source\": \"circl_passivessl\",\n  \"data_type\": \"ip\",\n  \"details\": {\n    \"ip\": \"1.2.3.4\",\n    \"certificates\": [\n      {\n        \"fingerprint\": \"a1b2c3d4e5f6789012345678901234567890abcd\",\n        \"subject\": \"CN=example.com, O=Example Corp\"\n      }\n    ]\n  },\n  \"metadata\": {\n    \"name\": \"CIRCL PassiveSSL Analyzer\",\n    \"description\": \"Query CIRCL PassiveSSL for certificate and IP relationships\",\n    \"author\": [\"SentinelIQ Team &lt;team@sentineliq.com.br&gt;\"],\n    \"pattern\": \"threat-intel\",\n    \"VERSION\": \"STABLE\"\n  }\n}\n</code></pre>"},{"location":"modulos/analyzers/circl_passivessl/#certificate-hash-analysis-output","title":"Certificate Hash Analysis Output","text":"<pre><code>{\n  \"observable\": \"a1b2c3d4e5f6789012345678901234567890abcd\",\n  \"verdict\": \"suspicious\",\n  \"taxonomy\": [\n    {\n      \"level\": \"suspicious\",\n      \"namespace\": \"CIRCL\",\n      \"predicate\": \"PassiveSSL\",\n      \"value\": \"5 records\"\n    }\n  ],\n  \"source\": \"circl_passivessl\",\n  \"data_type\": \"hash\",\n  \"details\": {\n    \"query\": {\n      \"hits\": 5,\n      \"seen\": [\"1.2.3.4\", \"5.6.7.8\", \"9.10.11.12\"]\n    },\n    \"cert\": {\n      \"subject\": \"CN=example.com, O=Example Corp\",\n      \"issuer\": \"CN=Example CA, O=Example CA Corp\",\n      \"serial\": \"1234567890\",\n      \"not_before\": \"2023-01-01T00:00:00Z\",\n      \"not_after\": \"2024-01-01T00:00:00Z\"\n    }\n  },\n  \"metadata\": {\n    \"name\": \"CIRCL PassiveSSL Analyzer\",\n    \"description\": \"Query CIRCL PassiveSSL for certificate and IP relationships\",\n    \"author\": [\"SentinelIQ Team &lt;team@sentineliq.com.br&gt;\"],\n    \"pattern\": \"threat-intel\",\n    \"VERSION\": \"STABLE\"\n  }\n}\n</code></pre>"},{"location":"modulos/analyzers/circl_passivessl/#verdict-levels","title":"Verdict Levels","text":"<p>The analyzer uses the following verdict levels based on result counts:</p> <ul> <li>info: No records found</li> <li>safe: 1-3 records (likely legitimate usage)</li> <li>suspicious: 4+ records (worth investigating)</li> </ul>"},{"location":"modulos/analyzers/circl_passivessl/#error-handling","title":"Error Handling","text":"<p>The analyzer handles various error conditions:</p> <ul> <li>Authentication failures: Invalid credentials</li> <li>Invalid data types: Unsupported data types</li> <li>Invalid hash format: Non-SHA1 or malformed hashes</li> <li>CIDR notation: Not supported for IP analysis</li> <li>Network errors: Connection or API failures</li> </ul>"},{"location":"modulos/analyzers/circl_passivessl/#safety-considerations","title":"Safety Considerations","text":"<ul> <li>Dry-run mode: Examples default to dry-run mode</li> <li>Credential security: Use <code>WorkerConfig.secrets</code> for credentials</li> <li>Rate limiting: Respect CIRCL API rate limits</li> <li>Data sensitivity: Be mindful of TLP/PAP levels</li> </ul>"},{"location":"modulos/analyzers/circl_passivessl/#related-modules","title":"Related Modules","text":"<ul> <li>CIRCL PassiveDNS Analyzer - Historical DNS records</li> <li>CIRCL Hash Lookup Analyzer - File hash analysis</li> </ul>"},{"location":"modulos/analyzers/circl_passivessl/#references","title":"References","text":"<ul> <li>CIRCL PassiveSSL Service</li> <li>CIRCL.lu - Computer Incident Response Center Luxembourg</li> </ul>"},{"location":"modulos/analyzers/circl_vulnerability_lookup/","title":"CIRCL Vulnerability Lookup Analyzer","text":"<p>O CIRCL Vulnerability Lookup Analyzer analisa vulnerabilidades CVE usando a API do CIRCL Vulnerability Lookup, fornecendo pontua\u00e7\u00f5es EPSS e m\u00e9tricas CVSS.</p>"},{"location":"modulos/analyzers/circl_vulnerability_lookup/#caracteristicas","title":"Caracter\u00edsticas","text":"<ul> <li>An\u00e1lise de CVE: Busca informa\u00e7\u00f5es detalhadas sobre vulnerabilidades CVE</li> <li>Pontua\u00e7\u00f5es EPSS: Avalia o risco de explora\u00e7\u00e3o usando EPSS (Exploit Prediction Scoring System)</li> <li>M\u00e9tricas CVSS: Extrai e analisa pontua\u00e7\u00f5es CVSS de diferentes vers\u00f5es</li> <li>Sightings: Analisa avistamentos e explora\u00e7\u00f5es conhecidas</li> <li>Taxonomia: Gera entradas de taxonomia baseadas em risco e severidade</li> </ul>"},{"location":"modulos/analyzers/circl_vulnerability_lookup/#configuracao","title":"Configura\u00e7\u00e3o","text":""},{"location":"modulos/analyzers/circl_vulnerability_lookup/#credenciais-obrigatorio","title":"Credenciais (Obrigat\u00f3rio)","text":"<pre><code>secrets = {\n    \"circl_vulnerability_lookup\": {\n        \"token\": \"seu_token_api_circl\"\n    }\n}\n</code></pre>"},{"location":"modulos/analyzers/circl_vulnerability_lookup/#configuracoes-opcionais","title":"Configura\u00e7\u00f5es Opcionais","text":"<pre><code>config = WorkerConfig(\n    # URL da API CIRCL (padr\u00e3o: https://vulnerability.circl.lu/)\n    circl_vulnerability_lookup_url=\"https://vulnerability.circl.lu/\",\n    secrets=secrets\n)\n</code></pre>"},{"location":"modulos/analyzers/circl_vulnerability_lookup/#uso-programatico","title":"Uso Program\u00e1tico","text":""},{"location":"modulos/analyzers/circl_vulnerability_lookup/#exemplo-basico","title":"Exemplo B\u00e1sico","text":"<pre><code>from sentineliqsdk import WorkerInput, WorkerConfig\nfrom sentineliqsdk.analyzers.circl_vulnerability_lookup import CIRCLVulnerabilityLookupAnalyzer\n\n# Configurar credenciais\nsecrets = {\n    \"circl_vulnerability_lookup\": {\n        \"token\": \"seu_token_api_circl\"\n    }\n}\n\n# Criar entrada\ninput_data = WorkerInput(\n    data_type=\"cve\",\n    data=\"CVE-2021-44228\",\n    tlp=2,\n    pap=2,\n    config=WorkerConfig(secrets=secrets)\n)\n\n# Executar an\u00e1lise\nanalyzer = CIRCLVulnerabilityLookupAnalyzer(input_data)\nreport = analyzer.execute()\n\n# Acessar resultados\nprint(report.full_report[\"short_report\"])\nprint(report.full_report[\"taxonomy\"])\n</code></pre>"},{"location":"modulos/analyzers/circl_vulnerability_lookup/#exemplo-com-configuracao-personalizada","title":"Exemplo com Configura\u00e7\u00e3o Personalizada","text":"<pre><code>from sentineliqsdk import WorkerInput, WorkerConfig\nfrom sentineliqsdk.analyzers.circl_vulnerability_lookup import CIRCLVulnerabilityLookupAnalyzer\n\n# Configura\u00e7\u00e3o completa\nsecrets = {\n    \"circl_vulnerability_lookup\": {\n        \"token\": \"seu_token_api_circl\"\n    }\n}\n\nconfig = WorkerConfig(\n    check_tlp=True,\n    max_tlp=2,\n    check_pap=True,\n    max_pap=2,\n    auto_extract=True,\n    circl_vulnerability_lookup_url=\"https://vulnerability.circl.lu/\",\n    secrets=secrets\n)\n\ninput_data = WorkerInput(\n    data_type=\"cve\",\n    data=\"CVE-2021-44228\",\n    tlp=2,\n    pap=2,\n    config=config\n)\n\nanalyzer = CIRCLVulnerabilityLookupAnalyzer(input_data)\nreport = analyzer.execute()\n\n# Processar resultados\nfor taxonomy in report.full_report[\"taxonomy\"]:\n    print(f\"{taxonomy['level']}: {taxonomy['value']}\")\n</code></pre>"},{"location":"modulos/analyzers/circl_vulnerability_lookup/#tipos-de-dados-suportados","title":"Tipos de Dados Suportados","text":"<ul> <li><code>cve</code>: CVE (Common Vulnerabilities and Exposures)</li> <li><code>vuln</code>: Vulnerabilidade</li> <li><code>other</code>: Outros tipos (quando cont\u00e9m CVE no valor)</li> </ul>"},{"location":"modulos/analyzers/circl_vulnerability_lookup/#estrutura-de-resposta","title":"Estrutura de Resposta","text":""},{"location":"modulos/analyzers/circl_vulnerability_lookup/#campos-principais","title":"Campos Principais","text":"<ul> <li>vulnerability: Dados completos da vulnerabilidade</li> <li>cvss_scores: Pontua\u00e7\u00f5es CVSS por vers\u00e3o</li> <li>sightings: Avistamentos e explora\u00e7\u00f5es</li> <li>epss: Dados EPSS (Exploit Prediction Scoring System)</li> <li>comments: Coment\u00e1rios sobre a vulnerabilidade</li> <li>short_report: Relat\u00f3rio resumido em texto</li> <li>taxonomy: Entradas de taxonomia para classifica\u00e7\u00e3o</li> <li>stats: Estat\u00edsticas de avistamentos</li> </ul>"},{"location":"modulos/analyzers/circl_vulnerability_lookup/#exemplo-de-resposta","title":"Exemplo de Resposta","text":"<pre><code>{\n  \"vulnerability\": {\n    \"id\": \"CVE-2021-44228\",\n    \"metrics\": {\n      \"cvssMetricV31\": [{\n        \"cvssData\": {\n          \"baseScore\": 9.8,\n          \"vectorString\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H\",\n          \"baseSeverity\": \"CRITICAL\"\n        }\n      }]\n    }\n  },\n  \"cvss_scores\": {\n    \"3.1\": {\n      \"score\": 9.8,\n      \"severity\": \"CRITICAL\",\n      \"vector\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H\"\n    }\n  },\n  \"short_report\": [\n    \"EPSS Risk: Very High (Score 0.95, 95th percentile)\",\n    \"CVSS 3.1: CRITICAL (9.8)\"\n  ],\n  \"taxonomy\": [\n    {\n      \"level\": \"malicious\",\n      \"namespace\": \"CIRCLVulnL\",\n      \"predicate\": \"cvss\",\n      \"value\": \"Critical (CVSS 9.8)\"\n    },\n    {\n      \"level\": \"malicious\",\n      \"namespace\": \"CIRCLVulnL\",\n      \"predicate\": \"epss\",\n      \"value\": \"Very High (95th percentile)\"\n    }\n  ]\n}\n</code></pre>"},{"location":"modulos/analyzers/circl_vulnerability_lookup/#niveis-de-taxonomia","title":"N\u00edveis de Taxonomia","text":""},{"location":"modulos/analyzers/circl_vulnerability_lookup/#cvss-common-vulnerability-scoring-system","title":"CVSS (Common Vulnerability Scoring System)","text":"<ul> <li>malicious: CVSS &gt;= 7.0 (High/Critical)</li> <li>suspicious: CVSS &gt;= 4.0 (Medium)</li> <li>info: CVSS &lt; 4.0 (Low)</li> <li>safe: Sem pontua\u00e7\u00e3o CVSS</li> </ul>"},{"location":"modulos/analyzers/circl_vulnerability_lookup/#epss-exploit-prediction-scoring-system","title":"EPSS (Exploit Prediction Scoring System)","text":"<ul> <li>malicious: Percentil &gt;= 90% (Very High)</li> <li>suspicious: Percentil &gt;= 40% (High/Moderate)</li> <li>info: Percentil &gt;= 10% (Low)</li> <li>safe: Percentil &lt; 10% (Very Low)</li> </ul>"},{"location":"modulos/analyzers/circl_vulnerability_lookup/#sightings","title":"Sightings","text":"<ul> <li>malicious: Vulnerabilidade explorada</li> <li>suspicious: Vulnerabilidade avistada ou outros avistamentos</li> <li>info: Sem avistamentos</li> </ul>"},{"location":"modulos/analyzers/circl_vulnerability_lookup/#dependencias","title":"Depend\u00eancias","text":"<p>Este analyzer requer a biblioteca <code>pyvulnerabilitylookup</code>:</p> <pre><code>pip install pyvulnerabilitylookup\n</code></pre>"},{"location":"modulos/analyzers/circl_vulnerability_lookup/#exemplo-de-uso-via-linha-de-comando","title":"Exemplo de Uso via Linha de Comando","text":"<pre><code># Executar em modo dry-run\npython examples/analyzers/circl_vulnerability_lookup_example.py --cve CVE-2021-44228\n\n# Executar com token real\npython examples/analyzers/circl_vulnerability_lookup_example.py --cve CVE-2021-44228 --execute --token seu_token\n\n# Usar URL personalizada\npython examples/analyzers/circl_vulnerability_lookup_example.py --cve CVE-2021-44228 --execute --token seu_token --url https://vulnerability.circl.lu/\n</code></pre>"},{"location":"modulos/analyzers/circl_vulnerability_lookup/#tratamento-de-erros","title":"Tratamento de Erros","text":"<ul> <li>Tipo de dados n\u00e3o suportado: Erro se o tipo de dados n\u00e3o for CVE/vuln/other</li> <li>Biblioteca n\u00e3o dispon\u00edvel: Erro se <code>pyvulnerabilitylookup</code> n\u00e3o estiver instalada</li> <li>Dados n\u00e3o encontrados: Erro se a CVE n\u00e3o for encontrada na base de dados</li> <li>Erro de API: Erro se houver problemas na comunica\u00e7\u00e3o com a API</li> </ul>"},{"location":"modulos/analyzers/circl_vulnerability_lookup/#limitacoes","title":"Limita\u00e7\u00f5es","text":"<ul> <li>Requer token de API v\u00e1lido do CIRCL</li> <li>Depende da disponibilidade da API CIRCL</li> <li>Funciona apenas com CVE v\u00e1lidas</li> <li>Requer biblioteca externa <code>pyvulnerabilitylookup</code></li> </ul>"},{"location":"modulos/analyzers/clamav/","title":"ClamAV Analyzer","text":"<p>The ClamAV Analyzer scans files for malware using the ClamAV antivirus engine. It connects to a local ClamAV daemon and performs real-time malware detection on files or file content.</p>"},{"location":"modulos/analyzers/clamav/#features","title":"Features","text":"<ul> <li>File Scanning: Scan files by path or content</li> <li>Real-time Detection: Uses ClamAV daemon for up-to-date threat detection</li> <li>Multiple Input Types: Supports both file paths and file content</li> <li>Comprehensive Reporting: Provides detailed taxonomy and metadata</li> <li>Error Handling: Robust error handling for connection and scan failures</li> </ul>"},{"location":"modulos/analyzers/clamav/#installation","title":"Installation","text":""},{"location":"modulos/analyzers/clamav/#prerequisites","title":"Prerequisites","text":"<ol> <li>ClamAV Daemon: Install and configure ClamAV daemon    ```bash    # Ubuntu/Debian    sudo apt-get install clamav clamav-daemon</li> </ol> <p># CentOS/RHEL    sudo yum install clamav clamd</p> <p># Start the daemon    sudo systemctl start clamav-daemon    sudo systemctl enable clamav-daemon    ```</p> <ol> <li>Python Dependencies: Install required Python packages    <code>bash    pip install pyclamd</code></li> </ol>"},{"location":"modulos/analyzers/clamav/#configuration","title":"Configuration","text":"<p>The analyzer requires a running ClamAV daemon. By default, it connects to: - Socket Path: <code>/var/run/clamav/clamd.ctl</code> - Timeout: 30 seconds</p> <p>You can customize these settings through the configuration:</p> <pre><code>from sentineliqsdk import WorkerInput, WorkerConfig\n\nconfig = WorkerConfig(\n    check_tlp=True,\n    max_tlp=2,\n    check_pap=True,\n    max_pap=2,\n    auto_extract=True,\n    params={\n        \"clamav.socket_path\": \"/custom/path/clamd.ctl\",  # Custom socket path\n        \"clamav.timeout\": 60                             # Custom timeout\n    }\n)\n</code></pre>"},{"location":"modulos/analyzers/clamav/#usage","title":"Usage","text":""},{"location":"modulos/analyzers/clamav/#basic-file-scanning","title":"Basic File Scanning","text":"<pre><code>from sentineliqsdk import WorkerInput, WorkerConfig\nfrom sentineliqsdk.analyzers.clamav import ClamavAnalyzer\n\n# Scan a file by path\ninput_data = WorkerInput(\n    data_type=\"file\",\n    data=\"file content\",\n    filename=\"/path/to/suspicious_file.exe\",\n    tlp=2,\n    pap=2,\n    config=WorkerConfig(\n        check_tlp=True,\n        max_tlp=2,\n        check_pap=True,\n        max_pap=2,\n        auto_extract=True\n    )\n)\n\nanalyzer = ClamavAnalyzer(input_data)\nreport = analyzer.execute()\n\nprint(f\"Verdict: {report.full_report['verdict']}\")\nif report.full_report['malware_name']:\n    print(f\"Malware: {report.full_report['malware_name']}\")\n</code></pre>"},{"location":"modulos/analyzers/clamav/#file-content-scanning","title":"File Content Scanning","text":"<pre><code># Scan file content directly\ninput_data = WorkerInput(\n    data_type=\"file\",\n    data=\"malicious file content as string\",\n    tlp=2,\n    pap=2,\n    config=WorkerConfig(\n        check_tlp=True,\n        max_tlp=2,\n        check_pap=True,\n        max_pap=2,\n        auto_extract=True\n    )\n)\n\nanalyzer = ClamavAnalyzer(input_data)\nreport = analyzer.execute()\n</code></pre>"},{"location":"modulos/analyzers/clamav/#custom-configuration","title":"Custom Configuration","text":"<pre><code># Custom ClamAV configuration\nconfig = WorkerConfig(\n    check_tlp=True,\n    max_tlp=2,\n    check_pap=True,\n    max_pap=2,\n    auto_extract=True,\n    params={\n        \"clamav.socket_path\": \"/var/run/clamav/clamd.ctl\",\n        \"clamav.timeout\": 60\n    }\n)\n\ninput_data = WorkerInput(\n    data_type=\"file\",\n    data=\"test content\",\n    filename=\"/path/to/file\",\n    tlp=2,\n    pap=2,\n    config=config\n)\n\nanalyzer = ClamavAnalyzer(input_data)\nreport = analyzer.execute()\n</code></pre>"},{"location":"modulos/analyzers/clamav/#output-format","title":"Output Format","text":""},{"location":"modulos/analyzers/clamav/#successful-scan-clean-file","title":"Successful Scan (Clean File)","text":"<pre><code>{\n  \"success\": true,\n  \"summary\": {},\n  \"artifacts\": [],\n  \"operations\": [],\n  \"full_report\": {\n    \"observable\": \"file content\",\n    \"verdict\": \"safe\",\n    \"malware_name\": null,\n    \"taxonomy\": [\n      {\n        \"level\": \"safe\",\n        \"namespace\": \"ClamAV\",\n        \"predicate\": \"detection\",\n        \"value\": \"No threats detected\"\n      }\n    ],\n    \"metadata\": {\n      \"name\": \"ClamAV Analyzer\",\n      \"description\": \"Scans files for malware using ClamAV antivirus engine\",\n      \"author\": [\"SentinelIQ Team &lt;team@sentineliq.com.br&gt;\"],\n      \"pattern\": \"antivirus\",\n      \"doc_pattern\": \"MkDocs module page; programmatic usage\",\n      \"doc\": \"https://killsearch.github.io/sentineliqsdk/modulos/analyzers/clamav/\",\n      \"version_stage\": \"TESTING\"\n    }\n  }\n}\n</code></pre>"},{"location":"modulos/analyzers/clamav/#successful-scan-malware-detected","title":"Successful Scan (Malware Detected)","text":"<pre><code>{\n  \"success\": true,\n  \"summary\": {},\n  \"artifacts\": [],\n  \"operations\": [],\n  \"full_report\": {\n    \"observable\": \"file content\",\n    \"verdict\": \"malicious\",\n    \"malware_name\": \"EICAR-Test-File\",\n    \"taxonomy\": [\n      {\n        \"level\": \"malicious\",\n        \"namespace\": \"ClamAV\",\n        \"predicate\": \"detection\",\n        \"value\": \"EICAR-Test-File\"\n      }\n    ],\n    \"metadata\": {\n      \"name\": \"ClamAV Analyzer\",\n      \"description\": \"Scans files for malware using ClamAV antivirus engine\",\n      \"author\": [\"SentinelIQ Team &lt;team@sentineliq.com.br&gt;\"],\n      \"pattern\": \"antivirus\",\n      \"doc_pattern\": \"MkDocs module page; programmatic usage\",\n      \"doc\": \"https://killsearch.github.io/sentineliqsdk/modulos/analyzers/clamav/\",\n      \"version_stage\": \"TESTING\"\n    }\n  }\n}\n</code></pre>"},{"location":"modulos/analyzers/clamav/#error-response","title":"Error Response","text":"<pre><code>{\n  \"success\": false,\n  \"input\": {\n    \"data_type\": \"file\",\n    \"data\": \"test content\",\n    \"filename\": \"/path/to/file\"\n  },\n  \"errorMessage\": \"Failed to connect to ClamAV daemon at /var/run/clamav/clamd.ctl: Connection refused\"\n}\n</code></pre>"},{"location":"modulos/analyzers/clamav/#configuration-parameters","title":"Configuration Parameters","text":"Parameter Type Default Description <code>params[\"clamav.socket_path\"]</code> string <code>/var/run/clamav/clamd.ctl</code> Path to ClamAV daemon socket <code>params[\"clamav.timeout\"]</code> integer <code>30</code> Connection timeout in seconds <code>check_tlp</code> boolean <code>True</code> Enable TLP checking <code>max_tlp</code> integer <code>2</code> Maximum allowed TLP level <code>check_pap</code> boolean <code>True</code> Enable PAP checking <code>max_pap</code> integer <code>2</code> Maximum allowed PAP level <code>auto_extract</code> boolean <code>True</code> Enable automatic IOC extraction"},{"location":"modulos/analyzers/clamav/#taxonomy-levels","title":"Taxonomy Levels","text":"<p>The analyzer uses the following taxonomy levels:</p> <ul> <li><code>safe</code>: No threats detected</li> <li><code>malicious</code>: Malware detected</li> </ul>"},{"location":"modulos/analyzers/clamav/#error-handling","title":"Error Handling","text":"<p>The analyzer handles various error conditions:</p> <ol> <li>Connection Errors: When ClamAV daemon is not running or unreachable</li> <li>File Errors: When specified files don't exist or are not accessible</li> <li>Scan Errors: When ClamAV encounters errors during scanning</li> <li>Data Type Errors: When non-file data types are provided</li> </ol>"},{"location":"modulos/analyzers/clamav/#security-considerations","title":"Security Considerations","text":"<ul> <li>File Access: The analyzer requires read access to files being scanned</li> <li>Daemon Security: Ensure ClamAV daemon is properly secured and updated</li> <li>TLP/PAP Compliance: Respects TLP and PAP restrictions when enabled</li> <li>Error Sanitization: Sensitive information is sanitized in error messages</li> </ul>"},{"location":"modulos/analyzers/clamav/#troubleshooting","title":"Troubleshooting","text":""},{"location":"modulos/analyzers/clamav/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Connection Refused <code>Error: Failed to connect to ClamAV daemon at /var/run/clamav/clamd.ctl: Connection refused</code> Solution: Ensure ClamAV daemon is running and socket path is correct</p> </li> <li> <p>Permission Denied <code>Error: File not found: /path/to/file</code> Solution: Check file permissions and path correctness</p> </li> <li> <p>Timeout Errors <code>Error: Error scanning file: Timeout</code> Solution: Increase timeout value or check daemon performance</p> </li> </ol>"},{"location":"modulos/analyzers/clamav/#debugging","title":"Debugging","text":"<p>Enable debug mode by setting a higher timeout and checking daemon status:</p> <pre><code>config = WorkerConfig(\n    params={\n        \"clamav.timeout\": 120,  # Increase timeout\n        \"clamav.socket_path\": \"/var/run/clamav/clamd.ctl\"\n    }\n)\n</code></pre> <p>Check ClamAV daemon status:</p> <pre><code>sudo systemctl status clamav-daemon\nsudo clamdscan --version\n</code></pre>"},{"location":"modulos/analyzers/clamav/#examples","title":"Examples","text":""},{"location":"modulos/analyzers/clamav/#command-line-usage","title":"Command Line Usage","text":"<pre><code># Run the example\npython examples/analyzers/clamav_example.py --help\n\n# Scan a file\npython examples/analyzers/clamav_example.py --execute --file /path/to/file\n\n# Test with EICAR\npython examples/analyzers/clamav_example.py --execute --test-eicar\n\n# Dry run mode (default)\npython examples/analyzers/clamav_example.py --file /path/to/file\n</code></pre>"},{"location":"modulos/analyzers/clamav/#programmatic-usage","title":"Programmatic Usage","text":"<pre><code>import json\nfrom sentineliqsdk import WorkerInput, WorkerConfig\nfrom sentineliqsdk.analyzers.clamav import ClamavAnalyzer\n\n# Configure and run\ninput_data = WorkerInput(\n    data_type=\"file\",\n    data=\"test content\",\n    filename=\"/path/to/file\",\n    tlp=2,\n    pap=2,\n    config=WorkerConfig(\n        check_tlp=True,\n        max_tlp=2,\n        check_pap=True,\n        max_pap=2,\n        auto_extract=True\n    )\n)\n\nanalyzer = ClamavAnalyzer(input_data)\nreport = analyzer.execute()\n\n# Print results\nprint(json.dumps(report.full_report, ensure_ascii=False, indent=2))\n</code></pre>"},{"location":"modulos/analyzers/clamav/#related-documentation","title":"Related Documentation","text":"<ul> <li>ClamAV Official Documentation</li> <li>pyclamd Documentation</li> <li>SentinelIQ SDK Agent Guide</li> <li>HTTPX Client Pattern</li> </ul>"},{"location":"modulos/analyzers/clamav/#support","title":"Support","text":"<p>For issues and questions: - Create an issue in the SentinelIQ SDK repository - Check the troubleshooting section - Review the example code</p>"},{"location":"modulos/analyzers/cluster25/","title":"Cluster25 Analyzer","text":"<p>O Cluster25 Analyzer \u00e9 um m\u00f3dulo de an\u00e1lise de indicadores de amea\u00e7a que utiliza a plataforma de intelig\u00eancia de amea\u00e7as Cluster25 para obter dados de reputa\u00e7\u00e3o e classifica\u00e7\u00e3o de seguran\u00e7a.</p>"},{"location":"modulos/analyzers/cluster25/#visao-geral","title":"Vis\u00e3o Geral","text":"<p>Este analyzer consulta a API do Cluster25 para obter informa\u00e7\u00f5es de intelig\u00eancia de amea\u00e7as sobre v\u00e1rios tipos de indicadores, incluindo IPs, dom\u00ednios, URLs e outros observ\u00e1veis. O Cluster25 fornece pontua\u00e7\u00f5es de reputa\u00e7\u00e3o e classifica\u00e7\u00f5es de seguran\u00e7a baseadas em sua base de dados de amea\u00e7as.</p>"},{"location":"modulos/analyzers/cluster25/#caracteristicas","title":"Caracter\u00edsticas","text":"<ul> <li>An\u00e1lise de Reputa\u00e7\u00e3o: Obt\u00e9m pontua\u00e7\u00f5es de reputa\u00e7\u00e3o para indicadores</li> <li>Classifica\u00e7\u00e3o Autom\u00e1tica: Classifica indicadores como seguros, suspeitos ou maliciosos</li> <li>M\u00faltiplos Tipos de Dados: Suporta IPs, dom\u00ednios, URLs e outros observ\u00e1veis</li> <li>Taxonomia Estruturada: Gera entradas de taxonomia padronizadas</li> <li>Configura\u00e7\u00e3o Flex\u00edvel: Suporte a configura\u00e7\u00f5es personalizadas de timeout e retry</li> </ul>"},{"location":"modulos/analyzers/cluster25/#configuracao","title":"Configura\u00e7\u00e3o","text":""},{"location":"modulos/analyzers/cluster25/#credenciais-obrigatorias","title":"Credenciais (Obrigat\u00f3rias)","text":"<p>O analyzer requer as seguintes credenciais configuradas em <code>WorkerConfig.secrets</code>:</p> <pre><code>secrets = {\n    \"cluster25\": {\n        \"client_id\": \"seu_client_id_aqui\",\n        \"client_key\": \"sua_client_key_aqui\"\n    }\n}\n</code></pre>"},{"location":"modulos/analyzers/cluster25/#configuracoes-opcionais","title":"Configura\u00e7\u00f5es Opcionais","text":"<pre><code>config = WorkerConfig(\n    # Configura\u00e7\u00f5es gerais\n    check_tlp=True,\n    max_tlp=2,\n    check_pap=True,\n    max_pap=2,\n    auto_extract=True,\n    # Configura\u00e7\u00f5es do Cluster25 via params\n    params={\n        \"cluster25.base_url\": \"https://api.cluster25.com\",  # URL base da API\n        \"cluster25.timeout\": 30,                            # Timeout em segundos\n        \"cluster25.max_retries\": 3,                         # N\u00famero m\u00e1ximo de tentativas\n    },\n    secrets=secrets\n)\n</code></pre>"},{"location":"modulos/analyzers/cluster25/#uso-programatico","title":"Uso Program\u00e1tico","text":""},{"location":"modulos/analyzers/cluster25/#exemplo-basico","title":"Exemplo B\u00e1sico","text":"<pre><code>from __future__ import annotations\n\nfrom sentineliqsdk import WorkerInput, WorkerConfig\nfrom sentineliqsdk.analyzers.cluster25 import Cluster25Analyzer\n\n# Configurar credenciais\nsecrets = {\n    \"cluster25\": {\n        \"client_id\": \"seu_client_id_aqui\",\n        \"client_key\": \"sua_client_key_aqui\"\n    }\n}\n\n# Configurar par\u00e2metros\nconfig = WorkerConfig(\n    check_tlp=True,\n    max_tlp=2,\n    check_pap=True,\n    max_pap=2,\n    auto_extract=True,\n    params={\n        \"cluster25.base_url\": \"https://api.cluster25.com\",\n        \"cluster25.timeout\": 30,\n        \"cluster25.max_retries\": 3,\n    },\n    secrets=secrets\n)\n\n# Criar dados de entrada\ninput_data = WorkerInput(\n    data_type=\"ip\",\n    data=\"1.2.3.4\",\n    tlp=2,\n    pap=2,\n    config=config\n)\n\n# Executar an\u00e1lise\nanalyzer = Cluster25Analyzer(input_data)\nreport = analyzer.execute()\n\n# Acessar resultados\nprint(f\"Observable: {report.full_report['observable']}\")\nprint(f\"Score: {report.full_report['indicator_data'].get('score', 'N/A')}\")\nprint(f\"Taxonomy: {report.full_report['taxonomy']}\")\n</code></pre>"},{"location":"modulos/analyzers/cluster25/#exemplo-com-diferentes-tipos-de-dados","title":"Exemplo com Diferentes Tipos de Dados","text":"<pre><code># Analisar IP\nip_data = WorkerInput(\n    data_type=\"ip\",\n    data=\"192.168.1.1\",\n    config=config\n)\nip_report = Cluster25Analyzer(ip_data).execute()\n\n# Analisar dom\u00ednio\ndomain_data = WorkerInput(\n    data_type=\"domain\",\n    data=\"example.com\",\n    config=config\n)\ndomain_report = Cluster25Analyzer(domain_data).execute()\n\n# Analisar URL\nurl_data = WorkerInput(\n    data_type=\"url\",\n    data=\"https://example.com/path\",\n    config=config\n)\nurl_report = Cluster25Analyzer(url_data).execute()\n</code></pre>"},{"location":"modulos/analyzers/cluster25/#processamento-em-lote","title":"Processamento em Lote","text":"<pre><code>indicators = [\"1.2.3.4\", \"8.8.8.8\", \"malicious.com\"]\nresults = []\n\nfor indicator in indicators:\n    # Determinar tipo de dados automaticamente\n    data_type = \"ip\" if indicator.count(\".\") == 3 else \"domain\"\n\n    input_data = WorkerInput(\n        data_type=data_type,\n        data=indicator,\n        config=config\n    )\n\n    analyzer = Cluster25Analyzer(input_data)\n    report = analyzer.execute()\n    results.append(report)\n\n# Processar resultados\nfor i, report in enumerate(results):\n    if report.success:\n        score = report.full_report['indicator_data'].get('score', 0)\n        print(f\"{indicators[i]}: Score {score}\")\n</code></pre>"},{"location":"modulos/analyzers/cluster25/#estrutura-de-resposta","title":"Estrutura de Resposta","text":""},{"location":"modulos/analyzers/cluster25/#resposta-de-sucesso","title":"Resposta de Sucesso","text":"<pre><code>{\n  \"success\": true,\n  \"summary\": {},\n  \"artifacts\": [],\n  \"operations\": [],\n  \"full_report\": {\n    \"observable\": \"1.2.3.4\",\n    \"indicator_data\": {\n      \"indicator\": \"1.2.3.4\",\n      \"indicator_type\": \"ip\",\n      \"score\": 75\n    },\n    \"taxonomy\": [\n      {\n        \"level\": \"info\",\n        \"namespace\": \"C25\",\n        \"predicate\": \"Indicator\",\n        \"value\": \"1.2.3.4\"\n      },\n      {\n        \"level\": \"info\",\n        \"namespace\": \"C25\",\n        \"predicate\": \"Indicator Type\",\n        \"value\": \"ip\"\n      },\n      {\n        \"level\": \"suspicious\",\n        \"namespace\": \"C25\",\n        \"predicate\": \"Score\",\n        \"value\": \"75\"\n      }\n    ],\n    \"metadata\": {\n      \"Name\": \"Cluster25 Analyzer\",\n      \"Description\": \"Analyzes indicators using Cluster25 threat intelligence platform\",\n      \"Author\": [\"SentinelIQ Team &lt;team@sentineliq.com.br&gt;\"],\n      \"pattern\": \"threat-intel\",\n      \"doc_pattern\": \"MkDocs module page; programmatic usage\",\n      \"doc\": \"https://killsearch.github.io/sentineliqsdk/modulos/analyzers/cluster25/\",\n      \"VERSION\": \"TESTING\"\n    }\n  }\n}\n</code></pre>"},{"location":"modulos/analyzers/cluster25/#resposta-de-erro","title":"Resposta de Erro","text":"<pre><code>{\n  \"success\": true,\n  \"summary\": {},\n  \"artifacts\": [],\n  \"operations\": [],\n  \"full_report\": {\n    \"observable\": \"1.2.3.4\",\n    \"error\": \"Unable to retrieve investigate result for indicator '1.2.3.4' from Cluster25 platform: 404 Not Found\",\n    \"taxonomy\": [\n      {\n        \"level\": \"info\",\n        \"namespace\": \"C25\",\n        \"predicate\": \"Error\",\n        \"value\": \"Unable to retrieve investigate result for indicator '1.2.3.4' from Cluster25 platform: 404 Not Found\"\n      }\n    ],\n    \"metadata\": { ... }\n  }\n}\n</code></pre>"},{"location":"modulos/analyzers/cluster25/#niveis-de-taxonomia","title":"N\u00edveis de Taxonomia","text":"<p>O analyzer classifica indicadores com base na pontua\u00e7\u00e3o retornada pela API:</p> <ul> <li>Safe (score &lt; 50): Indicador considerado seguro</li> <li>Suspicious (50 \u2264 score &lt; 80): Indicador suspeito</li> <li>Malicious (score \u2265 80): Indicador malicioso confirmado</li> </ul>"},{"location":"modulos/analyzers/cluster25/#tipos-de-dados-suportados","title":"Tipos de Dados Suportados","text":"<ul> <li><code>ip</code>: Endere\u00e7os IPv4 e IPv6</li> <li><code>url</code>: URLs completas</li> <li><code>domain</code>: Nomes de dom\u00ednio</li> <li><code>fqdn</code>: Nomes de dom\u00ednio totalmente qualificados</li> <li><code>hash</code>: Hashes MD5, SHA1, SHA256</li> <li><code>mail</code>: Endere\u00e7os de email</li> <li><code>user-agent</code>: User agents de navegadores</li> <li><code>uri_path</code>: Caminhos de URI</li> <li><code>registry</code>: Chaves de registro</li> <li><code>file</code>: Arquivos (quando aplic\u00e1vel)</li> <li><code>other</code>: Outros tipos de observ\u00e1veis</li> </ul>"},{"location":"modulos/analyzers/cluster25/#tratamento-de-erros","title":"Tratamento de Erros","text":"<p>O analyzer trata erros de forma robusta:</p> <ul> <li>Erro de Autentica\u00e7\u00e3o: Falha ao obter token de acesso</li> <li>Erro de API: Falha na consulta \u00e0 API de investiga\u00e7\u00e3o</li> <li>Erro de Rede: Problemas de conectividade</li> <li>Erro de Configura\u00e7\u00e3o: Credenciais ou configura\u00e7\u00f5es ausentes</li> </ul> <p>Em todos os casos, o analyzer retorna um relat\u00f3rio v\u00e1lido com informa\u00e7\u00f5es de erro na taxonomia.</p>"},{"location":"modulos/analyzers/cluster25/#exemplo-de-uso-com-cli","title":"Exemplo de Uso com CLI","text":"<pre><code># Executar exemplo b\u00e1sico\npython examples/analyzers/cluster25_example.py\n\n# Executar com chamadas reais da API\npython examples/analyzers/cluster25_example.py --execute\n\n# Analisar indicador espec\u00edfico\npython examples/analyzers/cluster25_example.py --data-type ip --data 1.2.3.4 --execute\n\n# Sa\u00edda em formato JSON\npython examples/analyzers/cluster25_example.py --execute --json\n</code></pre>"},{"location":"modulos/analyzers/cluster25/#dependencias","title":"Depend\u00eancias","text":"<ul> <li><code>requests</code>: Para comunica\u00e7\u00e3o HTTP com a API</li> <li><code>sentineliqsdk</code>: SDK base do SentinelIQ</li> </ul>"},{"location":"modulos/analyzers/cluster25/#limitacoes","title":"Limita\u00e7\u00f5es","text":"<ul> <li>Requer credenciais v\u00e1lidas do Cluster25</li> <li>Dependente da disponibilidade da API do Cluster25</li> <li>Rate limiting pode se aplicar dependendo do plano da API</li> <li>Timeout configur\u00e1vel para evitar travamentos</li> </ul>"},{"location":"modulos/analyzers/cluster25/#suporte","title":"Suporte","text":"<p>Para suporte e d\u00favidas sobre o Cluster25 Analyzer:</p> <ul> <li>Documenta\u00e7\u00e3o: Agent Guide</li> <li>Exemplos: Threat Intelligence</li> <li>Issues: GitHub Issues</li> </ul>"},{"location":"modulos/analyzers/cluster25/#changelog","title":"Changelog","text":""},{"location":"modulos/analyzers/cluster25/#v100","title":"v1.0.0","text":"<ul> <li>Implementa\u00e7\u00e3o inicial do Cluster25 Analyzer</li> <li>Suporte a an\u00e1lise de m\u00faltiplos tipos de indicadores</li> <li>Sistema de taxonomia baseado em pontua\u00e7\u00e3o</li> <li>Configura\u00e7\u00e3o flex\u00edvel via WorkerConfig</li> <li>Tratamento robusto de erros</li> </ul>"},{"location":"modulos/analyzers/crowdsec/","title":"CrowdSec Analyzer","text":"<p>O CrowdSec Analyzer \u00e9 um m\u00f3dulo de an\u00e1lise de intelig\u00eancia de amea\u00e7as que utiliza a API do CrowdSec para obter informa\u00e7\u00f5es sobre endere\u00e7os IP. O analyzer fornece dados de reputa\u00e7\u00e3o, detalhes de ataques, comportamentos suspeitos e informa\u00e7\u00f5es de CVE.</p>"},{"location":"modulos/analyzers/crowdsec/#caracteristicas","title":"Caracter\u00edsticas","text":"<ul> <li>Reputa\u00e7\u00e3o de IP: Classifica endere\u00e7os IP como maliciosos, suspeitos, seguros ou informativos</li> <li>Detalhes de Ataque: Identifica tipos espec\u00edficos de ataques associados ao IP</li> <li>Comportamentos: Detecta padr\u00f5es de comportamento suspeitos</li> <li>T\u00e9cnicas MITRE: Mapeia para t\u00e9cnicas da matriz MITRE ATT&amp;CK</li> <li>CVEs: Lista vulnerabilidades conhecidas associadas ao IP</li> <li>Informa\u00e7\u00f5es de ASN: Fornece dados sobre o sistema aut\u00f4nomo</li> <li>Hist\u00f3rico: Mostra quando o IP foi visto pela \u00faltima vez</li> </ul>"},{"location":"modulos/analyzers/crowdsec/#configuracao","title":"Configura\u00e7\u00e3o","text":""},{"location":"modulos/analyzers/crowdsec/#credenciais","title":"Credenciais","text":"<p>O analyzer requer uma chave de API do CrowdSec. Configure as credenciais usando <code>WorkerConfig.secrets</code>:</p> <pre><code>from sentineliqsdk import WorkerInput, WorkerConfig\n\nsecrets = {\n    \"crowdsec\": {\n        \"api_key\": \"sua-chave-api-crowdsec\"\n    }\n}\n\nconfig = WorkerConfig(secrets=secrets)\ninput_data = WorkerInput(\n    data_type=\"ip\",\n    data=\"1.2.3.4\",\n    config=config\n)\n</code></pre>"},{"location":"modulos/analyzers/crowdsec/#parametros-de-configuracao","title":"Par\u00e2metros de Configura\u00e7\u00e3o","text":"Par\u00e2metro Tipo Obrigat\u00f3rio Descri\u00e7\u00e3o <code>api_key</code> string Sim Chave de API do CrowdSec"},{"location":"modulos/analyzers/crowdsec/#uso-programatico","title":"Uso Program\u00e1tico","text":""},{"location":"modulos/analyzers/crowdsec/#exemplo-basico","title":"Exemplo B\u00e1sico","text":"<pre><code>from __future__ import annotations\n\nimport json\nfrom sentineliqsdk import WorkerInput, WorkerConfig\nfrom sentineliqsdk.analyzers.crowdsec import CrowdSecAnalyzer\n\n# Configurar credenciais\nsecrets = {\n    \"crowdsec\": {\n        \"api_key\": \"sua-chave-api-crowdsec\"\n    }\n}\n\n# Criar entrada de dados\ninput_data = WorkerInput(\n    data_type=\"ip\",\n    data=\"1.2.3.4\",\n    tlp=2,\n    pap=2,\n    config=WorkerConfig(secrets=secrets)\n)\n\n# Executar an\u00e1lise\nanalyzer = CrowdSecAnalyzer(input_data=input_data)\nreport = analyzer.execute()\n\n# Exibir resultados\nprint(json.dumps(report.full_report, indent=2, ensure_ascii=False))\n</code></pre>"},{"location":"modulos/analyzers/crowdsec/#exemplo-com-tratamento-de-erros","title":"Exemplo com Tratamento de Erros","text":"<pre><code>from __future__ import annotations\n\nimport json\nfrom sentineliqsdk import WorkerInput, WorkerConfig\nfrom sentineliqsdk.analyzers.crowdsec import CrowdSecAnalyzer\nfrom sentineliqsdk.clients.crowdsec import CrowdSecAPIError, CrowdSecRateLimitError\n\ndef analyze_ip(ip_address: str, api_key: str) -&gt; dict:\n    \"\"\"Analisa um endere\u00e7o IP usando CrowdSec.\"\"\"\n    try:\n        # Configurar entrada\n        secrets = {\"crowdsec\": {\"api_key\": api_key}}\n        input_data = WorkerInput(\n            data_type=\"ip\",\n            data=ip_address,\n            config=WorkerConfig(secrets=secrets)\n        )\n\n        # Executar an\u00e1lise\n        analyzer = CrowdSecAnalyzer(input_data=input_data)\n        report = analyzer.execute()\n\n        return report.full_report\n\n    except CrowdSecRateLimitError as e:\n        print(f\"\u274c Rate limit excedido: {e}\")\n        return {\"error\": \"rate_limit_exceeded\"}\n\n    except CrowdSecAPIError as e:\n        print(f\"\u274c Erro da API: {e}\")\n        return {\"error\": \"api_error\"}\n\n    except Exception as e:\n        print(f\"\u274c Erro inesperado: {e}\")\n        return {\"error\": \"unexpected_error\"}\n\n# Uso\nresult = analyze_ip(\"1.2.3.4\", \"sua-chave-api\")\nprint(json.dumps(result, indent=2, ensure_ascii=False))\n</code></pre>"},{"location":"modulos/analyzers/crowdsec/#estrutura-de-resposta","title":"Estrutura de Resposta","text":""},{"location":"modulos/analyzers/crowdsec/#relatorio-completo","title":"Relat\u00f3rio Completo","text":"<pre><code>{\n  \"success\": true,\n  \"summary\": {},\n  \"artifacts\": [],\n  \"operations\": [],\n  \"full_report\": {\n    \"observable\": \"1.2.3.4\",\n    \"raw_data\": {\n      \"reputation\": \"malicious\",\n      \"as_name\": \"Evil Corp\",\n      \"ip_range_score\": 0.95,\n      \"history\": {\n        \"last_seen\": \"2024-01-01T12:00:00Z\"\n      },\n      \"attack_details\": [\n        {\n          \"name\": \"SSH Brute Force\"\n        },\n        {\n          \"name\": \"Port Scan\"\n        }\n      ],\n      \"behaviors\": [\n        {\n          \"name\": \"Suspicious Traffic\"\n        }\n      ],\n      \"mitre_techniques\": [\n        {\n          \"name\": \"T1021.001\"\n        }\n      ],\n      \"cves\": [\n        \"CVE-2023-1234\",\n        \"CVE-2023-5678\"\n      ]\n    },\n    \"taxonomy\": [\n      {\n        \"level\": \"malicious\",\n        \"namespace\": \"CrowdSec\",\n        \"predicate\": \"Reputation\",\n        \"value\": \"malicious\"\n      },\n      {\n        \"level\": \"info\",\n        \"namespace\": \"CrowdSec\",\n        \"predicate\": \"ASN\",\n        \"value\": \"Evil Corp\"\n      },\n      {\n        \"level\": \"suspicious\",\n        \"namespace\": \"CrowdSec\",\n        \"predicate\": \"Attack\",\n        \"value\": \"SSH Brute Force\"\n      }\n    ],\n    \"metadata\": {\n      \"name\": \"CrowdSec CTI Analyzer\",\n      \"description\": \"Analyzes IP addresses using CrowdSec's threat intelligence API\",\n      \"version_stage\": \"TESTING\"\n    }\n  }\n}\n</code></pre>"},{"location":"modulos/analyzers/crowdsec/#campos-de-taxonomia","title":"Campos de Taxonomia","text":"Campo Descri\u00e7\u00e3o Valores Poss\u00edveis <code>Reputation</code> Reputa\u00e7\u00e3o do IP <code>malicious</code>, <code>suspicious</code>, <code>safe</code>, <code>info</code> <code>ASN</code> Nome do Sistema Aut\u00f4nomo Nome da organiza\u00e7\u00e3o <code>Score</code> Pontua\u00e7\u00e3o do range de IP 0.0 - 1.0 <code>LastSeen</code> \u00daltima vez visto Timestamp ISO 8601 <code>Attack</code> Tipo de ataque detectado Nome do ataque <code>Behavior</code> Comportamento suspeito Nome do comportamento <code>Mitre</code> T\u00e9cnica MITRE ATT&amp;CK ID da t\u00e9cnica <code>CVE</code> Vulnerabilidade conhecida ID do CVE <code>Threat</code> Status de amea\u00e7a <code>Not found</code> (quando n\u00e3o h\u00e1 dados)"},{"location":"modulos/analyzers/crowdsec/#niveis-de-taxonomia","title":"N\u00edveis de Taxonomia","text":"<ul> <li><code>malicious</code>: IP confirmadamente malicioso</li> <li><code>suspicious</code>: IP com comportamento suspeito</li> <li><code>safe</code>: IP considerado seguro</li> <li><code>info</code>: Informa\u00e7\u00f5es adicionais (ASN, score, etc.)</li> </ul>"},{"location":"modulos/analyzers/crowdsec/#tratamento-de-erros","title":"Tratamento de Erros","text":""},{"location":"modulos/analyzers/crowdsec/#rate-limiting","title":"Rate Limiting","text":"<p>Quando a API retorna erro 429 (rate limit):</p> <pre><code>try:\n    report = analyzer.execute()\nexcept CrowdSecRateLimitError as e:\n    print(f\"Rate limit excedido: {e}\")\n    # Aguardar e tentar novamente\n</code></pre>"},{"location":"modulos/analyzers/crowdsec/#erros-de-api","title":"Erros de API","text":"<p>Para outros erros da API:</p> <pre><code>try:\n    report = analyzer.execute()\nexcept CrowdSecAPIError as e:\n    print(f\"Erro da API: {e}\")\n    print(f\"Status code: {e.status_code}\")\n</code></pre>"},{"location":"modulos/analyzers/crowdsec/#exemplo-de-uso-com-multiplos-ips","title":"Exemplo de Uso com M\u00faltiplos IPs","text":"<pre><code>from __future__ import annotations\n\nimport json\nfrom sentineliqsdk import WorkerInput, WorkerConfig\nfrom sentineliqsdk.analyzers.crowdsec import CrowdSecAnalyzer\n\ndef analyze_multiple_ips(ip_addresses: list[str], api_key: str) -&gt; list[dict]:\n    \"\"\"Analisa m\u00faltiplos endere\u00e7os IP.\"\"\"\n    results = []\n\n    for ip in ip_addresses:\n        try:\n            secrets = {\"crowdsec\": {\"api_key\": api_key}}\n            input_data = WorkerInput(\n                data_type=\"ip\",\n                data=ip,\n                config=WorkerConfig(secrets=secrets)\n            )\n\n            analyzer = CrowdSecAnalyzer(input_data=input_data)\n            report = analyzer.execute()\n\n            results.append({\n                \"ip\": ip,\n                \"success\": True,\n                \"data\": report.full_report\n            })\n\n        except Exception as e:\n            results.append({\n                \"ip\": ip,\n                \"success\": False,\n                \"error\": str(e)\n            })\n\n    return results\n\n# Uso\nips = [\"1.2.3.4\", \"8.8.8.8\", \"5.6.7.8\"]\nresults = analyze_multiple_ips(ips, \"sua-chave-api\")\n\nfor result in results:\n    if result[\"success\"]:\n        taxonomy = result[\"data\"][\"taxonomy\"]\n        reputation = next((t for t in taxonomy if t[\"predicate\"] == \"Reputation\"), None)\n        print(f\"{result['ip']}: {reputation['value'] if reputation else 'unknown'}\")\n    else:\n        print(f\"{result['ip']}: erro - {result['error']}\")\n</code></pre>"},{"location":"modulos/analyzers/crowdsec/#integracao-com-outros-modulos","title":"Integra\u00e7\u00e3o com Outros M\u00f3dulos","text":""},{"location":"modulos/analyzers/crowdsec/#usando-com-auto-extracao","title":"Usando com Auto-Extra\u00e7\u00e3o","text":"<pre><code>from sentineliqsdk import WorkerInput, WorkerConfig\nfrom sentineliqsdk.analyzers.crowdsec import CrowdSecAnalyzer\n\n# Habilitar auto-extra\u00e7\u00e3o para detectar IOCs automaticamente\nconfig = WorkerConfig(\n    secrets={\"crowdsec\": {\"api_key\": \"sua-chave\"}},\n    auto_extract=True  # Padr\u00e3o: True\n)\n\ninput_data = WorkerInput(\n    data_type=\"ip\",\n    data=\"1.2.3.4\",\n    config=config\n)\n\nanalyzer = CrowdSecAnalyzer(input_data=input_data)\nreport = analyzer.execute()\n\n# Os artifacts ser\u00e3o automaticamente extra\u00eddos do relat\u00f3rio\nprint(f\"Artifacts encontrados: {len(report.artifacts)}\")\n</code></pre>"},{"location":"modulos/analyzers/crowdsec/#limitacoes-e-consideracoes","title":"Limita\u00e7\u00f5es e Considera\u00e7\u00f5es","text":"<ol> <li> <p>Rate Limiting: A API do CrowdSec tem limites de taxa. Use com modera\u00e7\u00e3o em an\u00e1lises em lote.</p> </li> <li> <p>Chave de API: Mantenha sua chave de API segura e n\u00e3o a exponha em c\u00f3digo ou logs.</p> </li> <li> <p>Dados Sens\u00edveis: O analyzer pode retornar informa\u00e7\u00f5es sens\u00edveis sobre IPs. Configure TLP/PAP adequadamente.</p> </li> <li> <p>Conectividade: Requer conex\u00e3o com a internet para acessar a API do CrowdSec.</p> </li> </ol>"},{"location":"modulos/analyzers/crowdsec/#exemplo-de-execucao","title":"Exemplo de Execu\u00e7\u00e3o","text":"<pre><code># Executar exemplo\npython examples/analyzers/crowdsec_example.py --ip 1.2.3.4 --execute\n\n# Modo dry-run (sem chamadas reais)\npython examples/analyzers/crowdsec_example.py --ip 1.2.3.4\n\n# Sa\u00edda completa em JSON\npython examples/analyzers/crowdsec_example.py --ip 1.2.3.4 --execute --full\n</code></pre>"},{"location":"modulos/analyzers/crowdsec/#referencias","title":"Refer\u00eancias","text":"<ul> <li>CrowdSec CTI API Documentation</li> <li>CrowdSec Website</li> <li>MITRE ATT&amp;CK Framework</li> </ul>"},{"location":"modulos/analyzers/crowdstrike_falcon/","title":"CrowdStrike Falcon Analyzer","text":"<p>O analisador CrowdStrike Falcon fornece an\u00e1lise abrangente de dispositivos, alertas, vulnerabilidades e arquivos usando a API do CrowdStrike Falcon.</p>"},{"location":"modulos/analyzers/crowdstrike_falcon/#funcionalidades","title":"Funcionalidades","text":"<ul> <li>An\u00e1lise de Hostname: Obt\u00e9m detalhes do dispositivo, alertas e vulnerabilidades</li> <li>An\u00e1lise de Arquivo: Upload e an\u00e1lise de arquivos no sandbox FalconX</li> <li>Detec\u00e7\u00e3o de Amea\u00e7as: Identifica dispositivos comprometidos e arquivos maliciosos</li> <li>An\u00e1lise de Vulnerabilidades: Lista vulnerabilidades conhecidas em dispositivos</li> </ul>"},{"location":"modulos/analyzers/crowdstrike_falcon/#configuracao","title":"Configura\u00e7\u00e3o","text":""},{"location":"modulos/analyzers/crowdstrike_falcon/#credenciais-obrigatorias","title":"Credenciais (Obrigat\u00f3rias)","text":"<p>Configure as credenciais do CrowdStrike Falcon em <code>WorkerConfig.secrets</code>:</p> <pre><code>secrets = {\n    \"crowdstrike_falcon\": {\n        \"client_id\": \"sua_client_id_aqui\",\n        \"client_secret\": \"seu_client_secret_aqui\"\n    }\n}\n</code></pre>"},{"location":"modulos/analyzers/crowdstrike_falcon/#configuracoes-opcionais","title":"Configura\u00e7\u00f5es Opcionais","text":"<p>As configura\u00e7\u00f5es espec\u00edficas do CrowdStrike Falcon s\u00e3o definidas diretamente no analisador e podem ser personalizadas:</p> <pre><code>config = WorkerConfig(\n    # Configura\u00e7\u00f5es b\u00e1sicas\n    check_tlp=True,\n    max_tlp=2,\n    check_pap=True,\n    max_pap=2,\n    auto_extract=True,\n    secrets=secrets\n)\n\n# Configura\u00e7\u00f5es espec\u00edficas do CrowdStrike (valores padr\u00e3o):\n# - base_url: \"https://api.crowdstrike.com\"\n# - environment: 160 (sandbox environment)\n# - days_before: 7 (dias para buscar alertas)\n# - network_settings: \"default\"\n# - action_script: \"default\"\n# - alert_fields: campos espec\u00edficos para alertas\n# - vuln_fields: campos espec\u00edficos para vulnerabilidades\n</code></pre>"},{"location":"modulos/analyzers/crowdstrike_falcon/#uso-programatico","title":"Uso Program\u00e1tico","text":""},{"location":"modulos/analyzers/crowdstrike_falcon/#analise-de-hostname","title":"An\u00e1lise de Hostname","text":"<pre><code>from sentineliqsdk import WorkerInput, WorkerConfig\nfrom sentineliqsdk.analyzers.crowdstrike_falcon import CrowdStrikeFalconAnalyzer\n\n# Configurar credenciais\nsecrets = {\n    \"crowdstrike_falcon\": {\n        \"client_id\": \"sua_client_id_aqui\",\n        \"client_secret\": \"seu_client_secret_aqui\"\n    }\n}\n\nconfig = WorkerConfig(\n    check_tlp=True,\n    max_tlp=2,\n    check_pap=True,\n    max_pap=2,\n    auto_extract=True,\n    crowdstrike_falcon_days_before=7,\n    secrets=secrets\n)\n\n# Criar entrada para hostname\ninput_data = WorkerInput(\n    data_type=\"hostname\",\n    data=\"example.com\",\n    tlp=2,\n    pap=2,\n    config=config\n)\n\n# Executar an\u00e1lise\nanalyzer = CrowdStrikeFalconAnalyzer(input_data)\nreport = analyzer.execute()\n\n# Acessar resultados\nprint(f\"Dispositivo encontrado: {report.full_report.get('device_details', {}).get('hostname')}\")\nprint(f\"Alertas encontrados: {len(report.full_report.get('alerts', []))}\")\nprint(f\"Vulnerabilidades encontradas: {len(report.full_report.get('vulnerabilities', []))}\")\n</code></pre>"},{"location":"modulos/analyzers/crowdstrike_falcon/#analise-de-arquivo","title":"An\u00e1lise de Arquivo","text":"<pre><code>from sentineliqsdk import WorkerInput, WorkerConfig\nfrom sentineliqsdk.analyzers.crowdstrike_falcon import CrowdStrikeFalconAnalyzer\n\n# Configurar credenciais\nsecrets = {\n    \"crowdstrike_falcon\": {\n        \"client_id\": \"sua_client_id_aqui\",\n        \"client_secret\": \"seu_client_secret_aqui\"\n    }\n}\n\nconfig = WorkerConfig(\n    check_tlp=True,\n    max_tlp=2,\n    check_pap=True,\n    max_pap=2,\n    auto_extract=True,\n    crowdstrike_falcon_environment=160,\n    crowdstrike_falcon_network_settings=\"default\",\n    crowdstrike_falcon_action_script=\"default\",\n    secrets=secrets\n)\n\n# Criar entrada para arquivo\ninput_data = WorkerInput(\n    data_type=\"file\",\n    data=\"/caminho/para/arquivo.exe\",\n    filename=\"arquivo.exe\",\n    tlp=2,\n    pap=2,\n    config=config\n)\n\n# Executar an\u00e1lise\nanalyzer = CrowdStrikeFalconAnalyzer(input_data)\nreport = analyzer.execute()\n\n# Acessar resultados\nprint(f\"Tipo de an\u00e1lise: {report.full_report.get('analysis_type')}\")\nprint(f\"Status: {report.full_report.get('status')}\")\nprint(f\"Veredicto: {report.full_report.get('verdict')}\")\n</code></pre>"},{"location":"modulos/analyzers/crowdstrike_falcon/#tipos-de-dados-suportados","title":"Tipos de Dados Suportados","text":"<ul> <li>hostname: An\u00e1lise de dispositivos, alertas e vulnerabilidades</li> <li>file: An\u00e1lise de arquivos no sandbox FalconX</li> </ul>"},{"location":"modulos/analyzers/crowdstrike_falcon/#estrutura-da-resposta","title":"Estrutura da Resposta","text":""},{"location":"modulos/analyzers/crowdstrike_falcon/#analise-de-hostname_1","title":"An\u00e1lise de Hostname","text":"<pre><code>{\n  \"success\": true,\n  \"summary\": {},\n  \"artifacts\": [],\n  \"operations\": [],\n  \"full_report\": {\n    \"observable\": \"example.com\",\n    \"data_type\": \"hostname\",\n    \"analysis_type\": \"hostname\",\n    \"device_id\": \"device123\",\n    \"device_details\": {\n      \"device_id\": \"device123\",\n      \"hostname\": \"example.com\",\n      \"external_ip\": \"1.2.3.4\",\n      \"os_version\": \"Windows 10\",\n      \"last_login_user\": \"admin\"\n    },\n    \"alerts\": [\n      {\n        \"device_id\": \"device123\",\n        \"severity\": 50,\n        \"detection_id\": \"det123\",\n        \"created_timestamp\": \"2024-01-01T00:00:00Z\"\n      }\n    ],\n    \"vulnerabilities\": [\n      {\n        \"id\": \"vuln123\",\n        \"cve\": {\n          \"base_score\": 7.5\n        },\n        \"apps\": [\n          {\n            \"product_name_normalized\": \"test_app\"\n          }\n        ]\n      }\n    ],\n    \"metadata\": {\n      \"name\": \"CrowdStrike Falcon Analyzer\",\n      \"description\": \"Analyzes devices, alerts, vulnerabilities, and files using CrowdStrike Falcon API\",\n      \"version_stage\": \"TESTING\"\n    }\n  }\n}\n</code></pre>"},{"location":"modulos/analyzers/crowdstrike_falcon/#analise-de-arquivo_1","title":"An\u00e1lise de Arquivo","text":"<pre><code>{\n  \"success\": true,\n  \"summary\": {},\n  \"artifacts\": [],\n  \"operations\": [],\n  \"full_report\": {\n    \"observable\": \"/caminho/para/arquivo.exe\",\n    \"data_type\": \"file\",\n    \"analysis_type\": \"sandbox\",\n    \"submit_id\": \"submit123\",\n    \"status\": \"completed\",\n    \"verdict\": \"malicious\",\n    \"results\": {\n      \"resources\": [\n        {\n          \"verdict\": \"malicious\",\n          \"threat_score\": 95,\n          \"threat_indicators\": [\"trojan\", \"backdoor\"]\n        }\n      ]\n    },\n    \"metadata\": {\n      \"name\": \"CrowdStrike Falcon Analyzer\",\n      \"description\": \"Analyzes devices, alerts, vulnerabilities, and files using CrowdStrike Falcon API\",\n      \"version_stage\": \"TESTING\"\n    }\n  }\n}\n</code></pre>"},{"location":"modulos/analyzers/crowdstrike_falcon/#niveis-de-taxonomia","title":"N\u00edveis de Taxonomia","text":"<p>O analisador gera entradas de taxonomia baseadas nos resultados:</p> <ul> <li>safe: Arquivo/dispositivo seguro</li> <li>suspicious: Arquivo/dispositivo suspeito</li> <li>malicious: Arquivo/dispositivo malicioso</li> <li>info: Informa\u00e7\u00f5es gerais</li> </ul>"},{"location":"modulos/analyzers/crowdstrike_falcon/#tratamento-de-erros","title":"Tratamento de Erros","text":"<p>O analisador trata os seguintes erros:</p> <ul> <li>Credenciais ausentes: Erro se <code>client_id</code> ou <code>client_secret</code> n\u00e3o estiverem configurados</li> <li>Tipo de dados n\u00e3o suportado: Erro para tipos diferentes de <code>hostname</code> e <code>file</code></li> <li>Arquivo n\u00e3o encontrado: Erro se o arquivo especificado n\u00e3o existir</li> <li>Falha na API: Erro se a API do CrowdStrike retornar erro</li> <li>Dispositivo n\u00e3o encontrado: Erro se nenhum dispositivo for encontrado para o hostname</li> </ul>"},{"location":"modulos/analyzers/crowdstrike_falcon/#dependencias","title":"Depend\u00eancias","text":"<ul> <li>falconpy: Biblioteca oficial do CrowdStrike Falcon</li> <li>Instala\u00e7\u00e3o: <code>pip install falconpy</code></li> </ul>"},{"location":"modulos/analyzers/crowdstrike_falcon/#exemplo-de-uso-completo","title":"Exemplo de Uso Completo","text":"<pre><code>#!/usr/bin/env python3\nimport json\nfrom sentineliqsdk import WorkerInput, WorkerConfig\nfrom sentineliqsdk.analyzers.crowdstrike_falcon import CrowdStrikeFalconAnalyzer\n\ndef main():\n    # Configurar credenciais e configura\u00e7\u00f5es\n    secrets = {\n        \"crowdstrike_falcon\": {\n            \"client_id\": \"sua_client_id_aqui\",\n            \"client_secret\": \"seu_client_secret_aqui\"\n        }\n    }\n\n    config = WorkerConfig(\n        check_tlp=True,\n        max_tlp=2,\n        check_pap=True,\n        max_pap=2,\n        auto_extract=True,\n        crowdstrike_falcon_days_before=7,\n        secrets=secrets\n    )\n\n    # An\u00e1lise de hostname\n    hostname_input = WorkerInput(\n        data_type=\"hostname\",\n        data=\"example.com\",\n        tlp=2,\n        pap=2,\n        config=config\n    )\n\n    analyzer = CrowdStrikeFalconAnalyzer(hostname_input)\n    report = analyzer.execute()\n\n    # Imprimir resultado\n    print(json.dumps(report.full_report, ensure_ascii=False, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"modulos/analyzers/crowdstrike_falcon/#notas-de-seguranca","title":"Notas de Seguran\u00e7a","text":"<ul> <li>Credenciais: Sempre use <code>WorkerConfig.secrets</code> para credenciais</li> <li>TLP/PAP: Configure adequadamente os n\u00edveis de TLP e PAP</li> <li>Arquivos: A an\u00e1lise de arquivos requer permiss\u00f5es adequadas</li> <li>Rede: Configure proxies se necess\u00e1rio via <code>WorkerConfig.proxy</code></li> </ul>"},{"location":"modulos/analyzers/crowdstrike_falcon/#limitacoes","title":"Limita\u00e7\u00f5es","text":"<ul> <li>Requer credenciais v\u00e1lidas do CrowdStrike Falcon</li> <li>An\u00e1lise de arquivos pode demorar v\u00e1rios minutos</li> <li>Algumas funcionalidades podem requerer licen\u00e7as espec\u00edficas do CrowdStrike</li> <li>Rate limiting da API pode afetar an\u00e1lises em lote</li> </ul>"},{"location":"modulos/analyzers/crtsh/","title":"Crt.sh","text":""},{"location":"modulos/analyzers/crtsh/#crtsh-analyzer","title":"crt.sh Analyzer","text":"<p>The <code>CrtshAnalyzer</code> queries <code>crt.sh</code> for Certificate Transparency entries related to a domain. It returns a list of certificate rows and enriches each with the SHA-1 certificate hash when available.</p>"},{"location":"modulos/analyzers/crtsh/#features","title":"Features","text":"<ul> <li>No API key required</li> <li>Supports <code>domain</code> and <code>fqdn</code> data types</li> <li>Auto-extraction compatible: artifacts are derived from full report when enabled</li> </ul>"},{"location":"modulos/analyzers/crtsh/#programmatic-usage","title":"Programmatic Usage","text":"<pre><code>from sentineliqsdk import WorkerInput\nfrom sentineliqsdk.analyzers.crtsh import CrtshAnalyzer\n\ninput_data = WorkerInput(data_type=\"domain\", data=\"example.com\")\nreport = CrtshAnalyzer(input_data).execute()\nprint(report.full_report)\n</code></pre>"},{"location":"modulos/analyzers/crtsh/#example-script","title":"Example Script","text":"<p>Run the example:</p> <pre><code>python examples/analyzers/crtsh_example.py example.com --execute\n</code></pre>"},{"location":"modulos/analyzers/crtsh/#output-structure-excerpt","title":"Output Structure (excerpt)","text":"<pre><code>{\n  \"observable\": \"example.com\",\n  \"verdict\": \"info\",\n  \"taxonomy\": [{\"level\": \"info\", \"namespace\": \"crt.sh\", \"predicate\": \"certificates\", \"value\": \"example.com\"}],\n  \"source\": \"crt.sh\",\n  \"data_type\": \"domain\",\n  \"certificates\": [\n    {\n      \"issuer_name\": \"...\",\n      \"name_value\": \"a.example.com\",\n      \"min_cert_id\": 123,\n      \"sha1\": \"ABCDEF0123456789\"\n    }\n  ],\n  \"metadata\": {\"Name\": \"crt.sh Analyzer\", \"pattern\": \"threat-intel\", \"VERSION\": \"TESTING\"}\n}\n</code></pre>"},{"location":"modulos/analyzers/crtsh/#configuration","title":"Configuration","text":"<ul> <li><code>crtsh.timeout</code> (float, optional): HTTP timeout in seconds (default: 30.0)</li> </ul>"},{"location":"modulos/analyzers/cuckoo/","title":"Cuckoo Sandbox","text":""},{"location":"modulos/analyzers/cuckoo/#cuckoo-sandbox-analyzer","title":"Cuckoo Sandbox Analyzer","text":"<p>Submits files or URLs to a Cuckoo Sandbox instance and retrieves the analysis report.</p>"},{"location":"modulos/analyzers/cuckoo/#configuration","title":"Configuration","text":"<ul> <li>cuckoo.url: Base API URL (required), e.g. <code>https://cuckoo.local/api/</code></li> <li>cuckoo.verify_ssl: Verify TLS certificates (default: true)</li> <li>cuckoo.timeout_minutes: Max minutes to wait (default: 15)</li> <li>cuckoo.poll_interval_seconds: Poll interval in seconds (default: 60)</li> <li>secrets.cuckoo.token: Optional API token</li> </ul>"},{"location":"modulos/analyzers/cuckoo/#programmatic-usage","title":"Programmatic Usage","text":"<pre><code>from sentineliqsdk import WorkerInput, WorkerConfig\nfrom sentineliqsdk.analyzers.cuckoo import CuckooSandboxAnalyzer\n\ninput_data = WorkerInput(\n    data_type=\"url\",\n    data=\"http://example.com\",\n    config=WorkerConfig(\n        **{\n            \"cuckoo.url\": \"https://cuckoo.local/api/\",\n            \"cuckoo.verify_ssl\": True,\n            \"secrets\": {\"cuckoo\": {\"token\": \"YOUR_TOKEN\"}},\n        }\n    ),\n)\n\nreport = CuckooSandboxAnalyzer(input_data).execute()\nprint(report.full_report)\n</code></pre>"},{"location":"modulos/analyzers/cuckoo/#example-script","title":"Example Script","text":"<p>Run the provided example:</p> <pre><code>python examples/analyzers/cuckoo_example.py url http://example.com --execute --url https://cuckoo.local/api/ --token YOUR_TOKEN\n</code></pre> <p>For file samples:</p> <pre><code>python examples/analyzers/cuckoo_example.py file /path/to/sample.exe --execute --url https://cuckoo.local/api/ --token YOUR_TOKEN\n</code></pre>"},{"location":"modulos/analyzers/cuckoo/#output","title":"Output","text":"<p>The analyzer returns an <code>AnalyzerReport</code> with keys including <code>taxonomy</code>, <code>signatures</code>, <code>suricata_alerts</code>, <code>snort_alerts</code>, <code>domains</code>, <code>uri</code>, <code>malscore</code>, <code>malfamily</code>, and <code>metadata</code>.</p>"},{"location":"modulos/analyzers/cyberchef/","title":"CyberChef Analyzer","text":"<p>Processa dados usando um servidor CyberChef (endpoint <code>/bake</code>). Suporta receitas b\u00e1sicas: <code>FromHex</code>, <code>FromBase64</code>, <code>FromCharCode</code>.</p>"},{"location":"modulos/analyzers/cyberchef/#uso-programatico","title":"Uso Program\u00e1tico","text":"<pre><code>from __future__ import annotations\nimport json\nfrom sentineliqsdk import WorkerInput, WorkerConfig\nfrom sentineliqsdk.analyzers.cyberchef import CyberchefAnalyzer\n\ninput_data = WorkerInput(\n    data_type=\"other\",\n    data=\"666f6f\",  # \"foo\" em hex\n    config=WorkerConfig(params={\n        \"cyberchef.url\": \"http://localhost:8000\",\n        \"cyberchef.service\": \"FromHex\",\n    })\n)\n\nreport = CyberchefAnalyzer(input_data).execute()\nprint(json.dumps(report.full_report, ensure_ascii=False))\n</code></pre>"},{"location":"modulos/analyzers/cyberchef/#parametros-workerconfig","title":"Par\u00e2metros (WorkerConfig)","text":"<ul> <li><code>cyberchef.url</code> (obrigat\u00f3rio): Base URL do servidor CyberChef.</li> <li><code>cyberchef.service</code> (obrigat\u00f3rio): <code>FromHex</code> | <code>FromBase64</code> | <code>FromCharCode</code>.</li> <li><code>cyberchef.timeout</code> (opcional): Timeout HTTP em segundos (padr\u00e3o: 30.0).</li> </ul>"},{"location":"modulos/analyzers/cyberchef/#exemplo-cli","title":"Exemplo CLI","text":"<pre><code>python examples/analyzers/cyberchef_example.py \\\n  --url http://localhost:8000 \\\n  --service FromHex \\\n  666f6f \\\n  --execute\n</code></pre> <p>Sa\u00edda compacta JSON \u00e9 impressa no STDOUT. Sem <code>--execute</code>, o exemplo permanece em modo seguro (dry\u2011run).</p>"},{"location":"modulos/analyzers/cybercrime_tracker/","title":"CyberCrime Tracker Analyzer","text":"<p>Busca poss\u00edveis C2 servers no site <code>cybercrime-tracker.net</code> relacionados ao observ\u00e1vel informado.</p>"},{"location":"modulos/analyzers/cybercrime_tracker/#uso-programatico","title":"Uso Program\u00e1tico","text":"<pre><code>from __future__ import annotations\nimport json\nfrom sentineliqsdk import WorkerInput, WorkerConfig\nfrom sentineliqsdk.analyzers.cybercrime_tracker import CyberCrimeTrackerAnalyzer\n\ninput_data = WorkerInput(\n    data_type=\"other\",\n    data=\"example.com\",\n    config=WorkerConfig(params={\n        \"cct.limit\": 40,\n        \"cct.timeout\": 30.0,\n    })\n)\n\nreport = CyberCrimeTrackerAnalyzer(input_data).execute()\nprint(json.dumps(report.full_report, ensure_ascii=False))\n</code></pre>"},{"location":"modulos/analyzers/cybercrime_tracker/#parametros-workerconfig","title":"Par\u00e2metros (WorkerConfig)","text":"<ul> <li><code>cct.limit</code> (opcional): Tamanho da p\u00e1gina por requisi\u00e7\u00e3o (padr\u00e3o: 40)</li> <li><code>cct.offset</code> (opcional): Offset inicial (padr\u00e3o: 0)</li> <li><code>cct.max_pages</code> (opcional): Guard rail para n\u00famero m\u00e1ximo de p\u00e1ginas (padr\u00e3o: 50)</li> <li><code>cct.timeout</code> (opcional): Timeout HTTP em segundos (padr\u00e3o: 30.0)</li> </ul>"},{"location":"modulos/analyzers/cybercrime_tracker/#exemplo-cli","title":"Exemplo CLI","text":"<pre><code>python examples/analyzers/cybercrime_tracker_example.py \\\n  example.com \\\n  --limit 40 \\\n  --timeout 30 \\\n  --execute\n</code></pre> <p>A sa\u00edda JSON compacta \u00e9 impressa no STDOUT. Sem <code>--execute</code>, o exemplo permanece em modo seguro (dry\u2011run).</p>"},{"location":"modulos/analyzers/cyberprotect/","title":"Cyberprotect ThreatScore Analyzer","text":"<p>Consulta a API ThreatScore da Cyberprotect para an\u00e1lise de amea\u00e7as e retorna um <code>AnalyzerReport</code> com <code>verdict</code>, <code>taxonomy</code> e dados enriquecidos sobre o threat score do observ\u00e1vel.</p>"},{"location":"modulos/analyzers/cyberprotect/#visao-geral","title":"Vis\u00e3o Geral","text":"<ul> <li>Aceita <code>data_type</code> em <code>[\"domain\", \"hash\", \"ip\", \"url\", \"user-agent\"]</code> e consulta o endpoint de busca.</li> <li>Taxonomia resume: threat score level e valor retornado pela API.</li> <li>N\u00e3o requer autentica\u00e7\u00e3o - API p\u00fablica da Cyberprotect.</li> <li>Mapeia levels da API para verdicts: malicious/high \u2192 malicious, suspicious/medium \u2192 suspicious, safe/low \u2192 safe.</li> </ul>"},{"location":"modulos/analyzers/cyberprotect/#instalacao-requisitos","title":"Instala\u00e7\u00e3o / Requisitos","text":"<ul> <li>SDK: utilize as dataclasses do pacote <code>sentineliqsdk</code>.</li> <li>Autentica\u00e7\u00e3o: n\u00e3o requerida (API p\u00fablica).</li> </ul>"},{"location":"modulos/analyzers/cyberprotect/#uso-programatico","title":"Uso Program\u00e1tico","text":"<pre><code>from __future__ import annotations\nfrom sentineliqsdk import WorkerInput, WorkerConfig\nfrom sentineliqsdk.analyzers.cyberprotect import CyberprotectAnalyzer\n\ninp = WorkerInput(\n    data_type=\"domain\",\n    data=\"example.com\",\n    config=WorkerConfig(\n        secrets={},  # N\u00e3o requer credenciais\n    ),\n)\nreport = CyberprotectAnalyzer(inp).execute()\nprint(report.full_report[\"verdict\"], report.full_report[\"taxonomy\"][0])\n</code></pre>"},{"location":"modulos/analyzers/cyberprotect/#exemplo-cli","title":"Exemplo (CLI)","text":"<p>Exemplo execut\u00e1vel na pasta <code>examples/</code> (dry\u2011run por padr\u00e3o; use <code>--execute</code> para chamar a API):</p> <pre><code>python examples/analyzers/cyberprotect_example.py --data \"example.com\" --data-type \"domain\"           # plano\npython examples/analyzers/cyberprotect_example.py --data \"example.com\" --data-type \"domain\" --execute  # real\npython examples/analyzers/cyberprotect_example.py --data \"1.2.3.4\" --data-type \"ip\" --execute\npython examples/analyzers/cyberprotect_example.py --data \"https://malicious-site.com\" --data-type \"url\" --execute\n</code></pre> <p>Arquivo: <code>examples/analyzers/cyberprotect_example.py</code></p>"},{"location":"modulos/analyzers/cyberprotect/#taxonomia","title":"Taxonomia","text":"<ul> <li><code>info/safe/suspicious/malicious</code> conforme threat score level retornado pela API.</li> <li>Campos gerados:</li> <li><code>ThreatScore</code> com valor do threat score ou status (\"not in database\", \"not analyzed yet\", \"api error\", \"error\")</li> </ul>"},{"location":"modulos/analyzers/cyberprotect/#tipos-de-dados-suportados","title":"Tipos de Dados Suportados","text":"<ul> <li><code>domain</code>: Dom\u00ednios e subdom\u00ednios</li> <li><code>hash</code>: Hashes de arquivos (MD5, SHA1, SHA256)</li> <li><code>ip</code>: Endere\u00e7os IP (IPv4 e IPv6)</li> <li><code>url</code>: URLs completas</li> <li><code>user-agent</code>: User-Agent strings</li> </ul>"},{"location":"modulos/analyzers/cyberprotect/#mapeamento-de-verdicts","title":"Mapeamento de Verdicts","text":"Level da API Verdict malicious, high malicious suspicious, medium suspicious safe, low safe outros info"},{"location":"modulos/analyzers/cyberprotect/#metadata","title":"Metadata","text":"<p>O analisador inclui <code>full_report.metadata</code> com:</p> <pre><code>{\n  \"Name\": \"Cyberprotect ThreatScore\",\n  \"Description\": \"Consulta a API ThreatScore da Cyberprotect para an\u00e1lise de amea\u00e7as\",\n  \"Author\": [\"SentinelIQ Team &lt;team@sentineliq.com.br&gt;\"],\n  \"License\": \"SentinelIQ License\",\n  \"pattern\": \"threat-intel\",\n  \"doc_pattern\": \"P\u00e1gina de m\u00f3dulo MkDocs; uso program\u00e1tico\",\n  \"doc\": \"https://killsearch.github.io/sentineliqsdk/modulos/analyzers/cyberprotect/\",\n  \"VERSION\": \"TESTING\"\n}\n</code></pre>"},{"location":"modulos/analyzers/cyberprotect/#tratamento-de-erros","title":"Tratamento de Erros","text":"<ul> <li>Tipos de dados n\u00e3o suportados retornam verdict <code>info</code> com erro explicativo</li> <li>Falhas de API retornam verdict <code>info</code> com detalhes do erro</li> <li>Timeouts e problemas de rede s\u00e3o capturados e reportados</li> </ul>"},{"location":"modulos/analyzers/cylance/","title":"Cylance Analyzer","text":"<p>The Cylance Analyzer performs hash-based threat intelligence lookups using the Cylance ThreatZERO API. It analyzes SHA256 hashes to determine if files are known threats in the Cylance threat database.</p>"},{"location":"modulos/analyzers/cylance/#features","title":"Features","text":"<ul> <li>Hash Analysis: Analyze SHA256 hashes for threat intelligence</li> <li>Threat Classification: Classify threats based on Cylance's threat database</li> <li>Real-time Lookups: Query Cylance ThreatZERO API for up-to-date threat information</li> <li>Comprehensive Reporting: Provides detailed taxonomy and metadata</li> <li>Error Handling: Robust error handling for API failures and invalid hashes</li> </ul>"},{"location":"modulos/analyzers/cylance/#installation","title":"Installation","text":""},{"location":"modulos/analyzers/cylance/#prerequisites","title":"Prerequisites","text":"<ol> <li>Cylance ThreatZERO Account: You need access to Cylance ThreatZERO API</li> <li>API Credentials: Obtain your API key from Cylance console</li> </ol>"},{"location":"modulos/analyzers/cylance/#configuration","title":"Configuration","text":"<p>The analyzer requires API credentials to access Cylance ThreatZERO:</p> <pre><code>from sentineliqsdk import WorkerInput, WorkerConfig\n\nconfig = WorkerConfig(\n    check_tlp=True,\n    max_tlp=2,\n    check_pap=True,\n    max_pap=2,\n    secrets={\n        \"cylance\": {\n            \"api_key\": \"your_cylance_api_key_here\"\n        }\n    }\n)\n</code></pre>"},{"location":"modulos/analyzers/cylance/#usage","title":"Usage","text":""},{"location":"modulos/analyzers/cylance/#basic-usage","title":"Basic Usage","text":"<pre><code>from sentineliqsdk.analyzers.cylance import CylanceAnalyzer\nfrom sentineliqsdk import WorkerInput, WorkerConfig\n\n# Configure the analyzer\nconfig = WorkerConfig(\n    secrets={\n        \"cylance\": {\n            \"api_key\": \"your_api_key\"\n        }\n    }\n)\n\n# Create input data\ninput_data = WorkerInput(\n    data_type=\"hash\",\n    data=\"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\n    config=config\n)\n\n# Initialize and run analyzer\nanalyzer = CylanceAnalyzer(input_data)\nresult = analyzer.run()\n\nprint(f\"Verdict: {result.full_report['verdict']}\")\nprint(f\"Taxonomy: {result.full_report['taxonomy']}\")\n</code></pre>"},{"location":"modulos/analyzers/cylance/#programmatic-usage","title":"Programmatic Usage","text":"<pre><code>import asyncio\nfrom sentineliqsdk.analyzers.cylance import CylanceAnalyzer\nfrom sentineliqsdk import WorkerInput, WorkerConfig\n\nasync def analyze_hash(sha256_hash: str) -&gt; dict:\n    \"\"\"Analyze a SHA256 hash using Cylance.\"\"\"\n\n    config = WorkerConfig(\n        secrets={\n            \"cylance\": {\n                \"api_key\": \"your_api_key\"\n            }\n        }\n    )\n\n    input_data = WorkerInput(\n        data_type=\"hash\",\n        data=sha256_hash,\n        config=config\n    )\n\n    analyzer = CylanceAnalyzer(input_data)\n    result = analyzer.run()\n\n    return {\n        \"hash\": sha256_hash,\n        \"verdict\": result.full_report[\"verdict\"],\n        \"threat_found\": result.full_report.get(\"threat_found\", False),\n        \"taxonomy\": result.full_report[\"taxonomy\"]\n    }\n\n# Example usage\nasync def main():\n    hashes = [\n        \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\n        \"d41d8cd98f00b204e9800998ecf8427e\"\n    ]\n\n    for hash_value in hashes:\n        try:\n            result = await analyze_hash(hash_value)\n            print(f\"Hash: {result['hash']}\")\n            print(f\"Verdict: {result['verdict']}\")\n            print(f\"Threat Found: {result['threat_found']}\")\n            print(\"---\")\n        except Exception as e:\n            print(f\"Error analyzing {hash_value}: {e}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"modulos/analyzers/cylance/#configuration-options","title":"Configuration Options","text":""},{"location":"modulos/analyzers/cylance/#required-secrets","title":"Required Secrets","text":"Secret Description Required <code>cylance.api_key</code> Cylance ThreatZERO API key Yes"},{"location":"modulos/analyzers/cylance/#optional-configuration","title":"Optional Configuration","text":"Setting Description Default Type <code>cylance.timeout</code> API request timeout in seconds 30 int <code>cylance.max_retries</code> Maximum number of API retries 3 int <code>cylance.base_url</code> Cylance API base URL <code>https://protect-api.cylance.com</code> str"},{"location":"modulos/analyzers/cylance/#example-with-custom-configuration","title":"Example with Custom Configuration","text":"<pre><code>config = WorkerConfig(\n    secrets={\n        \"cylance\": {\n            \"api_key\": \"your_api_key\"\n        }\n    },\n    # Custom timeout and retries\n    **{\n        \"cylance.timeout\": 60,\n        \"cylance.max_retries\": 5\n    }\n)\n</code></pre>"},{"location":"modulos/analyzers/cylance/#data-types","title":"Data Types","text":"<p>The Cylance Analyzer supports the following data types:</p> <ul> <li><code>hash</code>: SHA256 hash values (64 hexadecimal characters)</li> </ul>"},{"location":"modulos/analyzers/cylance/#output-format","title":"Output Format","text":"<p>The analyzer returns an <code>AnalyzerReport</code> with the following structure:</p> <pre><code>{\n    \"observable\": \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\n    \"verdict\": \"safe\",  # or \"malicious\", \"suspicious\", \"info\"\n    \"threat_found\": False,\n    \"taxonomy\": [\n        {\n            \"level\": \"safe\",\n            \"namespace\": \"cylance\",\n            \"predicate\": \"hash_analysis\",\n            \"value\": \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"\n        }\n    ],\n    \"metadata\": {\n        \"name\": \"Cylance Analyzer\",\n        \"description\": \"Analyzer for Cylance ThreatZERO hash lookups\",\n        \"author\": [\"SentinelIQ Team &lt;team@sentineliq.com.br&gt;\"],\n        \"version_stage\": \"TESTING\"\n    }\n}\n</code></pre>"},{"location":"modulos/analyzers/cylance/#verdict-levels","title":"Verdict Levels","text":"<ul> <li><code>safe</code>: Hash is clean/not a known threat</li> <li><code>malicious</code>: Hash is identified as malware</li> <li><code>suspicious</code>: Hash has suspicious characteristics</li> <li><code>info</code>: Informational result (e.g., hash not found)</li> </ul>"},{"location":"modulos/analyzers/cylance/#error-handling","title":"Error Handling","text":"<p>The analyzer handles various error conditions:</p>"},{"location":"modulos/analyzers/cylance/#invalid-hash-format","title":"Invalid Hash Format","text":"<pre><code># Invalid SHA256 hash\ninput_data = WorkerInput(\n    data_type=\"hash\",\n    data=\"invalid_hash\",\n    config=config\n)\n\nresult = analyzer.run()\n# Returns verdict: \"info\" with appropriate taxonomy\n</code></pre>"},{"location":"modulos/analyzers/cylance/#api-errors","title":"API Errors","text":"<pre><code># Network or API errors are handled gracefully\n# Returns appropriate error taxonomy and verdict\n</code></pre>"},{"location":"modulos/analyzers/cylance/#missing-configuration","title":"Missing Configuration","text":"<pre><code># Missing API key raises configuration error\nconfig = WorkerConfig()  # No secrets\n# Raises: \"Cylance API key is required\"\n</code></pre>"},{"location":"modulos/analyzers/cylance/#examples","title":"Examples","text":""},{"location":"modulos/analyzers/cylance/#command-line-usage","title":"Command Line Usage","text":"<pre><code># Run the example script\npython examples/analyzers/cylance_example.py \\\n    --data \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\" \\\n    --data-type \"hash\" \\\n    --execute\n</code></pre>"},{"location":"modulos/analyzers/cylance/#batch-processing","title":"Batch Processing","text":"<pre><code>from sentineliqsdk.analyzers.cylance import CylanceAnalyzer\nfrom sentineliqsdk import WorkerInput, WorkerConfig\n\ndef analyze_hashes_batch(hashes: list[str]) -&gt; list[dict]:\n    \"\"\"Analyze multiple hashes in batch.\"\"\"\n\n    config = WorkerConfig(\n        secrets={\n            \"cylance\": {\n                \"api_key\": \"your_api_key\"\n            }\n        }\n    )\n\n    results = []\n\n    for hash_value in hashes:\n        input_data = WorkerInput(\n            data_type=\"hash\",\n            data=hash_value,\n            config=config\n        )\n\n        analyzer = CylanceAnalyzer(input_data)\n        result = analyzer.run()\n\n        results.append({\n            \"hash\": hash_value,\n            \"verdict\": result.full_report[\"verdict\"],\n            \"threat_found\": result.full_report.get(\"threat_found\", False)\n        })\n\n    return results\n\n# Example usage\nhashes = [\n    \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\n    \"d41d8cd98f00b204e9800998ecf8427e\"\n]\n\nresults = analyze_hashes_batch(hashes)\nfor result in results:\n    print(f\"{result['hash']}: {result['verdict']}\")\n</code></pre>"},{"location":"modulos/analyzers/cylance/#integration-with-pipelines","title":"Integration with Pipelines","text":"<pre><code>from sentineliqsdk.pipelines import SecurityPipeline\nfrom sentineliqsdk.analyzers.cylance import CylanceAnalyzer\n\n# Create a pipeline with Cylance analyzer\npipeline = SecurityPipeline()\npipeline.add_analyzer(CylanceAnalyzer)\n\n# Process data through pipeline\nresult = pipeline.process(\n    data=\"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\n    data_type=\"hash\"\n)\n</code></pre>"},{"location":"modulos/analyzers/cylance/#troubleshooting","title":"Troubleshooting","text":""},{"location":"modulos/analyzers/cylance/#common-issues","title":"Common Issues","text":"<ol> <li>API Key Issues <code>Error: Cylance API key is required</code></li> <li>Ensure API key is properly configured in secrets</li> <li> <p>Verify API key is valid and active</p> </li> <li> <p>Invalid Hash Format <code>Verdict: info (Hash inv\u00e1lido)</code></p> </li> <li>Ensure hash is exactly 64 hexadecimal characters</li> <li> <p>Verify hash is SHA256 format</p> </li> <li> <p>Network Connectivity <code>Error: Connection timeout</code></p> </li> <li>Check internet connectivity</li> <li>Verify Cylance API endpoints are accessible</li> <li>Consider increasing timeout configuration</li> </ol>"},{"location":"modulos/analyzers/cylance/#debug-mode","title":"Debug Mode","text":"<pre><code>config = WorkerConfig(\n    secrets={\n        \"cylance\": {\n            \"api_key\": \"your_api_key\"\n        }\n    },\n    **{\n        \"cylance.debug\": True  # Enable debug logging\n    }\n)\n</code></pre>"},{"location":"modulos/analyzers/cylance/#api-reference","title":"API Reference","text":""},{"location":"modulos/analyzers/cylance/#cylanceanalyzer-class","title":"CylanceAnalyzer Class","text":"<pre><code>class CylanceAnalyzer(Analyzer):\n    \"\"\"Cylance ThreatZERO hash analyzer.\"\"\"\n\n    def execute(self) -&gt; AnalyzerReport:\n        \"\"\"Execute the Cylance hash analysis.\"\"\"\n        pass\n\n    def run(self) -&gt; AnalyzerReport:\n        \"\"\"Run the analyzer and return results.\"\"\"\n        pass\n</code></pre>"},{"location":"modulos/analyzers/cylance/#methods","title":"Methods","text":"<ul> <li><code>execute()</code>: Core analysis logic</li> <li><code>run()</code>: Main entry point for analysis</li> <li><code>get_data()</code>: Retrieve input data</li> <li><code>get_secret()</code>: Access API credentials</li> <li><code>get_config()</code>: Access configuration settings</li> <li><code>build_taxonomy()</code>: Create taxonomy entries</li> <li><code>report()</code>: Generate analysis report</li> </ul>"},{"location":"modulos/analyzers/cylance/#security-considerations","title":"Security Considerations","text":"<ul> <li>API Key Protection: Store API keys securely using WorkerConfig.secrets</li> <li>Data Privacy: Hash values are sent to Cylance API for analysis</li> <li>Rate Limiting: Respect Cylance API rate limits</li> <li>TLP/PAP Compliance: Configure appropriate TLP/PAP levels</li> </ul>"},{"location":"modulos/analyzers/cylance/#license","title":"License","text":"<p>This analyzer is part of the SentinelIQ SDK and follows the same licensing terms.</p>"},{"location":"modulos/analyzers/cylance/#support","title":"Support","text":"<p>For issues and support: - GitHub Issues: SentinelIQ SDK Issues - Documentation: SentinelIQ SDK Docs - Email: team@sentineliq.com.br</p>"},{"location":"modulos/analyzers/dns_lookingglass/","title":"DNS Lookingglass Analyzer","text":"<p>The DNS Lookingglass Analyzer performs DNS lookups using the ISC SANS DNS Lookingglass API. It analyzes domains and FQDNs to retrieve DNS information and extract IP addresses as artifacts.</p>"},{"location":"modulos/analyzers/dns_lookingglass/#features","title":"Features","text":"<ul> <li>Domain Analysis: Analyze domains and FQDNs for DNS information</li> <li>IP Extraction: Automatically extract IPv4 and IPv6 addresses from DNS responses</li> <li>Real-time Lookups: Query ISC SANS DNS Lookingglass API for current DNS data</li> <li>Comprehensive Reporting: Provides detailed taxonomy and metadata</li> <li>No Authentication Required: Free API with no authentication needed</li> <li>Error Handling: Robust error handling for API failures and invalid domains</li> </ul>"},{"location":"modulos/analyzers/dns_lookingglass/#installation","title":"Installation","text":""},{"location":"modulos/analyzers/dns_lookingglass/#prerequisites","title":"Prerequisites","text":"<ol> <li>Internet Connection: Required to access ISC SANS API</li> <li>No API Key Required: This analyzer uses a free public API</li> </ol>"},{"location":"modulos/analyzers/dns_lookingglass/#configuration","title":"Configuration","text":"<p>The analyzer works without any required configuration, but you can customize timeout settings:</p> <pre><code>from sentineliqsdk import WorkerInput, WorkerConfig\n\nconfig = WorkerConfig(\n    check_tlp=True,\n    max_tlp=2,\n    check_pap=True,\n    max_pap=2,\n    # Optional timeout configuration\n    # dns_lookingglass.timeout: 30.0\n)\n</code></pre>"},{"location":"modulos/analyzers/dns_lookingglass/#usage","title":"Usage","text":""},{"location":"modulos/analyzers/dns_lookingglass/#basic-usage","title":"Basic Usage","text":"<pre><code>from sentineliqsdk.analyzers.dns_lookingglass import DnsLookingglassAnalyzer\nfrom sentineliqsdk import WorkerInput, WorkerConfig\n\n# Configure the analyzer\nconfig = WorkerConfig(\n    auto_extract=True,\n    check_tlp=True,\n    max_tlp=2\n)\n\n# Create input data\ninput_data = WorkerInput(\n    data_type=\"domain\",\n    data=\"example.com\",\n    config=config\n)\n\n# Initialize and run analyzer\nanalyzer = DnsLookingglassAnalyzer(input_data)\nresult = analyzer.run()\n\nprint(f\"Verdict: {result.full_report['verdict']}\")\nprint(f\"Hits: {result.full_report['hits']}\")\nprint(f\"Count: {result.full_report['count']}\")\nprint(f\"Artifacts: {len(result.full_report['artifacts'])} IPs found\")\n</code></pre>"},{"location":"modulos/analyzers/dns_lookingglass/#programmatic-usage","title":"Programmatic Usage","text":"<pre><code>import asyncio\nfrom sentineliqsdk.analyzers.dns_lookingglass import DnsLookingglassAnalyzer\nfrom sentineliqsdk import WorkerInput, WorkerConfig\n\nasync def analyze_domain(domain: str) -&gt; dict:\n    \"\"\"Analyze a domain using DNS Lookingglass.\"\"\"\n\n    config = WorkerConfig(\n        auto_extract=True,\n        check_tlp=True,\n        max_tlp=2\n    )\n\n    input_data = WorkerInput(\n        data_type=\"domain\",\n        data=domain,\n        config=config\n    )\n\n    analyzer = DnsLookingglassAnalyzer(input_data)\n    result = analyzer.run()\n\n    return {\n        \"domain\": domain,\n        \"verdict\": result.full_report[\"verdict\"],\n        \"hits\": result.full_report[\"hits\"],\n        \"count\": result.full_report[\"count\"],\n        \"results\": result.full_report[\"results\"],\n        \"artifacts\": result.full_report[\"artifacts\"],\n        \"taxonomy\": result.full_report[\"taxonomy\"]\n    }\n\n# Example usage\nasync def main():\n    domains = [\n        \"example.com\",\n        \"google.com\",\n        \"nonexistent-domain-12345.com\"\n    ]\n\n    for domain in domains:\n        try:\n            result = await analyze_domain(domain)\n            print(f\"Domain: {result['domain']}\")\n            print(f\"Status: {result['hits']}\")\n            print(f\"Records Found: {result['count']}\")\n            print(f\"IP Artifacts: {len(result['artifacts'])}\")\n            print(\"---\")\n        except Exception as e:\n            print(f\"Error analyzing {domain}: {e}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"modulos/analyzers/dns_lookingglass/#configuration-options","title":"Configuration Options","text":""},{"location":"modulos/analyzers/dns_lookingglass/#optional-configuration","title":"Optional Configuration","text":"Setting Description Default Type <code>dns_lookingglass.timeout</code> API request timeout in seconds 30.0 float"},{"location":"modulos/analyzers/dns_lookingglass/#example-with-custom-configuration","title":"Example with Custom Configuration","text":"<pre><code>config = WorkerConfig(\n    auto_extract=True,\n    # Custom timeout\n    # You can set this via environment or config\n)\n\n# Or programmatically (not recommended for production)\nanalyzer = DnsLookingglassAnalyzer(input_data)\n# The analyzer will use get_config(\"dns_lookingglass.timeout\", 30.0)\n</code></pre>"},{"location":"modulos/analyzers/dns_lookingglass/#supported-data-types","title":"Supported Data Types","text":"Data Type Description Example <code>domain</code> Domain name <code>example.com</code> <code>fqdn</code> Fully Qualified Domain Name <code>www.example.com</code>"},{"location":"modulos/analyzers/dns_lookingglass/#output-format","title":"Output Format","text":"<p>The analyzer returns a comprehensive report with the following structure:</p> <pre><code>{\n  \"observable\": \"example.com\",\n  \"verdict\": \"info\",\n  \"taxonomy\": [\n    {\n      \"level\": \"info\",\n      \"namespace\": \"Lookingglass\",\n      \"predicate\": \"DomainExist\",\n      \"value\": \"3 hit(s)\"\n    }\n  ],\n  \"source\": \"ISC SANS DNS Lookingglass\",\n  \"data_type\": \"domain\",\n  \"results\": [\n    {\n      \"answer\": \"93.184.216.34\",\n      \"status\": \"NOERROR\",\n      \"country\": \"US\"\n    }\n  ],\n  \"hits\": \"DomainExist\",\n  \"count\": 3,\n  \"artifacts\": [\n    {\n      \"type\": \"ip\",\n      \"value\": \"93.184.216.34\"\n    }\n  ],\n  \"metadata\": {\n    \"name\": \"DNS Lookingglass Analyzer\",\n    \"description\": \"Query DNS information for domains using ISC SANS DNS Lookingglass API\",\n    \"author\": [\"SentinelIQ Team &lt;team@sentineliq.com.br&gt;\"],\n    \"version_stage\": \"TESTING\"\n  }\n}\n</code></pre>"},{"location":"modulos/analyzers/dns_lookingglass/#hit-status-types","title":"Hit Status Types","text":"Status Description <code>NXDOMAIN</code> Domain does not exist (0 results) <code>DomainExist</code> Domain exists with DNS records (\u22651 results) <code>Error</code> Error occurred during lookup"},{"location":"modulos/analyzers/dns_lookingglass/#artifacts","title":"Artifacts","text":"<p>The analyzer automatically extracts IP addresses from DNS responses:</p> <ul> <li>IPv4 Addresses: Standard IPv4 format (e.g., <code>192.168.1.1</code>)</li> <li>IPv6 Addresses: Standard IPv6 format (e.g., <code>2001:db8::1</code>)</li> </ul> <p>All extracted IPs are returned as artifacts with type <code>ip</code>.</p>"},{"location":"modulos/analyzers/dns_lookingglass/#error-handling","title":"Error Handling","text":"<p>The analyzer handles various error conditions:</p> <ul> <li>Invalid Data Types: Only accepts <code>domain</code> and <code>fqdn</code></li> <li>API Failures: HTTP errors, timeouts, and connection issues</li> <li>Malformed Responses: Invalid JSON or unexpected response format</li> <li>Network Issues: Connection timeouts and DNS resolution failures</li> </ul>"},{"location":"modulos/analyzers/dns_lookingglass/#command-line-usage","title":"Command Line Usage","text":"<p>Run the analyzer from the command line:</p> <pre><code># Basic usage\npython examples/analyzers/dns_lookingglass_example.py example.com --execute\n\n# With specific data type\npython examples/analyzers/dns_lookingglass_example.py \\\n    --data \"www.example.com\" \\\n    --data-type \"fqdn\" \\\n    --execute\n\n# Dry run (no actual API calls)\npython examples/analyzers/dns_lookingglass_example.py example.com\n</code></pre>"},{"location":"modulos/analyzers/dns_lookingglass/#command-line-arguments","title":"Command Line Arguments","text":"Argument Description Required <code>domain</code> Domain to analyze (positional) Yes* <code>--data</code> Alternative way to specify domain Yes* <code>--data-type</code> Type of data (<code>domain</code> or <code>fqdn</code>) No (default: <code>domain</code>) <code>--execute</code> Execute real API calls Yes (for actual execution) <code>--include-dangerous</code> No-op for this analyzer No <p>*Either positional <code>domain</code> or <code>--data</code> is required.</p>"},{"location":"modulos/analyzers/dns_lookingglass/#integration-examples","title":"Integration Examples","text":""},{"location":"modulos/analyzers/dns_lookingglass/#with-pipeline","title":"With Pipeline","text":"<pre><code>from sentineliqsdk.pipelines import SecurityPipeline\nfrom sentineliqsdk.analyzers.dns_lookingglass import DnsLookingglassAnalyzer\n\npipeline = SecurityPipeline()\npipeline.add_analyzer(DnsLookingglassAnalyzer)\n\n# Process multiple domains\ndomains = [\"example.com\", \"google.com\", \"suspicious-domain.com\"]\nfor domain in domains:\n    result = pipeline.analyze(\"domain\", domain)\n    print(f\"{domain}: {result['hits']} ({result['count']} records)\")\n</code></pre>"},{"location":"modulos/analyzers/dns_lookingglass/#with-responder","title":"With Responder","text":"<pre><code>from sentineliqsdk.analyzers.dns_lookingglass import DnsLookingglassAnalyzer\nfrom sentineliqsdk.responders.webhook import WebhookResponder\n\n# Analyze domain\nanalyzer_result = DnsLookingglassAnalyzer(input_data).run()\n\n# Send results to webhook if domain exists\nif analyzer_result.full_report[\"hits\"] == \"DomainExist\":\n    webhook_data = {\n        \"domain\": analyzer_result.full_report[\"observable\"],\n        \"ip_count\": len(analyzer_result.full_report[\"artifacts\"]),\n        \"dns_records\": analyzer_result.full_report[\"count\"]\n    }\n\n    webhook_input = WorkerInput(\n        data_type=\"other\",\n        data=webhook_data,\n        config=webhook_config\n    )\n\n    WebhookResponder(webhook_input).run()\n</code></pre>"},{"location":"modulos/analyzers/dns_lookingglass/#api-reference","title":"API Reference","text":""},{"location":"modulos/analyzers/dns_lookingglass/#dnslookingglassanalyzer","title":"DnsLookingglassAnalyzer","text":""},{"location":"modulos/analyzers/dns_lookingglass/#methods","title":"Methods","text":"<ul> <li><code>execute() -&gt; AnalyzerReport</code>: Execute DNS lookup and return report</li> <li><code>run() -&gt; AnalyzerReport</code>: Compatibility wrapper for execute()</li> </ul>"},{"location":"modulos/analyzers/dns_lookingglass/#configuration-methods-inherited","title":"Configuration Methods (Inherited)","text":"<ul> <li><code>get_config(key: str, default: Any) -&gt; Any</code>: Get configuration value</li> <li><code>get_secret(key: str, message: str = None) -&gt; str</code>: Get secret value</li> <li><code>get_data() -&gt; Any</code>: Get input data</li> <li><code>build_taxonomy(level, namespace, predicate, value) -&gt; Taxonomy</code>: Build taxonomy</li> <li><code>build_artifact(type, value) -&gt; Artifact</code>: Build artifact</li> <li><code>report(data: dict) -&gt; AnalyzerReport</code>: Create report</li> </ul>"},{"location":"modulos/analyzers/dns_lookingglass/#troubleshooting","title":"Troubleshooting","text":""},{"location":"modulos/analyzers/dns_lookingglass/#common-issues","title":"Common Issues","text":"<ol> <li>Connection Timeouts</li> <li>Increase timeout: Configure <code>dns_lookingglass.timeout</code></li> <li> <p>Check internet connectivity</p> </li> <li> <p>No Results for Valid Domain</p> </li> <li>Domain might not be in ISC SANS database</li> <li> <p>Try with a well-known domain like <code>google.com</code></p> </li> <li> <p>Invalid Data Type Error</p> </li> <li>Ensure data_type is <code>domain</code> or <code>fqdn</code></li> <li>Check input data format</li> </ol>"},{"location":"modulos/analyzers/dns_lookingglass/#debug-mode","title":"Debug Mode","text":"<p>Enable debug logging to troubleshoot issues:</p> <pre><code>import logging\nlogging.basicConfig(level=logging.DEBUG)\n\n# Run analyzer with debug output\nresult = DnsLookingglassAnalyzer(input_data).run()\n</code></pre>"},{"location":"modulos/analyzers/dns_lookingglass/#related-analyzers","title":"Related Analyzers","text":"<ul> <li>CRT.sh Analyzer: Certificate transparency lookups</li> <li>Shodan Analyzer: IP and domain intelligence</li> <li>CIRCL PassiveDNS: Passive DNS lookups</li> </ul>"},{"location":"modulos/analyzers/dns_lookingglass/#license","title":"License","text":"<p>This analyzer is part of the SentinelIQ SDK and follows the same licensing terms.</p>"},{"location":"modulos/analyzers/dns_lookingglass/#support","title":"Support","text":"<p>For support and questions:</p> <ul> <li>Documentation: SentinelIQ SDK Docs</li> <li>Issues: GitHub Issues</li> <li>Email: team@sentineliq.com.br</li> </ul>"},{"location":"modulos/analyzers/domain_mail_spf_dmarc/","title":"Domain Mail SPF DMARC Analyzer","text":"<p>O Domain Mail SPF DMARC Analyzer verifica registros SPF e DMARC de dom\u00ednios para avaliar a configura\u00e7\u00e3o de seguran\u00e7a de email e detectar poss\u00edveis vulnerabilidades.</p>"},{"location":"modulos/analyzers/domain_mail_spf_dmarc/#visao-geral","title":"Vis\u00e3o Geral","text":"<ul> <li>Analisa <code>domain</code> e <code>fqdn</code> diretamente, retornando um <code>AnalyzerReport</code> com   <code>verdict</code>, <code>taxonomy</code> e <code>details</code>.</li> <li>Verifica a presen\u00e7a e configura\u00e7\u00e3o de registros SPF e DMARC via consultas DNS.</li> <li>Avalia a seguran\u00e7a da configura\u00e7\u00e3o de email baseada nas pol\u00edticas encontradas.</li> </ul>"},{"location":"modulos/analyzers/domain_mail_spf_dmarc/#como-funciona","title":"Como Funciona","text":"<ul> <li>Dom\u00ednio/FQDN: realiza consultas DNS TXT para buscar registros SPF e DMARC.</li> <li>SPF: verifica a presen\u00e7a do registro e analisa mecanismos de autoriza\u00e7\u00e3o.</li> <li>DMARC: verifica pol\u00edtica de alinhamento e a\u00e7\u00f5es para emails n\u00e3o autenticados.</li> <li>Heur\u00edstica de veredito:</li> <li><code>malicious</code>: configura\u00e7\u00f5es que permitem spoofing ou s\u00e3o muito permissivas</li> <li><code>suspicious</code>: configura\u00e7\u00f5es incompletas ou com falhas de seguran\u00e7a</li> <li><code>safe</code>: configura\u00e7\u00f5es adequadas de SPF e DMARC</li> <li>Rede: utiliza <code>dns.resolver</code> para consultas DNS; proxies s\u00e3o honrados via <code>WorkerConfig.proxy</code>.</li> </ul>"},{"location":"modulos/analyzers/domain_mail_spf_dmarc/#tipos-de-dados-suportados","title":"Tipos de Dados Suportados","text":"<ul> <li><code>domain</code>: Dom\u00ednio para verifica\u00e7\u00e3o (ex: \"example.com\")</li> <li><code>fqdn</code>: Nome de dom\u00ednio totalmente qualificado (ex: \"mail.example.com\")</li> </ul>"},{"location":"modulos/analyzers/domain_mail_spf_dmarc/#instanciacao","title":"Instancia\u00e7\u00e3o","text":"<pre><code>from __future__ import annotations\nfrom sentineliqsdk import WorkerInput\nfrom sentineliqsdk.analyzers.domain_mail_spf_dmarc import DomainMailSpfDmarcAnalyzer\n\n# Dom\u00ednio\ninp = WorkerInput(data_type=\"domain\", data=\"example.com\")\nreport = DomainMailSpfDmarcAnalyzer(inp).execute()\n\n# FQDN\ninp = WorkerInput(data_type=\"fqdn\", data=\"mail.example.com\")\nreport = DomainMailSpfDmarcAnalyzer(inp).execute()\n</code></pre>"},{"location":"modulos/analyzers/domain_mail_spf_dmarc/#configuracao","title":"Configura\u00e7\u00e3o","text":"<ul> <li>Timeout DNS: <code>domain_mail_spf_dmarc.dns_timeout</code> em <code>WorkerConfig.params</code> (padr\u00e3o: 10 segundos)</li> <li>Proxies: <code>WorkerInput.config.proxy.http/https</code></li> </ul> <p>Exemplo (dataclasses):</p> <pre><code>from sentineliqsdk import WorkerInput, WorkerConfig, ProxyConfig\nfrom sentineliqsdk.analyzers.domain_mail_spf_dmarc import DomainMailSpfDmarcAnalyzer\n\ninp = WorkerInput(\n    data_type=\"domain\",\n    data=\"example.com\",\n    config=WorkerConfig(\n        proxy=ProxyConfig(http=None, https=None),\n        params={\"domain_mail_spf_dmarc\": {\"dns_timeout\": 15}},\n    ),\n)\nreport = DomainMailSpfDmarcAnalyzer(inp).execute()\n</code></pre> <p>Nota: n\u00e3o h\u00e1 suporte por vari\u00e1veis de ambiente.</p>"},{"location":"modulos/analyzers/domain_mail_spf_dmarc/#uso-correto","title":"Uso Correto","text":"<ul> <li>Use <code>data_type=\"domain\"</code> ou <code>data_type=\"fqdn\"</code> com o dom\u00ednio a ser verificado.</li> <li>O analyzer verifica automaticamente registros SPF e DMARC do dom\u00ednio fornecido.</li> <li>Para subdom\u00ednios, o DMARC pode herdar a pol\u00edtica do dom\u00ednio organizacional.</li> </ul>"},{"location":"modulos/analyzers/domain_mail_spf_dmarc/#retorno","title":"Retorno","text":"<ul> <li><code>AnalyzerReport</code> com <code>full_report</code> contendo:</li> <li><code>observable</code>, <code>verdict</code>, <code>taxonomy</code>, <code>source</code>, <code>data_type</code>, <code>details</code></li> <li><code>spf_record</code>: registro SPF encontrado (se houver)</li> <li><code>dmarc_record</code>: registro DMARC encontrado (se houver)</li> <li><code>spf_analysis</code>: an\u00e1lise detalhada do SPF</li> <li><code>dmarc_analysis</code>: an\u00e1lise detalhada do DMARC</li> </ul>"},{"location":"modulos/analyzers/domain_mail_spf_dmarc/#taxonomia","title":"Taxonomia","text":"<ul> <li>Namespace: <code>domain-mail-security</code></li> <li>Predicates:</li> <li><code>spf-configured</code>: SPF est\u00e1 configurado</li> <li><code>dmarc-configured</code>: DMARC est\u00e1 configurado</li> <li><code>spf-missing</code>: SPF n\u00e3o encontrado</li> <li><code>dmarc-missing</code>: DMARC n\u00e3o encontrado</li> <li><code>spf-permissive</code>: SPF muito permissivo</li> <li><code>dmarc-permissive</code>: DMARC muito permissivo</li> <li><code>secure-configuration</code>: Configura\u00e7\u00e3o segura</li> </ul>"},{"location":"modulos/analyzers/domain_mail_spf_dmarc/#metadata","title":"Metadata","text":"<p>O analisador inclui <code>full_report.metadata</code> com:</p> <pre><code>{\n  \"Name\": \"Domain Mail SPF DMARC Analyzer\",\n  \"Description\": \"Verify SPF and DMARC records for domain email security assessment\",\n  \"Author\": [\"SentinelIQ Team &lt;team@sentineliq.com.br&gt;\"],\n  \"License\": \"SentinelIQ License\",\n  \"pattern\": \"threat-intel\",\n  \"doc_pattern\": \"MkDocs module page; programmatic usage documented\",\n  \"doc\": \"https://killsearch.github.io/sentineliqsdk/modulos/analyzers/domain_mail_spf_dmarc/\",\n  \"VERSION\": \"TESTING\"\n}\n</code></pre>"},{"location":"modulos/analyzers/domaintools/","title":"DomainTools Analyzer","text":"<p>O DomainTools Analyzer fornece intelig\u00eancia abrangente de dom\u00ednios usando a API DomainTools Iris, incluindo an\u00e1lise de risco, dados Whois, perfil de dom\u00ednio e chamadas din\u00e2micas a diversos endpoints.</p>"},{"location":"modulos/analyzers/domaintools/#visao-geral","title":"Vis\u00e3o Geral","text":"<ul> <li>Analisa <code>domain</code>, <code>fqdn</code>, <code>ip</code> e <code>mail</code> diretamente, retornando um <code>AnalyzerReport</code> com   <code>verdict</code>, <code>taxonomy</code> e <code>details</code>.</li> <li>Suporta chamadas din\u00e2micas a m\u00e9todos da API via:</li> <li><code>domaintools.method</code> e <code>domaintools.params</code> (dict) em <code>WorkerConfig.params</code></li> <li>ou <code>data_type == \"other\"</code> com <code>data</code> em JSON: <code>{\"method\": \"...\", \"params\": {...}}</code></li> </ul>"},{"location":"modulos/analyzers/domaintools/#como-funciona","title":"Como Funciona","text":"<ul> <li>Dom\u00ednio/FQDN: usa <code>iris_enrich</code>, <code>domain_profile</code>, <code>risk</code>, <code>whois</code> e <code>whois_history</code>   para an\u00e1lise completa.</li> <li>IP: usa <code>reverse_ip</code> e <code>host_domains</code> para descobrir dom\u00ednios associados.</li> <li>Email: usa <code>reverse_whois</code> para encontrar dom\u00ednios registrados com o email.</li> <li>Heur\u00edstica de veredito: baseada no <code>risk_score</code> da API DomainTools:</li> <li><code>malicious</code> se risk_score &gt;= 70</li> <li><code>suspicious</code> se risk_score &gt;= 40</li> <li><code>safe</code> caso contr\u00e1rio</li> <li>Rede: utiliza a biblioteca <code>domaintools</code>; proxies s\u00e3o honrados via <code>WorkerConfig.proxy</code>.</li> </ul>"},{"location":"modulos/analyzers/domaintools/#metodos-suportados-dinamico","title":"M\u00e9todos Suportados (din\u00e2mico)","text":"<p>Permitidos via <code>method</code>:</p> <ul> <li>Iris: <code>iris_enrich</code>, <code>iris_investigate</code></li> <li>Dom\u00ednio: <code>domain_profile</code>, <code>domain_search</code>, <code>domain_suggestions</code></li> <li>Whois: <code>whois</code>, <code>whois_history</code>, <code>parsed_whois</code>, <code>reverse_whois</code>, <code>whois_lookup</code></li> <li>IP: <code>reverse_ip</code>, <code>host_domains</code>, <code>reverse_ip_whois</code>, <code>hosting_history</code></li> <li>DNS: <code>name_server_domains</code>, <code>reverse_name_server</code></li> <li>Monitoramento: <code>ip_registrant_monitor</code>, <code>name_server_monitor</code>, <code>ip_monitor</code>,   <code>registrant_monitor</code>, <code>brand_monitor</code></li> <li>Reputa\u00e7\u00e3o: <code>reputation</code>, <code>risk</code></li> <li>PhishEye: <code>phisheye</code>, <code>phisheye_term_list</code></li> <li>Conta: <code>account_information</code>, <code>usage</code></li> </ul>"},{"location":"modulos/analyzers/domaintools/#instanciacao","title":"Instancia\u00e7\u00e3o","text":"<pre><code>from __future__ import annotations\nimport json\nfrom sentineliqsdk import WorkerInput\nfrom sentineliqsdk.analyzers.domaintools import DomainToolsAnalyzer\n\n# Dom\u00ednio\ninp = WorkerInput(data_type=\"domain\", data=\"example.com\")\nreport = DomainToolsAnalyzer(inp).execute()\n\n# IP\ninp = WorkerInput(data_type=\"ip\", data=\"1.2.3.4\")\nreport = DomainToolsAnalyzer(inp).execute()\n\n# Email\ninp = WorkerInput(data_type=\"mail\", data=\"admin@example.com\")\nreport = DomainToolsAnalyzer(inp).execute()\n\n# Din\u00e2mico (data payload)\npayload = {\"method\": \"iris_enrich\", \"params\": {\"domains\": [\"example.com\"]}}\ninp = WorkerInput(data_type=\"other\", data=json.dumps(payload))\nreport = DomainToolsAnalyzer(inp).execute()\n</code></pre>"},{"location":"modulos/analyzers/domaintools/#configuracao","title":"Configura\u00e7\u00e3o","text":"<ul> <li>Autentica\u00e7\u00e3o: <code>domaintools.username</code> e <code>domaintools.api_key</code> em <code>WorkerConfig.secrets</code></li> <li>Chamada din\u00e2mica: <code>domaintools.method</code> e <code>domaintools.params</code> (dict) em <code>WorkerConfig.params</code></li> <li>Proxies: <code>WorkerInput.config.proxy.http/https</code></li> </ul> <p>Exemplo (dataclasses):</p> <pre><code>from sentineliqsdk import WorkerInput, WorkerConfig, ProxyConfig\nfrom sentineliqsdk.analyzers.domaintools import DomainToolsAnalyzer\n\ninp = WorkerInput(\n    data_type=\"domain\",\n    data=\"example.com\",\n    config=WorkerConfig(\n        proxy=ProxyConfig(http=None, https=None),\n        secrets={\n            \"domaintools\": {\n                \"username\": \"SEU-USERNAME\",\n                \"api_key\": \"SUA-API-KEY\"\n            }\n        },\n        params={\"domaintools\": {\"method\": None, \"params\": {}}},\n    ),\n)\nreport = DomainToolsAnalyzer(inp).execute()\n</code></pre> <p>Nota: n\u00e3o h\u00e1 suporte por vari\u00e1veis de ambiente.</p>"},{"location":"modulos/analyzers/domaintools/#uso-correto","title":"Uso Correto","text":"<ul> <li>Para Dom\u00ednio/FQDN/IP/Email, use <code>data_type</code> correspondente; para chamadas arbitr\u00e1rias, use   <code>data_type == \"other\"</code> com JSON v\u00e1lido.</li> <li>Em chamadas din\u00e2micas, valide <code>method</code> com a lista permitida e forne\u00e7a <code>params</code> como objeto.</li> <li>Credenciais DomainTools s\u00e3o obrigat\u00f3rias para todas as opera\u00e7\u00f5es.</li> </ul>"},{"location":"modulos/analyzers/domaintools/#retorno","title":"Retorno","text":"<ul> <li><code>AnalyzerReport</code> com <code>full_report</code> contendo:</li> <li><code>observable</code>, <code>verdict</code>, <code>taxonomy</code>, <code>source</code>, <code>data_type</code>, <code>details</code></li> <li>Para an\u00e1lise padr\u00e3o de dom\u00ednios, <code>details</code> inclui resultados de m\u00faltiplos endpoints:</li> <li><code>iris_enrich</code>: dados de enriquecimento Iris</li> <li><code>domain_profile</code>: perfil completo do dom\u00ednio</li> <li><code>risk</code>: pontua\u00e7\u00e3o de risco</li> <li><code>whois</code>: dados Whois atuais</li> <li><code>whois_history</code>: hist\u00f3rico Whois (quando dispon\u00edvel)</li> </ul>"},{"location":"modulos/analyzers/domaintools/#metadata","title":"Metadata","text":"<p>O analisador inclui <code>full_report.metadata</code> com:</p> <pre><code>{\n  \"Name\": \"DomainTools Analyzer\",\n  \"Description\": \"Comprehensive domain intelligence using DomainTools Iris API\",\n  \"Author\": [\"SentinelIQ Team &lt;team@sentineliq.com.br&gt;\"],\n  \"License\": \"SentinelIQ License\",\n  \"pattern\": \"threat-intel\",\n  \"doc_pattern\": \"MkDocs module page; programmatic usage documented\",\n  \"doc\": \"https://killsearch.github.io/sentineliqsdk/modulos/analyzers/domaintools/\",\n  \"VERSION\": \"TESTING\"\n}\n</code></pre>"},{"location":"modulos/analyzers/domaintools/#exemplos-avancados","title":"Exemplos Avan\u00e7ados","text":""},{"location":"modulos/analyzers/domaintools/#analise-de-risco-personalizada","title":"An\u00e1lise de Risco Personalizada","text":"<pre><code># Usar m\u00e9todo iris_investigate para an\u00e1lise detalhada\npayload = {\n    \"method\": \"iris_investigate\",\n    \"params\": {\n        \"domains\": [\"suspicious-domain.com\"],\n        \"include_context\": True\n    }\n}\ninp = WorkerInput(data_type=\"other\", data=json.dumps(payload))\nreport = DomainToolsAnalyzer(inp).execute()\n</code></pre>"},{"location":"modulos/analyzers/domaintools/#monitoramento-de-marca","title":"Monitoramento de Marca","text":"<pre><code># Configurar monitoramento de marca\npayload = {\n    \"method\": \"brand_monitor\",\n    \"params\": {\n        \"query\": \"minha-marca\",\n        \"exclude\": [\"minha-marca.com\"]\n    }\n}\ninp = WorkerInput(data_type=\"other\", data=json.dumps(payload))\nreport = DomainToolsAnalyzer(inp).execute()\n</code></pre>"},{"location":"modulos/analyzers/domaintools/#busca-reversa-de-whois","title":"Busca Reversa de Whois","text":"<pre><code># Encontrar dom\u00ednios registrados por uma organiza\u00e7\u00e3o\npayload = {\n    \"method\": \"reverse_whois\",\n    \"params\": {\n        \"terms\": \"Example Organization\",\n        \"mode\": \"purchase\"\n    }\n}\ninp = WorkerInput(data_type=\"other\", data=json.dumps(payload))\nreport = DomainToolsAnalyzer(inp).execute()\n</code></pre>"},{"location":"modulos/analyzers/dshield/","title":"DShield Analyzer","text":"<p>Consulta a API p\u00fablica do SANS Internet Storm Center DShield para an\u00e1lise de reputa\u00e7\u00e3o de IPs e retorna um <code>AnalyzerReport</code> com <code>verdict</code>, <code>taxonomy</code> e dados enriquecidos (informa\u00e7\u00f5es AS, feeds de amea\u00e7as e c\u00e1lculo de risco).</p>"},{"location":"modulos/analyzers/dshield/#visao-geral","title":"Vis\u00e3o Geral","text":"<ul> <li>Aceita <code>data_type == \"ip\"</code> e chama o endpoint p\u00fablico da API DShield.</li> <li>Taxonomia resume: n\u00edvel de risco baseado em contadores de ataques e relat\u00f3rios.</li> <li>Artefatos: adiciona informa\u00e7\u00f5es de AS (Autonomous System) quando dispon\u00edveis.</li> <li>N\u00e3o requer autentica\u00e7\u00e3o - utiliza API p\u00fablica do SANS DShield.</li> </ul>"},{"location":"modulos/analyzers/dshield/#instalacao-requisitos","title":"Instala\u00e7\u00e3o / Requisitos","text":"<ul> <li>SDK: utilize as dataclasses do pacote <code>sentineliqsdk</code>.</li> <li>Autentica\u00e7\u00e3o: N\u00e3o necess\u00e1ria (API p\u00fablica).</li> <li>Configura\u00e7\u00f5es opcionais: <code>config.params['dshield']['timeout']</code> para timeout personalizado.</li> </ul>"},{"location":"modulos/analyzers/dshield/#uso-programatico","title":"Uso Program\u00e1tico","text":"<pre><code>from __future__ import annotations\nfrom sentineliqsdk import WorkerInput, WorkerConfig\nfrom sentineliqsdk.analyzers.dshield import DShieldAnalyzer\n\ninp = WorkerInput(\n    data_type=\"ip\",\n    data=\"1.2.3.4\",\n    config=WorkerConfig(\n        params={\"dshield\": {\"timeout\": 30}},  # opcional\n    ),\n)\nreport = DShieldAnalyzer(inp).execute()\nprint(report.full_report[\"verdict\"], report.full_report[\"taxonomy\"][0])\n</code></pre>"},{"location":"modulos/analyzers/dshield/#exemplo-cli","title":"Exemplo (CLI)","text":"<p>Exemplo execut\u00e1vel na pasta <code>examples/</code> (dry\u2011run por padr\u00e3o; use <code>--execute</code> para chamar a API):</p> <pre><code>python examples/analyzers/dshield_example.py --ip 1.2.3.4           # dry-run\npython examples/analyzers/dshield_example.py --ip 1.2.3.4 --execute  # real\n</code></pre> <p>Arquivo: <code>examples/analyzers/dshield_example.py</code></p>"},{"location":"modulos/analyzers/dshield/#taxonomia","title":"Taxonomia","text":"<ul> <li><code>safe/suspicious/malicious</code> conforme c\u00e1lculo de risco baseado em:</li> <li>Contadores de ataques (<code>attacks</code>)</li> <li>N\u00famero de relat\u00f3rios (<code>reports</code>)</li> <li>Feeds de amea\u00e7as dispon\u00edveis</li> <li>Campos gerados:</li> <li><code>risk-level</code> (safe/suspicious/malicious)</li> <li><code>attack-count</code> (info)</li> <li><code>report-count</code> (info)</li> <li><code>threat-feeds</code> (info se dispon\u00edvel)</li> </ul>"},{"location":"modulos/analyzers/dshield/#calculo-de-risco","title":"C\u00e1lculo de Risco","text":"<p>O analyzer utiliza uma l\u00f3gica de scoring baseada em:</p> <ol> <li>Contadores de ataques: IPs com mais de 10 ataques s\u00e3o considerados suspeitos</li> <li>N\u00famero de relat\u00f3rios: IPs com mais de 5 relat\u00f3rios s\u00e3o considerados suspeitos</li> <li>Combina\u00e7\u00e3o: IPs com ambos os indicadores s\u00e3o considerados maliciosos</li> <li>Feeds de amea\u00e7as: Presen\u00e7a em feeds aumenta o n\u00edvel de risco</li> </ol>"},{"location":"modulos/analyzers/dshield/#artefatos-extraidos","title":"Artefatos Extra\u00eddos","text":"<ul> <li>ASN: N\u00famero do Sistema Aut\u00f4nomo quando dispon\u00edvel</li> <li>Informa\u00e7\u00f5es AS: Detalhes do provedor/organiza\u00e7\u00e3o</li> </ul>"},{"location":"modulos/analyzers/dshield/#metadata","title":"Metadata","text":"<p>O analisador inclui <code>full_report.metadata</code> com:</p> <pre><code>{\n  \"Name\": \"DShield Analyzer\",\n  \"Description\": \"Consulta reputa\u00e7\u00e3o de IPs na API SANS DShield\",\n  \"Author\": [\"SentinelIQ Team &lt;team@sentineliq.com.br&gt;\"],\n  \"License\": \"SentinelIQ License\",\n  \"pattern\": \"threat-intel\",\n  \"doc_pattern\": \"MkDocs module page; programmatic usage\",\n  \"doc\": \"https://killsearch.github.io/sentineliqsdk/modulos/analyzers/dshield/\",\n  \"VERSION\": \"TESTING\"\n}\n</code></pre>"},{"location":"modulos/analyzers/dshield/#limitacoes","title":"Limita\u00e7\u00f5es","text":"<ul> <li>Suporta apenas an\u00e1lise de IPs individuais</li> <li>Depende da disponibilidade da API p\u00fablica do SANS DShield</li> <li>N\u00e3o possui rate limiting interno (recomenda-se uso respons\u00e1vel)</li> </ul>"},{"location":"modulos/analyzers/dshield/#referencias","title":"Refer\u00eancias","text":"<ul> <li>SANS Internet Storm Center</li> <li>DShield API Documentation</li> </ul>"},{"location":"modulos/analyzers/mcap/","title":"MCAP Analyzer","text":"<p>O MCAP Analyzer utiliza a plataforma MCAP (Malware Configuration and Analysis Platform) da CIS Security para analisar observ\u00e1veis e arquivos em busca de indicadores de comprometimento (IOCs).</p>"},{"location":"modulos/analyzers/mcap/#caracteristicas","title":"Caracter\u00edsticas","text":"<ul> <li>An\u00e1lise de observ\u00e1veis: IPs, dom\u00ednios, URLs e hashes SHA-256</li> <li>An\u00e1lise de arquivos: Submiss\u00e3o e an\u00e1lise de arquivos maliciosos</li> <li>Feed de IOCs: Consulta de feeds de indicadores conhecidos</li> <li>Configura\u00e7\u00e3o flex\u00edvel: Limites de confian\u00e7a e severidade personaliz\u00e1veis</li> <li>Modo seguro: Dry-run por padr\u00e3o, com flags de seguran\u00e7a</li> </ul>"},{"location":"modulos/analyzers/mcap/#uso-programatico","title":"Uso Program\u00e1tico","text":""},{"location":"modulos/analyzers/mcap/#exemplo-basico","title":"Exemplo B\u00e1sico","text":"<pre><code>from sentineliqsdk import WorkerInput, WorkerConfig\nfrom sentineliqsdk.analyzers.mcap import MCAPAnalyzer\n\n# Configurar credenciais\nsecrets = {\n    \"mcap\": {\n        \"api_key\": \"sua_api_key_aqui\"\n    }\n}\n\n# Configurar par\u00e2metros\nconfig = WorkerConfig(\n    check_tlp=True,\n    max_tlp=2,\n    check_pap=True,\n    max_pap=2,\n    auto_extract=True,\n    # Configura\u00e7\u00f5es espec\u00edficas do MCAP\n    mcap_private_samples=False,\n    mcap_minimum_confidence=80,\n    mcap_minimum_severity=80,\n    mcap_polling_interval=60,\n    mcap_max_sample_result_wait=1000,\n    secrets=secrets\n)\n\n# Criar entrada\ninput_data = WorkerInput(\n    data_type=\"ip\",\n    data=\"1.2.3.4\",\n    tlp=2,\n    pap=2,\n    config=config\n)\n\n# Executar an\u00e1lise\nanalyzer = MCAPAnalyzer(input_data)\nreport = analyzer.execute()\n\nprint(report.full_report)\n</code></pre>"},{"location":"modulos/analyzers/mcap/#analise-de-arquivo","title":"An\u00e1lise de Arquivo","text":"<pre><code># Para an\u00e1lise de arquivo\ninput_data = WorkerInput(\n    data_type=\"file\",\n    data=\"/caminho/para/arquivo.exe\",\n    tlp=2,\n    pap=2,\n    config=config\n)\n\nanalyzer = MCAPAnalyzer(input_data)\nreport = analyzer.execute()\n\n# O relat\u00f3rio incluir\u00e1 o status da amostra e IOCs encontrados\nprint(f\"Status: {report.full_report['sample_status']['state']}\")\nprint(f\"IOCs encontrados: {report.full_report['ioc_count']}\")\n</code></pre>"},{"location":"modulos/analyzers/mcap/#analise-de-diferentes-tipos-de-observaveis","title":"An\u00e1lise de Diferentes Tipos de Observ\u00e1veis","text":"<pre><code># IP\nip_data = WorkerInput(data_type=\"ip\", data=\"1.2.3.4\", config=config)\nip_report = MCAPAnalyzer(ip_data).execute()\n\n# Dom\u00ednio\ndomain_data = WorkerInput(data_type=\"domain\", data=\"example.com\", config=config)\ndomain_report = MCAPAnalyzer(domain_data).execute()\n\n# URL\nurl_data = WorkerInput(data_type=\"url\", data=\"https://example.com/malware\", config=config)\nurl_report = MCAPAnalyzer(url_data).execute()\n\n# Hash SHA-256\nhash_data = WorkerInput(data_type=\"hash\", data=\"a\" * 64, config=config)\nhash_report = MCAPAnalyzer(hash_data).execute()\n</code></pre>"},{"location":"modulos/analyzers/mcap/#configuracao","title":"Configura\u00e7\u00e3o","text":""},{"location":"modulos/analyzers/mcap/#parametros-de-configuracao","title":"Par\u00e2metros de Configura\u00e7\u00e3o","text":"Par\u00e2metro Tipo Padr\u00e3o Descri\u00e7\u00e3o <code>mcap.api_key</code> str - Chave da API MCAP (obrigat\u00f3rio) <code>mcap.private_samples</code> bool False Marcar amostras como privadas <code>mcap.minimum_confidence</code> int 80 Limite m\u00ednimo de confian\u00e7a <code>mcap.minimum_severity</code> int 80 Limite m\u00ednimo de severidade <code>mcap.polling_interval</code> int 60 Intervalo de polling em segundos <code>mcap.max_sample_result_wait</code> int 1000 Tempo m\u00e1ximo de espera em segundos"},{"location":"modulos/analyzers/mcap/#configuracao-de-proxy","title":"Configura\u00e7\u00e3o de Proxy","text":"<pre><code>config = WorkerConfig(\n    # ... outras configura\u00e7\u00f5es ...\n    proxy=ProxyConfig(\n        http=\"http://proxy:8080\",\n        https=\"https://proxy:8080\"\n    )\n)\n</code></pre>"},{"location":"modulos/analyzers/mcap/#estrutura-do-relatorio","title":"Estrutura do Relat\u00f3rio","text":""},{"location":"modulos/analyzers/mcap/#relatorio-de-observavel","title":"Relat\u00f3rio de Observ\u00e1vel","text":"<pre><code>{\n  \"success\": true,\n  \"summary\": {\"ioc_count\": 2},\n  \"artifacts\": [],\n  \"operations\": [],\n  \"full_report\": {\n    \"observable\": \"1.2.3.4\",\n    \"data_type\": \"ip\",\n    \"iocs\": [\n      {\n        \"ip\": \"1.2.3.4\",\n        \"confidence\": 90,\n        \"severity\": 85\n      }\n    ],\n    \"ioc_count\": 1,\n    \"taxonomy\": [\n      {\n        \"level\": \"malicious\",\n        \"namespace\": \"CISMCAP\",\n        \"predicate\": \"IOC count\",\n        \"value\": \"1\"\n      }\n    ],\n    \"metadata\": {\n      \"name\": \"MCAP Analyzer\",\n      \"description\": \"Analyzes observables using MCAP...\",\n      \"version_stage\": \"TESTING\"\n    }\n  }\n}\n</code></pre>"},{"location":"modulos/analyzers/mcap/#relatorio-de-arquivo","title":"Relat\u00f3rio de Arquivo","text":"<pre><code>{\n  \"success\": true,\n  \"summary\": {\"ioc_count\": 3},\n  \"artifacts\": [],\n  \"operations\": [],\n  \"full_report\": {\n    \"observable\": \"/path/to/file.exe\",\n    \"data_type\": \"file\",\n    \"sample_status\": {\n      \"id\": \"sample_id\",\n      \"state\": \"succ\",\n      \"sha256\": \"a1b2c3...\",\n      \"filename\": \"file.exe\"\n    },\n    \"iocs\": [...],\n    \"ioc_count\": 3,\n    \"taxonomy\": [...],\n    \"metadata\": {...}\n  }\n}\n</code></pre>"},{"location":"modulos/analyzers/mcap/#niveis-de-taxonomia","title":"N\u00edveis de Taxonomia","text":"<ul> <li><code>malicious</code>: IOCs encontrados (ioc_count &gt; 0)</li> <li><code>safe</code>: Nenhum IOC encontrado (ioc_count = 0)</li> </ul>"},{"location":"modulos/analyzers/mcap/#tratamento-de-erros","title":"Tratamento de Erros","text":"<p>O analisador trata os seguintes erros:</p> <ul> <li>API Key ausente: Erro fatal se n\u00e3o fornecida</li> <li>Tipo de dados n\u00e3o suportado: Erro para tipos n\u00e3o suportados</li> <li>Hash inv\u00e1lido: Erro para hashes que n\u00e3o sejam SHA-256</li> <li>Arquivo n\u00e3o encontrado: Erro se o arquivo n\u00e3o existir</li> <li>Timeout de an\u00e1lise: Erro se a an\u00e1lise demorar muito</li> <li>Falha na API: Erro com detalhes da resposta da API</li> </ul>"},{"location":"modulos/analyzers/mcap/#exemplo-de-uso-via-linha-de-comando","title":"Exemplo de Uso via Linha de Comando","text":"<pre><code># An\u00e1lise de IP (modo dry-run)\npython examples/analyzers/mcap_example.py --data-type ip --data \"1.2.3.4\"\n\n# An\u00e1lise real de IP\npython examples/analyzers/mcap_example.py --data-type ip --data \"1.2.3.4\" --execute\n\n# An\u00e1lise de arquivo (requer flag de perigo)\npython examples/analyzers/mcap_example.py --data-type file --file \"malware.exe\" --execute --include-dangerous\n\n# Com configura\u00e7\u00f5es personalizadas\npython examples/analyzers/mcap_example.py --data-type domain --data \"example.com\" --execute --api-key \"sua_key\" --minimum-confidence 90\n</code></pre>"},{"location":"modulos/analyzers/mcap/#requisitos","title":"Requisitos","text":"<ul> <li>Python 3.13+</li> <li>Chave da API MCAP</li> <li>Conex\u00e3o com a internet</li> <li>Para an\u00e1lise de arquivos: permiss\u00f5es de leitura do arquivo</li> </ul>"},{"location":"modulos/analyzers/mcap/#limitacoes","title":"Limita\u00e7\u00f5es","text":"<ul> <li>Apenas hashes SHA-256 s\u00e3o suportados para an\u00e1lise de hash</li> <li>An\u00e1lise de arquivos pode demorar v\u00e1rios minutos</li> <li>Requer chave da API v\u00e1lida</li> <li>Limites de taxa podem se aplicar dependendo do plano da API</li> </ul>"},{"location":"modulos/analyzers/shodan/","title":"Shodan Analyzer","text":"<p>O Shodan Analyzer consulta a API do Shodan para enriquecer IPs e dom\u00ednios/FQDNs, al\u00e9m de expor chamadas din\u00e2micas a diversos endpoints do cliente Shodan.</p>"},{"location":"modulos/analyzers/shodan/#visao-geral","title":"Vis\u00e3o Geral","text":"<ul> <li>Analisa <code>ip</code>, <code>domain</code> e <code>fqdn</code> diretamente, retornando um <code>AnalyzerReport</code> com   <code>verdict</code>, <code>taxonomy</code> e <code>details</code>.</li> <li>Suporta chamadas din\u00e2micas a m\u00e9todos do cliente via:</li> <li><code>shodan.method</code> e <code>shodan.params</code> (dict) em <code>WorkerConfig.params</code></li> <li>ou <code>data_type == \"other\"</code> com <code>data</code> em JSON: <code>{\"method\": \"...\", \"params\": {...}}</code></li> </ul>"},{"location":"modulos/analyzers/shodan/#como-funciona","title":"Como Funciona","text":"<ul> <li>IP: usa <code>host_information</code> e coleta cat\u00e1logos (<code>ports</code>, <code>protocols</code>).</li> <li>Dom\u00ednio/FQDN: usa <code>dns_domain</code>, resolve IPs com <code>dns_resolve</code> e busca <code>host_information</code>   minificado para cada IP resolvido.</li> <li>Heur\u00edstica de veredito: marca como <code>malicious</code> se houver tag <code>malware</code>, <code>suspicious</code> se   houver vulnerabilidades; caso contr\u00e1rio, <code>safe</code>.</li> <li>Rede: utiliza <code>httpx</code>; proxies s\u00e3o honrados via <code>WorkerConfig.proxy</code>.</li> </ul>"},{"location":"modulos/analyzers/shodan/#metodos-suportados-dinamico","title":"M\u00e9todos Suportados (din\u00e2mico)","text":"<p>Permitidos via <code>method</code>:</p> <ul> <li>host_information, search_host_count, search_host, search_host_facets, search_host_filters,   search_host_tokens, ports, protocols</li> <li>scan, scan_internet, scans, scan_by_id</li> <li>alert_create, alert_info, alert_delete, alert_edit, alerts, alert_triggers,   alert_enable_trigger, alert_disable_trigger, alert_whitelist_service,   alert_unwhitelist_service, alert_add_notifier, alert_remove_notifier</li> <li>notifiers, notifier_providers, notifier_create, notifier_delete, notifier_get, notifier_update</li> <li>queries, query_search, query_tags</li> <li>data_datasets, data_dataset</li> <li>org, org_member_update, org_member_remove</li> <li>account_profile</li> <li>dns_domain, dns_resolve, dns_reverse</li> <li>tools_httpheaders, tools_myip, api_info</li> </ul>"},{"location":"modulos/analyzers/shodan/#instanciacao","title":"Instancia\u00e7\u00e3o","text":"<pre><code>from __future__ import annotations\nimport json\nfrom sentineliqsdk import WorkerInput\nfrom sentineliqsdk.analyzers.shodan import ShodanAnalyzer\n\n# IP\ninp = WorkerInput(data_type=\"ip\", data=\"1.2.3.4\")\nreport = ShodanAnalyzer(inp).execute()\n\n# Dom\u00ednio\ninp = WorkerInput(data_type=\"domain\", data=\"example.com\")\nreport = ShodanAnalyzer(inp).execute()\n\n# Din\u00e2mico (data payload)\npayload = {\"method\": \"search_host\", \"params\": {\"query\": \"port:22\"}}\ninp = WorkerInput(data_type=\"other\", data=json.dumps(payload))\nreport = ShodanAnalyzer(inp).execute()\n</code></pre>"},{"location":"modulos/analyzers/shodan/#configuracao","title":"Configura\u00e7\u00e3o","text":"<ul> <li>Autentica\u00e7\u00e3o: <code>shodan.api_key</code> em <code>WorkerConfig.secrets</code></li> <li>Chamada din\u00e2mica: <code>shodan.method</code> e <code>shodan.params</code> (dict) em <code>WorkerConfig.params</code></li> <li>Proxies: <code>WorkerInput.config.proxy.http/https</code></li> </ul> <p>Exemplo (dataclasses):</p> <pre><code>from sentineliqsdk import WorkerInput, WorkerConfig, ProxyConfig\nfrom sentineliqsdk.analyzers.shodan import ShodanAnalyzer\n\ninp = WorkerInput(\n    data_type=\"ip\",\n    data=\"1.2.3.4\",\n    config=WorkerConfig(\n        proxy=ProxyConfig(http=None, https=None),\n        secrets={\"shodan\": {\"api_key\": \"SUA-CHAVE\"}},\n        params={\"shodan\": {\"method\": None, \"params\": {}}},\n    ),\n)\nreport = ShodanAnalyzer(inp).execute()\n</code></pre> <p>Nota: n\u00e3o h\u00e1 suporte por vari\u00e1veis de ambiente.</p>"},{"location":"modulos/analyzers/shodan/#uso-correto","title":"Uso Correto","text":"<ul> <li>Para IP/Dom\u00ednio/FQDN, use <code>data_type</code> correspondente; para chamadas arbitr\u00e1rias, use   <code>data_type == \"other\"</code> com JSON v\u00e1lido.</li> <li>Em chamadas din\u00e2micas, valide <code>method</code> com a lista permitida e forne\u00e7a <code>params</code> como objeto.</li> </ul>"},{"location":"modulos/analyzers/shodan/#retorno","title":"Retorno","text":"<ul> <li><code>AnalyzerReport</code> com <code>full_report</code> contendo:</li> <li><code>observable</code>, <code>verdict</code>, <code>taxonomy</code>, <code>source</code>, <code>data_type</code>, <code>details</code></li> </ul>"},{"location":"modulos/analyzers/shodan/#metadata","title":"Metadata","text":"<p>O analisador inclui <code>full_report.metadata</code> com:</p> <pre><code>{\n  \"Name\": \"Shodan Analyzer\",\n  \"Description\": \"Query Shodan for IP/domain intel and dynamic API calls\",\n  \"Author\": [\"SentinelIQ Team &lt;team@sentineliq.com.br&gt;\"],\n  \"License\": \"SentinelIQ License\",\n  \"pattern\": \"threat-intel\",\n  \"doc_pattern\": \"MkDocs module page; programmatic usage documented\",\n  \"doc\": \"https://killsearch.github.io/sentineliqsdk/modulos/analyzers/shodan/\",\n  \"VERSION\": \"STABLE\"\n}\n</code></pre>"},{"location":"modulos/clients/axur/","title":"Axur Client","text":"<p>The <code>AxurClient</code> provides a comprehensive HTTP client for interacting with the Axur Platform API. It implements all documented routes generically and includes convenience wrappers for common operations.</p>"},{"location":"modulos/clients/axur/#overview","title":"Overview","text":"<p>The Axur client is built on top of <code>httpx</code> and provides:</p> <ul> <li>Generic API calls via the <code>call()</code> method for any HTTP method/path</li> <li>Convenience wrappers for common API operations</li> <li>Automatic authentication using Bearer token</li> <li>Proxy support via environment variables</li> <li>Dry-run capability for testing without making actual requests</li> </ul>"},{"location":"modulos/clients/axur/#authentication","title":"Authentication","text":"<p>The client requires an Axur API token for authentication:</p> <pre><code>from sentineliqsdk.clients.axur import AxurClient\n\nclient = AxurClient(api_token=\"your-axur-api-token\")\n</code></pre>"},{"location":"modulos/clients/axur/#basic-usage","title":"Basic Usage","text":""},{"location":"modulos/clients/axur/#generic-api-calls","title":"Generic API Calls","text":"<p>Use the <code>call()</code> method for any API endpoint:</p> <pre><code># GET request\nresponse = client.call(\"GET\", \"/customers/customers\")\n\n# POST request with JSON body\nresponse = client.call(\n    \"POST\", \n    \"/tickets-api/tickets\",\n    RequestOptions(json_body={\"title\": \"New Ticket\", \"description\": \"Issue description\"})\n)\n\n# GET request with query parameters\nresponse = client.call(\n    \"GET\",\n    \"/identity/users\",\n    RequestOptions(query={\"pageSize\": 50, \"offset\": 0})\n)\n</code></pre>"},{"location":"modulos/clients/axur/#dry-run-mode","title":"Dry Run Mode","text":"<p>Test your requests without making actual API calls:</p> <pre><code>response = client.call(\n    \"GET\",\n    \"/tickets-api/tickets\",\n    RequestOptions(dry_run=True)\n)\n# Returns: {\"dry_run\": True, \"method\": \"GET\", \"url\": \"...\", \"headers\": {...}, \"body\": None}\n</code></pre>"},{"location":"modulos/clients/axur/#convenience-methods","title":"Convenience Methods","text":""},{"location":"modulos/clients/axur/#user-management","title":"User Management","text":"<pre><code># Get list of customers\ncustomers = client.customers()\n\n# Get users with filters\nusers = client.users(\n    customers=\"customer-id\",\n    access_to_areas=\"area-name\",\n    free_text=\"search term\",\n    page_size=100\n)\n\n# Get user stream\nuser_stream = client.users_stream(\n    customers=\"customer-id\",\n    page_size=50\n)\n</code></pre>"},{"location":"modulos/clients/axur/#ticket-operations","title":"Ticket Operations","text":"<pre><code># Search tickets\ntickets = client.tickets_search({\n    \"status\": \"open\",\n    \"priority\": \"high\",\n    \"page\": 1\n})\n\n# Create a new ticket\nnew_ticket = client.ticket_create({\n    \"title\": \"Security Alert\",\n    \"description\": \"Suspicious activity detected\",\n    \"priority\": \"high\"\n})\n\n# Get specific ticket\nticket = client.ticket_get(\"TICKET-123\")\n\n# Get ticket texts\ntexts = client.ticket_texts(\"TICKET-123\")\n\n# Get tickets by keys\ntickets = client.tickets_by_keys(\"TICKET-123,TICKET-456\")\n</code></pre>"},{"location":"modulos/clients/axur/#filter-operations","title":"Filter Operations","text":"<pre><code># Create a filter\nfilter_result = client.filter_create({\n    \"name\": \"High Priority Tickets\",\n    \"query\": \"priority:high AND status:open\"\n})\n\n# Get filter results\nresults = client.filter_results(\n    query_id=\"filter-id\",\n    page=1,\n    page_size=50,\n    sort_by=\"created_date\",\n    order=\"desc\"\n)\n</code></pre>"},{"location":"modulos/clients/axur/#integration-feeds","title":"Integration Feeds","text":"<pre><code># Get integration feed\nfeed = client.integration_feed(\"feed-id\")\n\n# Get integration feed with dry-run parameter\nfeed = client.integration_feed(\"feed-id\", dry_run_param=True)\n</code></pre>"},{"location":"modulos/clients/axur/#ticket-types","title":"Ticket Types","text":"<pre><code># Get available ticket types\ntypes = client.ticket_types()\n</code></pre>"},{"location":"modulos/clients/axur/#configuration","title":"Configuration","text":""},{"location":"modulos/clients/axur/#custom-base-url","title":"Custom Base URL","text":"<pre><code>client = AxurClient(\n    api_token=\"your-token\",\n    base_url=\"https://custom.axur.com/api\"\n)\n</code></pre>"},{"location":"modulos/clients/axur/#timeout-settings","title":"Timeout Settings","text":"<pre><code>client = AxurClient(\n    api_token=\"your-token\",\n    timeout=60.0  # 60 seconds timeout\n)\n</code></pre>"},{"location":"modulos/clients/axur/#custom-user-agent","title":"Custom User Agent","text":"<pre><code>client = AxurClient(\n    api_token=\"your-token\",\n    user_agent=\"MyApp/1.0\"\n)\n</code></pre>"},{"location":"modulos/clients/axur/#error-handling","title":"Error Handling","text":"<p>The client raises <code>httpx.HTTPStatusError</code> for HTTP errors (status &gt;= 400):</p> <pre><code>from httpx import HTTPStatusError\n\ntry:\n    response = client.ticket_get(\"INVALID-TICKET\")\nexcept HTTPStatusError as e:\n    print(f\"HTTP Error: {e}\")\n    print(f\"Status Code: {e.response.status_code}\")\n    print(f\"Response: {e.response.text}\")\n</code></pre>"},{"location":"modulos/clients/axur/#proxy-support","title":"Proxy Support","text":"<p>The client automatically respects HTTP proxy settings from environment variables:</p> <pre><code>import os\n\n# Set proxy via environment\nos.environ[\"http_proxy\"] = \"http://proxy.company.com:8080\"\nos.environ[\"https_proxy\"] = \"https://proxy.company.com:8080\"\n\n# Client will automatically use these proxies\nclient = AxurClient(api_token=\"your-token\")\n</code></pre>"},{"location":"modulos/clients/axur/#request-options","title":"Request Options","text":"<p>The <code>RequestOptions</code> dataclass provides fine-grained control over requests:</p> <pre><code>from sentineliqsdk.clients.axur import RequestOptions\n\noptions = RequestOptions(\n    query={\"page\": 1, \"size\": 50},           # Query parameters\n    headers={\"X-Custom-Header\": \"value\"},    # Custom headers\n    json_body={\"key\": \"value\"},              # JSON request body\n    data={\"form\": \"data\"},                   # Form data\n    dry_run=True                             # Dry run mode\n)\n\nresponse = client.call(\"POST\", \"/endpoint\", options)\n</code></pre>"},{"location":"modulos/clients/axur/#response-handling","title":"Response Handling","text":"<p>The client automatically parses JSON responses and returns the appropriate data type:</p> <pre><code># JSON responses return dict/list\njson_response = client.customers()  # Returns dict or list\n\n# Non-JSON responses return string\ntext_response = client.call(\"GET\", \"/endpoint/that/returns/text\")\n</code></pre>"},{"location":"modulos/clients/axur/#rate-limiting","title":"Rate Limiting","text":"<p>The Axur API has rate limits. The client doesn't implement automatic rate limiting, so you should handle this in your application:</p> <pre><code>import time\n\ndef make_request_with_retry(client, method, path, max_retries=3):\n    for attempt in range(max_retries):\n        try:\n            return client.call(method, path)\n        except HTTPStatusError as e:\n            if e.response.status_code == 429:  # Rate limited\n                time.sleep(2 ** attempt)  # Exponential backoff\n                continue\n            raise\n    raise Exception(\"Max retries exceeded\")\n</code></pre>"},{"location":"modulos/clients/axur/#complete-example","title":"Complete Example","text":"<pre><code>from sentineliqsdk.clients.axur import AxurClient, RequestOptions\n\ndef main():\n    # Initialize client\n    client = AxurClient(api_token=\"your-axur-api-token\")\n\n    try:\n        # Get customers\n        customers = client.customers()\n        print(f\"Found {len(customers)} customers\")\n\n        # Search for high priority tickets\n        tickets = client.tickets_search({\n            \"priority\": \"high\",\n            \"status\": \"open\",\n            \"page\": 1\n        })\n        print(f\"Found {len(tickets.get('results', []))} high priority tickets\")\n\n        # Create a new ticket\n        new_ticket = client.ticket_create({\n            \"title\": \"Security Investigation\",\n            \"description\": \"Automated security alert from SentinelIQ\",\n            \"priority\": \"medium\",\n            \"type\": \"security\"\n        })\n        print(f\"Created ticket: {new_ticket.get('key')}\")\n\n    except Exception as e:\n        print(f\"Error: {e}\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"modulos/clients/axur/#api-reference","title":"API Reference","text":""},{"location":"modulos/clients/axur/#axurclient","title":"AxurClient","text":""},{"location":"modulos/clients/axur/#sentineliqsdk.clients.axur.AxurClient","title":"sentineliqsdk.clients.axur.AxurClient  <code>dataclass</code>","text":"<p>Minimal Axur HTTP client with generic and convenience methods.</p> <ul> <li>Use <code>call()</code> to perform any HTTP method/path with optional query/body</li> <li>Convenience wrappers implement the most common API operations</li> </ul> Source code in <code>src/sentineliqsdk/clients/axur.py</code> <pre><code>@dataclass(frozen=True)\nclass AxurClient:\n    \"\"\"Minimal Axur HTTP client with generic and convenience methods.\n\n    - Use ``call()`` to perform any HTTP method/path with optional query/body\n    - Convenience wrappers implement the most common API operations\n    \"\"\"\n\n    api_token: str\n    base_url: str = \"https://api.axur.com/gateway/1.0/api\"\n    timeout: float = 30.0\n    user_agent: str = \"sentineliqsdk-axur/1.0\"\n\n    # --- Core HTTP helpers ---\n    def _request(\n        self,\n        method: str,\n        path: str,\n        options: RequestOptions | None = None,\n    ) -&gt; Any:\n        if options is None:\n            options = RequestOptions()\n\n        url = self._build_url(path, options.query)\n        req_headers = self._build_headers(options.headers)\n\n        # If dry-run, just return the request plan\n        if options.dry_run:\n            return self._build_dry_run_response(method, url, req_headers, options)\n\n        request_kwargs = self._build_request_kwargs(req_headers, options)\n        return self._execute_request(method, url, request_kwargs)\n\n    def _build_url(self, path: str, query: Mapping[str, Any] | None) -&gt; str:\n        \"\"\"Build the complete URL with query parameters.\"\"\"\n        url = self.base_url.rstrip(\"/\") + (\"/\" + path.lstrip(\"/\"))\n        return _merge_query(url, query)\n\n    def _build_headers(self, custom_headers: Mapping[str, str] | None) -&gt; dict[str, str]:\n        \"\"\"Build request headers.\"\"\"\n        req_headers = {\"User-Agent\": self.user_agent, \"Authorization\": f\"Bearer {self.api_token}\"}\n        if custom_headers:\n            req_headers.update(custom_headers)\n        return req_headers\n\n    def _build_dry_run_response(\n        self, method: str, url: str, req_headers: dict[str, str], options: RequestOptions\n    ) -&gt; dict[str, Any]:\n        \"\"\"Build dry-run response.\"\"\"\n        return {\n            \"dry_run\": True,\n            \"method\": method.upper(),\n            \"url\": url,\n            \"headers\": dict(req_headers),\n            \"body\": (\n                options.json_body\n                if options.json_body is not None\n                else (options.data if isinstance(options.data, dict | tuple) else None)\n            ),\n        }\n\n    def _build_request_kwargs(\n        self, req_headers: dict[str, str], options: RequestOptions\n    ) -&gt; dict[str, Any]:\n        \"\"\"Build request kwargs for httpx.\"\"\"\n        request_kwargs: dict[str, Any] = {\"headers\": req_headers}\n        if options.json_body is not None:\n            request_kwargs[\"json\"] = options.json_body\n        elif isinstance(options.data, dict | tuple):\n            request_kwargs[\"data\"] = urllib.parse.urlencode(options.data)\n            req_headers.setdefault(\n                \"Content-Type\", \"application/x-www-form-urlencoded; charset=utf-8\"\n            )\n        elif isinstance(options.data, bytes):\n            request_kwargs[\"content\"] = options.data\n        return request_kwargs\n\n    def _execute_request(self, method: str, url: str, request_kwargs: dict[str, Any]) -&gt; Any:\n        \"\"\"Execute the HTTP request and return parsed response.\"\"\"\n        with httpx.Client(timeout=self.timeout) as client:\n            resp = client.request(method.upper(), url, **request_kwargs)\n            http_client_error = 400\n            if resp.status_code &gt;= http_client_error:\n                msg = f\"HTTP {resp.status_code} for {resp.request.method} {resp.request.url}: {resp.text}\"\n                raise httpx.HTTPStatusError(msg, request=resp.request, response=resp)\n            ctype = resp.headers.get(\"Content-Type\", \"application/json\")\n            if not resp.content:\n                return None\n            if \"json\" in ctype:\n                try:\n                    return resp.json()\n                except json.JSONDecodeError:\n                    return resp.text\n            return resp.text\n\n    # Public generic method\n    def call(\n        self,\n        method: str,\n        path: str,\n        options: RequestOptions | None = None,\n    ) -&gt; Any:\n        \"\"\"Make a generic API call to Axur.\"\"\"\n        return self._request(method=method, path=path, options=options)\n\n    # --- Convenience wrappers (selected) ---\n    def customers(self) -&gt; Any:\n        \"\"\"Get list of customers.\"\"\"\n        return self._request(\"GET\", \"/customers/customers\")\n\n    def users(\n        self,\n        *,\n        customers: str | None = None,\n        access_to_areas: str | None = None,\n        free_text: str | None = None,\n        offset: int | None = None,\n        page_size: int | None = None,\n    ) -&gt; Any:\n        \"\"\"Get list of users with optional filters.\"\"\"\n        return self._request(\n            \"GET\",\n            \"/identity/users\",\n            RequestOptions(\n                query={\n                    \"customers\": customers,\n                    \"accessToAreas\": access_to_areas,\n                    \"freeText\": free_text,\n                    \"offset\": offset,\n                    \"pageSize\": page_size,\n                }\n            ),\n        )\n\n    def users_stream(\n        self,\n        *,\n        customers: str | None = None,\n        access_to_areas: str | None = None,\n        free_text: str | None = None,\n        offset: int | None = None,\n        page_size: int | None = None,\n    ) -&gt; Any:\n        \"\"\"Get stream of users with optional filters.\"\"\"\n        return self._request(\n            \"GET\",\n            \"/identity/users/stream\",\n            RequestOptions(\n                query={\n                    \"customers\": customers,\n                    \"accessToAreas\": access_to_areas,\n                    \"freeText\": free_text,\n                    \"offset\": offset,\n                    \"pageSize\": page_size,\n                }\n            ),\n        )\n\n    def tickets_search(self, query_params: Mapping[str, Any]) -&gt; Any:\n        \"\"\"Search tickets with query parameters.\"\"\"\n        return self._request(\"GET\", \"/tickets-api/tickets\", RequestOptions(query=query_params))\n\n    def ticket_create(self, payload: Mapping[str, Any]) -&gt; Any:\n        \"\"\"Create a new ticket.\"\"\"\n        return self._request(\"POST\", \"/tickets-api/tickets\", RequestOptions(json_body=payload))\n\n    def tickets_by_keys(\n        self, keys: str, *, timezone: str | None = None, include: str | None = None\n    ) -&gt; Any:\n        \"\"\"Get tickets by their keys.\"\"\"\n        return self._request(\n            \"GET\",\n            \"/tickets-api/ticket\",\n            RequestOptions(query={\"keys\": keys, \"timezone\": timezone, \"include\": include}),\n        )\n\n    def filter_create(self, filter_body: Mapping[str, Any]) -&gt; Any:\n        \"\"\"Create a new filter.\"\"\"\n        return self._request(\n            \"POST\", \"/tickets-filters/filters/tickets\", RequestOptions(json_body=filter_body)\n        )\n\n    def filter_results(\n        self,\n        query_id: str,\n        *,\n        page: int | None = None,\n        page_size: int | None = None,\n        sort_by: str | None = None,\n        order: str | None = None,\n    ) -&gt; Any:\n        \"\"\"Get filter results.\"\"\"\n        return self._request(\n            \"GET\",\n            \"/tickets-filters/filters/tickets\",\n            RequestOptions(\n                query={\n                    \"q\": query_id,\n                    \"page\": page,\n                    \"pageSize\": page_size,\n                    \"sortBy\": sort_by,\n                    \"order\": order,\n                }\n            ),\n        )\n\n    def ticket_get(self, ticket_key: str) -&gt; Any:\n        \"\"\"Get a specific ticket by key.\"\"\"\n        return self._request(\"GET\", f\"/tickets-core/tickets/{urllib.parse.quote(ticket_key)}\")\n\n    def ticket_types(self) -&gt; Any:\n        \"\"\"Get available ticket types.\"\"\"\n        return self._request(\"GET\", \"/tickets-core/fields/types\")\n\n    def ticket_texts(self, ticket_key: str) -&gt; Any:\n        \"\"\"Get ticket texts by key.\"\"\"\n        return self._request(\n            \"GET\", f\"/tickets-texts/texts/tickets/{urllib.parse.quote(ticket_key)}\"\n        )\n\n    def integration_feed(self, feed_id: str, *, dry_run_param: bool | None = None) -&gt; Any:\n        \"\"\"Get integration feed by ID.\"\"\"\n        return self._request(\n            \"GET\",\n            f\"/integration-feed/feeds/feed/{urllib.parse.quote(feed_id)}\",\n            RequestOptions(query={\"dry-run\": dry_run_param} if dry_run_param is not None else None),\n        )\n</code></pre>"},{"location":"modulos/clients/axur/#sentineliqsdk.clients.axur.AxurClient.call","title":"call","text":"<pre><code>call(\n    method: str,\n    path: str,\n    options: RequestOptions | None = None,\n) -&gt; Any\n</code></pre> <p>Make a generic API call to Axur.</p> Source code in <code>src/sentineliqsdk/clients/axur.py</code> <pre><code>def call(\n    self,\n    method: str,\n    path: str,\n    options: RequestOptions | None = None,\n) -&gt; Any:\n    \"\"\"Make a generic API call to Axur.\"\"\"\n    return self._request(method=method, path=path, options=options)\n</code></pre>"},{"location":"modulos/clients/axur/#sentineliqsdk.clients.axur.AxurClient.customers","title":"customers","text":"<pre><code>customers() -&gt; Any\n</code></pre> <p>Get list of customers.</p> Source code in <code>src/sentineliqsdk/clients/axur.py</code> <pre><code>def customers(self) -&gt; Any:\n    \"\"\"Get list of customers.\"\"\"\n    return self._request(\"GET\", \"/customers/customers\")\n</code></pre>"},{"location":"modulos/clients/axur/#sentineliqsdk.clients.axur.AxurClient.filter_create","title":"filter_create","text":"<pre><code>filter_create(filter_body: Mapping[str, Any]) -&gt; Any\n</code></pre> <p>Create a new filter.</p> Source code in <code>src/sentineliqsdk/clients/axur.py</code> <pre><code>def filter_create(self, filter_body: Mapping[str, Any]) -&gt; Any:\n    \"\"\"Create a new filter.\"\"\"\n    return self._request(\n        \"POST\", \"/tickets-filters/filters/tickets\", RequestOptions(json_body=filter_body)\n    )\n</code></pre>"},{"location":"modulos/clients/axur/#sentineliqsdk.clients.axur.AxurClient.filter_results","title":"filter_results","text":"<pre><code>filter_results(\n    query_id: str,\n    *,\n    page: int | None = None,\n    page_size: int | None = None,\n    sort_by: str | None = None,\n    order: str | None = None,\n) -&gt; Any\n</code></pre> <p>Get filter results.</p> Source code in <code>src/sentineliqsdk/clients/axur.py</code> <pre><code>def filter_results(\n    self,\n    query_id: str,\n    *,\n    page: int | None = None,\n    page_size: int | None = None,\n    sort_by: str | None = None,\n    order: str | None = None,\n) -&gt; Any:\n    \"\"\"Get filter results.\"\"\"\n    return self._request(\n        \"GET\",\n        \"/tickets-filters/filters/tickets\",\n        RequestOptions(\n            query={\n                \"q\": query_id,\n                \"page\": page,\n                \"pageSize\": page_size,\n                \"sortBy\": sort_by,\n                \"order\": order,\n            }\n        ),\n    )\n</code></pre>"},{"location":"modulos/clients/axur/#sentineliqsdk.clients.axur.AxurClient.integration_feed","title":"integration_feed","text":"<pre><code>integration_feed(\n    feed_id: str, *, dry_run_param: bool | None = None\n) -&gt; Any\n</code></pre> <p>Get integration feed by ID.</p> Source code in <code>src/sentineliqsdk/clients/axur.py</code> <pre><code>def integration_feed(self, feed_id: str, *, dry_run_param: bool | None = None) -&gt; Any:\n    \"\"\"Get integration feed by ID.\"\"\"\n    return self._request(\n        \"GET\",\n        f\"/integration-feed/feeds/feed/{urllib.parse.quote(feed_id)}\",\n        RequestOptions(query={\"dry-run\": dry_run_param} if dry_run_param is not None else None),\n    )\n</code></pre>"},{"location":"modulos/clients/axur/#sentineliqsdk.clients.axur.AxurClient.ticket_create","title":"ticket_create","text":"<pre><code>ticket_create(payload: Mapping[str, Any]) -&gt; Any\n</code></pre> <p>Create a new ticket.</p> Source code in <code>src/sentineliqsdk/clients/axur.py</code> <pre><code>def ticket_create(self, payload: Mapping[str, Any]) -&gt; Any:\n    \"\"\"Create a new ticket.\"\"\"\n    return self._request(\"POST\", \"/tickets-api/tickets\", RequestOptions(json_body=payload))\n</code></pre>"},{"location":"modulos/clients/axur/#sentineliqsdk.clients.axur.AxurClient.ticket_get","title":"ticket_get","text":"<pre><code>ticket_get(ticket_key: str) -&gt; Any\n</code></pre> <p>Get a specific ticket by key.</p> Source code in <code>src/sentineliqsdk/clients/axur.py</code> <pre><code>def ticket_get(self, ticket_key: str) -&gt; Any:\n    \"\"\"Get a specific ticket by key.\"\"\"\n    return self._request(\"GET\", f\"/tickets-core/tickets/{urllib.parse.quote(ticket_key)}\")\n</code></pre>"},{"location":"modulos/clients/axur/#sentineliqsdk.clients.axur.AxurClient.ticket_texts","title":"ticket_texts","text":"<pre><code>ticket_texts(ticket_key: str) -&gt; Any\n</code></pre> <p>Get ticket texts by key.</p> Source code in <code>src/sentineliqsdk/clients/axur.py</code> <pre><code>def ticket_texts(self, ticket_key: str) -&gt; Any:\n    \"\"\"Get ticket texts by key.\"\"\"\n    return self._request(\n        \"GET\", f\"/tickets-texts/texts/tickets/{urllib.parse.quote(ticket_key)}\"\n    )\n</code></pre>"},{"location":"modulos/clients/axur/#sentineliqsdk.clients.axur.AxurClient.ticket_types","title":"ticket_types","text":"<pre><code>ticket_types() -&gt; Any\n</code></pre> <p>Get available ticket types.</p> Source code in <code>src/sentineliqsdk/clients/axur.py</code> <pre><code>def ticket_types(self) -&gt; Any:\n    \"\"\"Get available ticket types.\"\"\"\n    return self._request(\"GET\", \"/tickets-core/fields/types\")\n</code></pre>"},{"location":"modulos/clients/axur/#sentineliqsdk.clients.axur.AxurClient.tickets_by_keys","title":"tickets_by_keys","text":"<pre><code>tickets_by_keys(\n    keys: str,\n    *,\n    timezone: str | None = None,\n    include: str | None = None,\n) -&gt; Any\n</code></pre> <p>Get tickets by their keys.</p> Source code in <code>src/sentineliqsdk/clients/axur.py</code> <pre><code>def tickets_by_keys(\n    self, keys: str, *, timezone: str | None = None, include: str | None = None\n) -&gt; Any:\n    \"\"\"Get tickets by their keys.\"\"\"\n    return self._request(\n        \"GET\",\n        \"/tickets-api/ticket\",\n        RequestOptions(query={\"keys\": keys, \"timezone\": timezone, \"include\": include}),\n    )\n</code></pre>"},{"location":"modulos/clients/axur/#sentineliqsdk.clients.axur.AxurClient.tickets_search","title":"tickets_search","text":"<pre><code>tickets_search(query_params: Mapping[str, Any]) -&gt; Any\n</code></pre> <p>Search tickets with query parameters.</p> Source code in <code>src/sentineliqsdk/clients/axur.py</code> <pre><code>def tickets_search(self, query_params: Mapping[str, Any]) -&gt; Any:\n    \"\"\"Search tickets with query parameters.\"\"\"\n    return self._request(\"GET\", \"/tickets-api/tickets\", RequestOptions(query=query_params))\n</code></pre>"},{"location":"modulos/clients/axur/#sentineliqsdk.clients.axur.AxurClient.users","title":"users","text":"<pre><code>users(\n    *,\n    customers: str | None = None,\n    access_to_areas: str | None = None,\n    free_text: str | None = None,\n    offset: int | None = None,\n    page_size: int | None = None,\n) -&gt; Any\n</code></pre> <p>Get list of users with optional filters.</p> Source code in <code>src/sentineliqsdk/clients/axur.py</code> <pre><code>def users(\n    self,\n    *,\n    customers: str | None = None,\n    access_to_areas: str | None = None,\n    free_text: str | None = None,\n    offset: int | None = None,\n    page_size: int | None = None,\n) -&gt; Any:\n    \"\"\"Get list of users with optional filters.\"\"\"\n    return self._request(\n        \"GET\",\n        \"/identity/users\",\n        RequestOptions(\n            query={\n                \"customers\": customers,\n                \"accessToAreas\": access_to_areas,\n                \"freeText\": free_text,\n                \"offset\": offset,\n                \"pageSize\": page_size,\n            }\n        ),\n    )\n</code></pre>"},{"location":"modulos/clients/axur/#sentineliqsdk.clients.axur.AxurClient.users_stream","title":"users_stream","text":"<pre><code>users_stream(\n    *,\n    customers: str | None = None,\n    access_to_areas: str | None = None,\n    free_text: str | None = None,\n    offset: int | None = None,\n    page_size: int | None = None,\n) -&gt; Any\n</code></pre> <p>Get stream of users with optional filters.</p> Source code in <code>src/sentineliqsdk/clients/axur.py</code> <pre><code>def users_stream(\n    self,\n    *,\n    customers: str | None = None,\n    access_to_areas: str | None = None,\n    free_text: str | None = None,\n    offset: int | None = None,\n    page_size: int | None = None,\n) -&gt; Any:\n    \"\"\"Get stream of users with optional filters.\"\"\"\n    return self._request(\n        \"GET\",\n        \"/identity/users/stream\",\n        RequestOptions(\n            query={\n                \"customers\": customers,\n                \"accessToAreas\": access_to_areas,\n                \"freeText\": free_text,\n                \"offset\": offset,\n                \"pageSize\": page_size,\n            }\n        ),\n    )\n</code></pre>"},{"location":"modulos/clients/axur/#requestoptions","title":"RequestOptions","text":""},{"location":"modulos/clients/axur/#sentineliqsdk.clients.axur.RequestOptions","title":"sentineliqsdk.clients.axur.RequestOptions  <code>dataclass</code>","text":"<p>Options for HTTP requests.</p> Source code in <code>src/sentineliqsdk/clients/axur.py</code> <pre><code>@dataclass\nclass RequestOptions:\n    \"\"\"Options for HTTP requests.\"\"\"\n\n    query: Mapping[str, Any] | None = None\n    headers: Mapping[str, str] | None = None\n    data: Mapping[str, Any] | bytes | None = None\n    json_body: Mapping[str, Any] | None = None\n    dry_run: bool = False\n</code></pre>"},{"location":"modulos/clients/axur/#related-documentation","title":"Related Documentation","text":"<ul> <li>Axur Platform API Documentation</li> <li>Axur Analyzer - High-level analyzer using this client</li> <li>HTTPX Client Pattern Guide - General patterns for HTTP clients</li> </ul>"},{"location":"modulos/clients/cluster25/","title":"Cluster25 Client","text":"<p>The <code>Cluster25Client</code> provides a simple interface to the Cluster25 threat intelligence API. It handles authentication and offers a convenience method for indicator investigations.</p>"},{"location":"modulos/clients/cluster25/#configuration","title":"Configuration","text":"<pre><code>from sentineliqsdk.clients.cluster25 import Cluster25Client\n\nclient = Cluster25Client(\n    client_id=\"your-client-id\",\n    client_key=\"your-client-key\",\n    base_url=\"https://api.cluster25.com\",\n    timeout=30,\n    max_retries=3,\n)\n</code></pre> <p>Arguments:</p> <ul> <li><code>client_id</code> / <code>client_key</code>: credentials provided by Cluster25</li> <li><code>base_url</code>: API endpoint, defaults to the Cluster25 URL</li> <li><code>timeout</code>: request timeout in seconds</li> <li><code>max_retries</code>: retry attempts for authentication</li> </ul>"},{"location":"modulos/clients/cluster25/#usage-example","title":"Usage Example","text":"<pre><code>result = client.investigate(\"1.2.3.4\")\nprint(result.get(\"score\"))\n</code></pre>"},{"location":"modulos/clients/cluster25/#api-reference","title":"API Reference","text":""},{"location":"modulos/clients/cluster25/#sentineliqsdk.clients.cluster25.Cluster25Client","title":"sentineliqsdk.clients.cluster25.Cluster25Client","text":"<p>Client for interacting with Cluster25 API.</p> Source code in <code>src/sentineliqsdk/clients/cluster25.py</code> <pre><code>class Cluster25Client:\n    \"\"\"Client for interacting with Cluster25 API.\"\"\"\n\n    def __init__(\n        self,\n        client_id: str,\n        client_key: str,\n        base_url: str,\n        timeout: int = 30,\n        max_retries: int = 3,\n    ):\n        self.client_id = client_id\n        self.client_key = client_key\n        self.base_url = base_url.rstrip(\"/\")\n        self.timeout = timeout\n        self.max_retries = max_retries\n        self.current_token: str | None = None\n        self.headers: dict[str, str] = {}\n\n    def _get_token(self) -&gt; str:\n        \"\"\"Get authentication token from Cluster25 API.\"\"\"\n        if self.current_token:\n            return self.current_token\n\n        payload = {\"client_id\": self.client_id, \"client_secret\": self.client_key}\n\n        try:\n            response = requests.post(\n                url=f\"{self.base_url}/token\",\n                json=payload,\n                headers={\"Content-Type\": \"application/json\"},\n                timeout=self.timeout,\n            )\n            response.raise_for_status()\n\n            data = response.json()\n            self.current_token = data[\"data\"][\"token\"]\n            self.headers = {\"Authorization\": f\"Bearer {self.current_token}\"}\n\n            return self.current_token\n\n        except requests.exceptions.RequestException as e:\n            raise Exception(f\"Unable to retrieve token from Cluster25 platform: {e}\") from e\n\n    def investigate(self, indicator: str) -&gt; dict[str, Any]:\n        \"\"\"Investigate an indicator using Cluster25 API.\"\"\"\n        # Ensure we have a valid token\n        self._get_token()\n\n        params = {\"indicator\": indicator}\n\n        try:\n            response = requests.get(\n                url=f\"{self.base_url}/investigate\",\n                params=params,\n                headers=self.headers,\n                timeout=self.timeout,\n            )\n            response.raise_for_status()\n\n            data = response.json()\n            return data[\"data\"]\n\n        except requests.exceptions.RequestException as e:\n            return {\n                \"error\": f\"Unable to retrieve investigate result for indicator '{indicator}' \"\n                f\"from Cluster25 platform: {e}\"\n            }\n</code></pre>"},{"location":"modulos/clients/cluster25/#sentineliqsdk.clients.cluster25.Cluster25Client.investigate","title":"investigate","text":"<pre><code>investigate(indicator: str) -&gt; dict[str, Any]\n</code></pre> <p>Investigate an indicator using Cluster25 API.</p> Source code in <code>src/sentineliqsdk/clients/cluster25.py</code> <pre><code>def investigate(self, indicator: str) -&gt; dict[str, Any]:\n    \"\"\"Investigate an indicator using Cluster25 API.\"\"\"\n    # Ensure we have a valid token\n    self._get_token()\n\n    params = {\"indicator\": indicator}\n\n    try:\n        response = requests.get(\n            url=f\"{self.base_url}/investigate\",\n            params=params,\n            headers=self.headers,\n            timeout=self.timeout,\n        )\n        response.raise_for_status()\n\n        data = response.json()\n        return data[\"data\"]\n\n    except requests.exceptions.RequestException as e:\n        return {\n            \"error\": f\"Unable to retrieve investigate result for indicator '{indicator}' \"\n            f\"from Cluster25 platform: {e}\"\n        }\n</code></pre>"},{"location":"modulos/clients/cluster25/#related-documentation","title":"Related Documentation","text":"<ul> <li>Cluster25 Analyzer</li> <li>HTTPX Client Pattern Guide</li> </ul>"},{"location":"modulos/clients/crowdsec/","title":"CrowdSec Client","text":"<p>The <code>CrowdSecClient</code> integrates with the CrowdSec CTI API to retrieve threat intelligence for IP addresses.</p>"},{"location":"modulos/clients/crowdsec/#configuration","title":"Configuration","text":"<pre><code>from sentineliqsdk.clients.crowdsec import CrowdSecClient\n\nclient = CrowdSecClient(api_key=\"your-api-key\")\n</code></pre> <p>Arguments:</p> <ul> <li><code>api_key</code>: key obtained from CrowdSec</li> <li><code>base_url</code>: API endpoint, defaults to the public CTI service</li> </ul>"},{"location":"modulos/clients/crowdsec/#usage-example","title":"Usage Example","text":"<pre><code>try:\n    summary = client.get_ip_summary(\"1.2.3.4\")\n    print(summary.get(\"ip\"))\nexcept CrowdSecRateLimitError:\n    print(\"Rate limit exceeded\")\n</code></pre>"},{"location":"modulos/clients/crowdsec/#api-reference","title":"API Reference","text":""},{"location":"modulos/clients/crowdsec/#sentineliqsdk.clients.crowdsec.CrowdSecClient","title":"sentineliqsdk.clients.crowdsec.CrowdSecClient","text":"<p>Client for the CrowdSec CTI API.</p> <p>This client provides access to CrowdSec's threat intelligence data for IP addresses and other observables.</p> Source code in <code>src/sentineliqsdk/clients/crowdsec.py</code> <pre><code>class CrowdSecClient:\n    \"\"\"Client for the CrowdSec CTI API.\n\n    This client provides access to CrowdSec's threat intelligence data\n    for IP addresses and other observables.\n    \"\"\"\n\n    def __init__(self, api_key: str, base_url: str = \"https://cti.api.crowdsec.net\"):\n        \"\"\"Initialize the CrowdSec client.\n\n        Args:\n            api_key: The CrowdSec API key\n            base_url: The base URL for the CrowdSec API (default: production)\n        \"\"\"\n        self.api_key = api_key\n        self.base_url = base_url\n\n    def _request(self, path: str) -&gt; dict[str, Any]:\n        \"\"\"Make a request to the CrowdSec API.\n\n        Args:\n            path: The API endpoint path\n\n        Returns\n        -------\n            The JSON response as a dictionary\n\n        Raises\n        ------\n            CrowdSecAPIError: If the API returns an error\n            CrowdSecRateLimitError: If rate limited\n        \"\"\"\n        headers = {\n            \"x-api-key\": self.api_key,\n            \"accept\": \"application/json\",\n            \"User-Agent\": \"sentineliqsdk-crowdsec/1.0.0\",\n        }\n\n        url = urljoin(self.base_url, path)\n\n        try:\n            response = requests.get(url, headers=headers, timeout=30)\n        except requests.RequestException as e:\n            raise CrowdSecAPIError(f\"Request failed: {e}\") from e\n\n        # Constants for HTTP status codes\n        rate_limit_status = HTTP_RATE_LIMIT\n        success_status = HTTP_SUCCESS_STATUS\n\n        if response.status_code == rate_limit_status:\n            raise CrowdSecRateLimitError(\"Rate limit exceeded\")\n\n        if response.status_code != success_status:\n            raise CrowdSecAPIError(\n                f\"API request failed with status {response.status_code}\",\n                status_code=response.status_code,\n            )\n\n        try:\n            return response.json()\n        except json.JSONDecodeError as e:\n            raise CrowdSecAPIError(f\"Failed to parse JSON response: {e}\") from e\n\n    def get_ip_summary(self, ip_address: str) -&gt; dict[str, Any]:\n        \"\"\"Get threat intelligence summary for an IP address.\n\n        Args:\n            ip_address: The IP address to analyze\n\n        Returns\n        -------\n            Dictionary containing threat intelligence data\n        \"\"\"\n        path = f\"/v2/smoke/{ip_address}\"\n        return self._request(path)\n</code></pre>"},{"location":"modulos/clients/crowdsec/#sentineliqsdk.clients.crowdsec.CrowdSecClient.get_ip_summary","title":"get_ip_summary","text":"<pre><code>get_ip_summary(ip_address: str) -&gt; dict[str, Any]\n</code></pre> <p>Get threat intelligence summary for an IP address.</p> <p>Args:     ip_address: The IP address to analyze</p> <p>Returns:</p> Type Description <code>    Dictionary containing threat intelligence data</code> Source code in <code>src/sentineliqsdk/clients/crowdsec.py</code> <pre><code>def get_ip_summary(self, ip_address: str) -&gt; dict[str, Any]:\n    \"\"\"Get threat intelligence summary for an IP address.\n\n    Args:\n        ip_address: The IP address to analyze\n\n    Returns\n    -------\n        Dictionary containing threat intelligence data\n    \"\"\"\n    path = f\"/v2/smoke/{ip_address}\"\n    return self._request(path)\n</code></pre>"},{"location":"modulos/clients/crowdsec/#exceptions","title":"Exceptions","text":""},{"location":"modulos/clients/crowdsec/#sentineliqsdk.clients.crowdsec.CrowdSecAPIError","title":"sentineliqsdk.clients.crowdsec.CrowdSecAPIError","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when the CrowdSec API returns an error.</p> Source code in <code>src/sentineliqsdk/clients/crowdsec.py</code> <pre><code>class CrowdSecAPIError(Exception):\n    \"\"\"Exception raised when the CrowdSec API returns an error.\"\"\"\n\n    def __init__(self, message: str, status_code: int | None = None):\n        self.message = message\n        self.status_code = status_code\n        super().__init__(self.message)\n</code></pre>"},{"location":"modulos/clients/crowdsec/#sentineliqsdk.clients.crowdsec.CrowdSecRateLimitError","title":"sentineliqsdk.clients.crowdsec.CrowdSecRateLimitError","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when the CrowdSec API returns a 429 rate limit error.</p> Source code in <code>src/sentineliqsdk/clients/crowdsec.py</code> <pre><code>class CrowdSecRateLimitError(Exception):\n    \"\"\"Exception raised when the CrowdSec API returns a 429 rate limit error.\"\"\"\n\n    def __init__(self, message: str):\n        self.message = message\n        super().__init__(self.message)\n</code></pre>"},{"location":"modulos/clients/crowdsec/#related-documentation","title":"Related Documentation","text":"<ul> <li>CrowdSec Analyzer</li> <li>HTTPX Client Pattern Guide</li> </ul>"},{"location":"modulos/clients/shodan/","title":"Shodan Client","text":"<p>The <code>ShodanClient</code> provides a comprehensive HTTP client for interacting with the Shodan REST API. It implements all documented endpoints and provides both generic and convenience methods for common operations.</p>"},{"location":"modulos/clients/shodan/#overview","title":"Overview","text":"<p>The Shodan client is built on top of <code>httpx</code> and provides:</p> <ul> <li>Complete API coverage for all Shodan endpoints</li> <li>Automatic API key injection as query parameter</li> <li>Proxy support via environment variables</li> <li>Type-safe responses with automatic JSON parsing</li> <li>Comprehensive error handling</li> </ul>"},{"location":"modulos/clients/shodan/#authentication","title":"Authentication","text":"<p>The client requires a Shodan API key for authentication:</p> <pre><code>from sentineliqsdk.clients.shodan import ShodanClient\n\nclient = ShodanClient(api_key=\"your-shodan-api-key\")\n</code></pre>"},{"location":"modulos/clients/shodan/#basic-usage","title":"Basic Usage","text":""},{"location":"modulos/clients/shodan/#search-operations","title":"Search Operations","text":"<pre><code># Get host information for an IP\nhost_info = client.host_information(\"8.8.8.8\")\n\n# Search for hosts\nsearch_results = client.search_host(\"apache\", page=1)\n\n# Get count of matching hosts\ncount = client.search_host_count(\"apache\")\n\n# Get search facets and filters\nfacets = client.search_host_facets()\nfilters = client.search_host_filters()\n\n# Get search tokens for query parsing\ntokens = client.search_host_tokens(\"apache port:80\")\n</code></pre>"},{"location":"modulos/clients/shodan/#on-demand-scanning","title":"On-Demand Scanning","text":"<pre><code># Start a scan for specific IPs\nscan_result = client.scan(\"8.8.8.8,1.1.1.1\")\n\n# Start internet scan for specific port/protocol\ninternet_scan = client.scan_internet(port=80, protocol=\"http\")\n\n# Get list of scans\nscans = client.scans()\n\n# Get specific scan details\nscan_details = client.scan_by_id(\"scan-id\")\n</code></pre>"},{"location":"modulos/clients/shodan/#network-alerts","title":"Network Alerts","text":"<pre><code># Create a network alert\nalert = client.alert_create(\n    name=\"My Network Alert\",\n    ips=[\"8.8.8.8\", \"1.1.1.1\"],\n    expires=86400  # 24 hours\n)\n\n# Get all alerts\nalerts = client.alerts()\n\n# Get specific alert info\nalert_info = client.alert_info(\"alert-id\")\n\n# Edit alert IPs\nclient.alert_edit(\"alert-id\", [\"8.8.8.8\", \"1.1.1.1\", \"9.9.9.9\"])\n\n# Delete alert\nclient.alert_delete(\"alert-id\")\n</code></pre>"},{"location":"modulos/clients/shodan/#alert-triggers-and-notifications","title":"Alert Triggers and Notifications","text":"<pre><code># Get available triggers\ntriggers = client.alert_triggers()\n\n# Enable/disable triggers\nclient.alert_enable_trigger(\"alert-id\", \"new_service\")\nclient.alert_disable_trigger(\"alert-id\", \"new_service\")\n\n# Whitelist/unwhitelist services\nclient.alert_whitelist_service(\"alert-id\", \"new_service\", 80)\nclient.alert_unwhitelist_service(\"alert-id\", \"new_service\", 80)\n\n# Manage notifiers\nnotifiers = client.notifiers()\nclient.alert_add_notifier(\"alert-id\", \"notifier-id\")\nclient.alert_remove_notifier(\"alert-id\", \"notifier-id\")\n</code></pre>"},{"location":"modulos/clients/shodan/#notifiers","title":"Notifiers","text":"<pre><code># Get notifier providers\nproviders = client.notifier_providers()\n\n# Create notifier\nnotifier = client.notifier_create(\n    provider=\"email\",\n    args={\"email\": \"admin@example.com\"}\n)\n\n# Get/update/delete notifiers\nnotifier_info = client.notifier_get(\"notifier-id\")\nclient.notifier_update(\"notifier-id\", \"email\", {\"email\": \"new@example.com\"})\nclient.notifier_delete(\"notifier-id\")\n</code></pre>"},{"location":"modulos/clients/shodan/#dns-operations","title":"DNS Operations","text":"<pre><code># Get DNS domain information\ndomain_info = client.dns_domain(\"example.com\")\n\n# Resolve hostnames to IPs\nresolved = client.dns_resolve([\"example.com\", \"google.com\"])\n# Or single hostname\nresolved = client.dns_resolve(\"example.com\")\n\n# Reverse DNS lookup\nreverse = client.dns_reverse([\"8.8.8.8\", \"1.1.1.1\"])\n# Or single IP\nreverse = client.dns_reverse(\"8.8.8.8\")\n</code></pre>"},{"location":"modulos/clients/shodan/#directory-and-queries","title":"Directory and Queries","text":"<pre><code># Get queries\nqueries = client.queries(page=1, sort=\"votes\", order=\"desc\")\n\n# Search queries\nsearch_results = client.query_search(\"apache\", page=1)\n\n# Get query tags\ntags = client.query_tags(size=100)\n</code></pre>"},{"location":"modulos/clients/shodan/#utility-methods","title":"Utility Methods","text":"<pre><code># Get available ports and protocols\nports = client.ports()\nprotocols = client.protocols()\n\n# Get HTTP headers tool\nheaders = client.tools_httpheaders()\n\n# Get your public IP\nmy_ip = client.tools_myip()\n\n# Get API information\napi_info = client.api_info()\n</code></pre>"},{"location":"modulos/clients/shodan/#account-and-organization","title":"Account and Organization","text":"<pre><code># Get account profile\nprofile = client.account_profile()\n\n# Organization methods (Enterprise only)\norg_info = client.org()\nclient.org_member_update(\"username\")\nclient.org_member_remove(\"username\")\n</code></pre>"},{"location":"modulos/clients/shodan/#bulk-data-enterprise","title":"Bulk Data (Enterprise)","text":"<pre><code># Get available datasets\ndatasets = client.data_datasets()\n\n# Get specific dataset\ndataset = client.data_dataset(\"dataset-name\")\n</code></pre>"},{"location":"modulos/clients/shodan/#configuration","title":"Configuration","text":""},{"location":"modulos/clients/shodan/#custom-base-url","title":"Custom Base URL","text":"<pre><code>client = ShodanClient(\n    api_key=\"your-key\",\n    base_url=\"https://api.shodan.io\"\n)\n</code></pre>"},{"location":"modulos/clients/shodan/#timeout-settings","title":"Timeout Settings","text":"<pre><code>client = ShodanClient(\n    api_key=\"your-key\",\n    timeout=60.0  # 60 seconds timeout\n)\n</code></pre>"},{"location":"modulos/clients/shodan/#custom-user-agent","title":"Custom User Agent","text":"<pre><code>client = ShodanClient(\n    api_key=\"your-key\",\n    user_agent=\"MyApp/1.0\"\n)\n</code></pre>"},{"location":"modulos/clients/shodan/#error-handling","title":"Error Handling","text":"<p>The client raises <code>httpx.HTTPStatusError</code> for HTTP errors (status &gt;= 400):</p> <pre><code>from httpx import HTTPStatusError\n\ntry:\n    response = client.host_information(\"invalid-ip\")\nexcept HTTPStatusError as e:\n    print(f\"HTTP Error: {e}\")\n    print(f\"Status Code: {e.response.status_code}\")\n    print(f\"Response: {e.response.text}\")\n</code></pre>"},{"location":"modulos/clients/shodan/#proxy-support","title":"Proxy Support","text":"<p>The client automatically respects HTTP proxy settings from environment variables:</p> <pre><code>import os\n\n# Set proxy via environment\nos.environ[\"http_proxy\"] = \"http://proxy.company.com:8080\"\nos.environ[\"https_proxy\"] = \"https://proxy.company.com:8080\"\n\n# Client will automatically use these proxies\nclient = ShodanClient(api_key=\"your-key\")\n</code></pre>"},{"location":"modulos/clients/shodan/#request-options","title":"Request Options","text":"<p>The <code>RequestOptions</code> dataclass provides fine-grained control over requests:</p> <pre><code>from sentineliqsdk.clients.shodan import RequestOptions\n\n# GET request with query parameters\nresponse = client._get(\"/shodan/host/search\", query={\"query\": \"apache\", \"page\": 1})\n\n# POST request with JSON body\nresponse = client._post(\"/shodan/scan\", json_body={\"ips\": \"8.8.8.8\"})\n\n# Custom headers\nresponse = client._get(\"/api-info\", headers={\"X-Custom\": \"value\"})\n</code></pre>"},{"location":"modulos/clients/shodan/#response-handling","title":"Response Handling","text":"<p>The client automatically parses JSON responses and returns the appropriate data type:</p> <pre><code># JSON responses return dict/list\njson_response = client.host_information(\"8.8.8.8\")  # Returns dict\n\n# Non-JSON responses return string\ntext_response = client.tools_myip()  # Returns string\n</code></pre>"},{"location":"modulos/clients/shodan/#rate-limiting","title":"Rate Limiting","text":"<p>Shodan has rate limits based on your subscription level. The client doesn't implement automatic rate limiting:</p> <pre><code>import time\n\ndef make_request_with_retry(client, method, *args, max_retries=3):\n    for attempt in range(max_retries):\n        try:\n            return method(*args)\n        except HTTPStatusError as e:\n            if e.response.status_code == 429:  # Rate limited\n                time.sleep(2 ** attempt)  # Exponential backoff\n                continue\n            raise\n    raise Exception(\"Max retries exceeded\")\n\n# Usage\nresult = make_request_with_retry(client, client.host_information, \"8.8.8.8\")\n</code></pre>"},{"location":"modulos/clients/shodan/#complete-example","title":"Complete Example","text":"<pre><code>from sentineliqsdk.clients.shodan import ShodanClient\n\ndef main():\n    # Initialize client\n    client = ShodanClient(api_key=\"your-shodan-api-key\")\n\n    try:\n        # Get your public IP\n        my_ip = client.tools_myip()\n        print(f\"Your public IP: {my_ip}\")\n\n        # Get host information\n        host_info = client.host_information(\"8.8.8.8\")\n        print(f\"Host: {host_info.get('ip_str')}\")\n        print(f\"Organization: {host_info.get('org')}\")\n\n        # Search for Apache servers\n        search_results = client.search_host(\"apache\", page=1)\n        print(f\"Found {len(search_results.get('matches', []))} Apache servers\")\n\n        # Create a network alert\n        alert = client.alert_create(\n            name=\"My Network Monitor\",\n            ips=[\"8.8.8.8\", \"1.1.1.1\"]\n        )\n        print(f\"Created alert: {alert.get('id')}\")\n\n        # Get available ports\n        ports = client.ports()\n        print(f\"Available ports: {len(ports)}\")\n\n    except Exception as e:\n        print(f\"Error: {e}\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"modulos/clients/shodan/#advanced-usage","title":"Advanced Usage","text":""},{"location":"modulos/clients/shodan/#batch-operations","title":"Batch Operations","text":"<pre><code># Process multiple IPs\nips = [\"8.8.8.8\", \"1.1.1.1\", \"9.9.9.9\"]\nresults = []\n\nfor ip in ips:\n    try:\n        host_info = client.host_information(ip)\n        results.append({\n            \"ip\": ip,\n            \"org\": host_info.get(\"org\"),\n            \"ports\": [port.get(\"port\") for port in host_info.get(\"data\", [])]\n        })\n    except Exception as e:\n        results.append({\"ip\": ip, \"error\": str(e)})\n\nprint(results)\n</code></pre>"},{"location":"modulos/clients/shodan/#custom-search-queries","title":"Custom Search Queries","text":"<pre><code># Build complex search queries\nqueries = [\n    \"apache port:80\",\n    \"nginx port:443\",\n    \"country:US product:apache\",\n    \"org:Google port:80\"\n]\n\nfor query in queries:\n    try:\n        count = client.search_host_count(query)\n        print(f\"Query '{query}': {count} results\")\n    except Exception as e:\n        print(f\"Error with query '{query}': {e}\")\n</code></pre>"},{"location":"modulos/clients/shodan/#api-reference","title":"API Reference","text":""},{"location":"modulos/clients/shodan/#shodanclient","title":"ShodanClient","text":""},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient","title":"sentineliqsdk.clients.shodan.ShodanClient  <code>dataclass</code>","text":"<p>Minimal Shodan HTTP client covering all documented endpoints.</p> <ul> <li>Uses httpx (sync client)</li> <li>Respects environment proxies (<code>http_proxy</code>/<code>https_proxy</code>)</li> <li>Adds <code>?key=...</code> to every request</li> <li>Returns parsed JSON (dict/list/str) for 2xx responses; raises <code>URLError</code>/<code>HTTPError</code> otherwise</li> </ul> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>@dataclass(frozen=True)\nclass ShodanClient:\n    \"\"\"Minimal Shodan HTTP client covering all documented endpoints.\n\n    - Uses httpx (sync client)\n    - Respects environment proxies (`http_proxy`/`https_proxy`)\n    - Adds `?key=...` to every request\n    - Returns parsed JSON (dict/list/str) for 2xx responses; raises `URLError`/`HTTPError` otherwise\n    \"\"\"\n\n    api_key: str\n    base_url: str = \"https://api.shodan.io\"\n    timeout: float = 30.0\n    user_agent: str = \"sentineliqsdk-shodan/1.0\"\n\n    # --- Core HTTP helpers ---\n    def _request(\n        self,\n        method: str,\n        path: str,\n        options: RequestOptions | None = None,\n    ) -&gt; Any:\n        \"\"\"Make HTTP request to Shodan API.\"\"\"\n        if options is None:\n            options = RequestOptions()\n\n        url = self._build_url(path, options.query)\n        req_headers = self._build_headers(options.headers)\n        request_kwargs = self._build_request_kwargs(req_headers, options)\n        return self._execute_request(method, url, request_kwargs)\n\n    def _build_url(self, path: str, query: Mapping[str, Any] | None) -&gt; str:\n        \"\"\"Build the complete URL with API key and query parameters.\"\"\"\n        url = self.base_url.rstrip(\"/\") + path\n        # Always include API key in query\n        q = {\"key\": self.api_key}\n        if query:\n            q.update({k: v for k, v in query.items() if v is not None})\n        return _merge_query(url, q)\n\n    def _build_headers(self, custom_headers: Mapping[str, str] | None) -&gt; dict[str, str]:\n        \"\"\"Build request headers.\"\"\"\n        req_headers = {\"User-Agent\": self.user_agent}\n        if custom_headers:\n            req_headers.update(custom_headers)\n        return req_headers\n\n    def _build_request_kwargs(\n        self, req_headers: dict[str, str], options: RequestOptions\n    ) -&gt; dict[str, Any]:\n        \"\"\"Build request kwargs for httpx.\"\"\"\n        request_kwargs: dict[str, Any] = {\"headers\": req_headers}\n        if options.json_body is not None:\n            request_kwargs[\"json\"] = options.json_body\n        elif isinstance(options.data, dict | tuple):\n            request_kwargs[\"data\"] = urllib.parse.urlencode(options.data)\n            req_headers.setdefault(\n                \"Content-Type\", \"application/x-www-form-urlencoded; charset=utf-8\"\n            )\n        elif isinstance(options.data, bytes):\n            request_kwargs[\"content\"] = options.data\n        return request_kwargs\n\n    def _execute_request(self, method: str, url: str, request_kwargs: dict[str, Any]) -&gt; Any:\n        \"\"\"Execute the HTTP request and return parsed response.\"\"\"\n        with httpx.Client(timeout=self.timeout) as client:\n            resp = client.request(method.upper(), url, **request_kwargs)\n            if resp.status_code &gt;= HTTP_CLIENT_ERROR:\n                # Include body text in error for easier debugging\n                msg = f\"HTTP {resp.status_code} for {resp.request.method} {resp.request.url}: {resp.text}\"\n                raise httpx.HTTPStatusError(msg, request=resp.request, response=resp)\n            ctype = resp.headers.get(\"Content-Type\", \"application/json\")\n            if not resp.content:\n                return None\n            if \"application/json\" in ctype or \"json\" in ctype:\n                try:\n                    return resp.json()\n                except json.JSONDecodeError:\n                    return resp.text\n            return resp.text\n\n    def _get(self, path: str, **kwargs: Any) -&gt; Any:\n        \"\"\"Make GET request.\"\"\"\n        options = RequestOptions(**kwargs)\n        return self._request(\"GET\", path, options)\n\n    def _post(self, path: str, **kwargs: Any) -&gt; Any:\n        \"\"\"Make POST request.\"\"\"\n        options = RequestOptions(**kwargs)\n        return self._request(\"POST\", path, options)\n\n    def _put(self, path: str, **kwargs: Any) -&gt; Any:\n        \"\"\"Make PUT request.\"\"\"\n        options = RequestOptions(**kwargs)\n        return self._request(\"PUT\", path, options)\n\n    def _delete(self, path: str, **kwargs: Any) -&gt; Any:\n        \"\"\"Make DELETE request.\"\"\"\n        options = RequestOptions(**kwargs)\n        return self._request(\"DELETE\", path, options)\n\n    # --- Search Methods ---\n    def host_information(\n        self, ip: str, *, history: bool | None = None, minify: bool | None = None\n    ) -&gt; Any:\n        \"\"\"Get host information for an IP address.\"\"\"\n        return self._get(\n            f\"/shodan/host/{urllib.parse.quote(ip)}\",\n            query={\"history\": history, \"minify\": minify},\n        )\n\n    def search_host_count(self, query: str, *, facets: str | None = None) -&gt; Any:\n        \"\"\"Get count of hosts matching query.\"\"\"\n        return self._get(\"/shodan/host/count\", query={\"query\": query, \"facets\": facets})\n\n    def search_host(\n        self,\n        query: str,\n        *,\n        page: int | None = None,\n        facets: str | None = None,\n        minify: bool | None = None,\n    ) -&gt; Any:\n        \"\"\"Search for hosts.\"\"\"\n        return self._get(\n            \"/shodan/host/search\",\n            query={\"query\": query, \"page\": page, \"facets\": facets, \"minify\": minify},\n        )\n\n    def search_host_facets(self) -&gt; Any:\n        \"\"\"Get available search facets.\"\"\"\n        return self._get(\"/shodan/host/search/facets\")\n\n    def search_host_filters(self) -&gt; Any:\n        \"\"\"Get available search filters.\"\"\"\n        return self._get(\"/shodan/host/search/filters\")\n\n    def search_host_tokens(self, query: str) -&gt; Any:\n        \"\"\"Get search tokens for query.\"\"\"\n        return self._get(\"/shodan/host/search/tokens\", query={\"query\": query})\n\n    def ports(self) -&gt; Any:\n        \"\"\"Get list of ports.\"\"\"\n        return self._get(\"/shodan/ports\")\n\n    def protocols(self) -&gt; Any:\n        \"\"\"Get list of protocols.\"\"\"\n        return self._get(\"/shodan/protocols\")\n\n    # --- On-Demand Scanning ---\n    def scan(self, ips: str) -&gt; Any:\n        \"\"\"Start scan for IPs.\"\"\"\n        # x-www-form-urlencoded with \"ips\" param\n        return self._post(\"/shodan/scan\", data={\"ips\": ips})\n\n    def scan_internet(self, port: int, protocol: str) -&gt; Any:\n        \"\"\"Start internet scan for port and protocol.\"\"\"\n        return self._post(\"/shodan/scan/internet\", data={\"port\": port, \"protocol\": protocol})\n\n    def scans(self) -&gt; Any:\n        \"\"\"Get list of scans.\"\"\"\n        return self._get(\"/shodan/scans\")\n\n    def scan_by_id(self, scan_id: str) -&gt; Any:\n        \"\"\"Get scan by ID.\"\"\"\n        return self._get(f\"/shodan/scans/{urllib.parse.quote(scan_id)}\")\n\n    # --- Network Alerts ---\n    def alert_create(self, name: str, ips: list[str], *, expires: int | None = None) -&gt; Any:\n        \"\"\"Create network alert.\"\"\"\n        body: dict[str, Any] = {\"name\": name, \"filters\": {\"ip\": ips}}\n        if expires is not None:\n            body[\"expires\"] = expires\n        return self._post(\"/shodan/alert\", json_body=body)\n\n    def alert_info(self, alert_id: str) -&gt; Any:\n        \"\"\"Get alert information.\"\"\"\n        return self._get(f\"/shodan/alert/{urllib.parse.quote(alert_id)}/info\")\n\n    def alert_delete(self, alert_id: str) -&gt; Any:\n        \"\"\"Delete alert.\"\"\"\n        return self._delete(f\"/shodan/alert/{urllib.parse.quote(alert_id)}\")\n\n    def alert_edit(self, alert_id: str, ips: list[str]) -&gt; Any:\n        \"\"\"Edit alert IPs.\"\"\"\n        body = {\"filters\": {\"ip\": ips}}\n        return self._post(f\"/shodan/alert/{urllib.parse.quote(alert_id)}\", json_body=body)\n\n    def alerts(self) -&gt; Any:\n        \"\"\"Get all alerts.\"\"\"\n        return self._get(\"/shodan/alert/info\")\n\n    def alert_triggers(self) -&gt; Any:\n        \"\"\"Get alert triggers.\"\"\"\n        return self._get(\"/shodan/alert/triggers\")\n\n    def alert_enable_trigger(self, alert_id: str, trigger: str) -&gt; Any:\n        \"\"\"Enable alert trigger.\"\"\"\n        return self._put(\n            f\"/shodan/alert/{urllib.parse.quote(alert_id)}/trigger/{urllib.parse.quote(trigger)}\"\n        )\n\n    def alert_disable_trigger(self, alert_id: str, trigger: str) -&gt; Any:\n        \"\"\"Disable alert trigger.\"\"\"\n        return self._delete(\n            f\"/shodan/alert/{urllib.parse.quote(alert_id)}/trigger/{urllib.parse.quote(trigger)}\"\n        )\n\n    def alert_whitelist_service(self, alert_id: str, trigger: str, service: int) -&gt; Any:\n        \"\"\"Whitelist service for alert.\"\"\"\n        return self._put(\n            f\"/shodan/alert/{urllib.parse.quote(alert_id)}/trigger/{urllib.parse.quote(trigger)}/ignore/{service}\"\n        )\n\n    def alert_unwhitelist_service(self, alert_id: str, trigger: str, service: int) -&gt; Any:\n        \"\"\"Remove service from alert whitelist.\"\"\"\n        return self._delete(\n            f\"/shodan/alert/{urllib.parse.quote(alert_id)}/trigger/{urllib.parse.quote(trigger)}/ignore/{service}\"\n        )\n\n    def alert_add_notifier(self, alert_id: str, notifier_id: str) -&gt; Any:\n        \"\"\"Add notifier to alert.\"\"\"\n        return self._put(\n            f\"/shodan/alert/{urllib.parse.quote(alert_id)}/notifier/{urllib.parse.quote(notifier_id)}\"\n        )\n\n    def alert_remove_notifier(self, alert_id: str, notifier_id: str) -&gt; Any:\n        \"\"\"Remove notifier from alert.\"\"\"\n        return self._delete(\n            f\"/shodan/alert/{urllib.parse.quote(alert_id)}/notifier/{urllib.parse.quote(notifier_id)}\"\n        )\n\n    # --- Notifiers ---\n    def notifiers(self) -&gt; Any:\n        \"\"\"Get list of notifiers.\"\"\"\n        return self._get(\"/notifier\")\n\n    def notifier_providers(self) -&gt; Any:\n        \"\"\"Get notifier providers.\"\"\"\n        return self._get(\"/notifier/provider\")\n\n    def notifier_create(self, provider: str, args: Mapping[str, Any]) -&gt; Any:\n        \"\"\"Create notifier.\"\"\"\n        # Create not explicitly documented in this spec version, but supported via POST /notifier\n        return self._post(\"/notifier\", json_body={\"provider\": provider, \"args\": dict(args)})\n\n    def notifier_delete(self, notifier_id: str) -&gt; Any:\n        \"\"\"Delete notifier.\"\"\"\n        return self._delete(f\"/notifier/{urllib.parse.quote(notifier_id)}\")\n\n    def notifier_get(self, notifier_id: str) -&gt; Any:\n        \"\"\"Get notifier by ID.\"\"\"\n        return self._get(f\"/notifier/{urllib.parse.quote(notifier_id)}\")\n\n    def notifier_update(self, notifier_id: str, provider: str, args: Mapping[str, Any]) -&gt; Any:\n        \"\"\"Update notifier.\"\"\"\n        return self._put(\n            f\"/notifier/{urllib.parse.quote(notifier_id)}\",\n            json_body={\"provider\": provider, \"args\": dict(args)},\n        )\n\n    # --- Directory Methods ---\n    def queries(\n        self, *, page: int | None = None, sort: str | None = None, order: str | None = None\n    ) -&gt; Any:\n        \"\"\"Get queries.\"\"\"\n        return self._get(\"/shodan/query\", query={\"page\": page, \"sort\": sort, \"order\": order})\n\n    def query_search(self, query: str, *, page: int | None = None) -&gt; Any:\n        \"\"\"Search queries.\"\"\"\n        return self._get(\"/shodan/query/search\", query={\"query\": query, \"page\": page})\n\n    def query_tags(self, *, size: int | None = None) -&gt; Any:\n        \"\"\"Get query tags.\"\"\"\n        return self._get(\"/shodan/query/tags\", query={\"size\": size})\n\n    # --- Bulk Data (Enterprise) ---\n    def data_datasets(self) -&gt; Any:\n        \"\"\"Get data datasets.\"\"\"\n        return self._get(\"/shodan/data\")\n\n    def data_dataset(self, dataset: str) -&gt; Any:\n        \"\"\"Get specific dataset.\"\"\"\n        return self._get(f\"/shodan/data/{urllib.parse.quote(dataset)}\")\n\n    # --- Manage Organization (Enterprise) ---\n    def org(self) -&gt; Any:\n        \"\"\"Get organization info.\"\"\"\n        return self._get(\"/org\")\n\n    def org_member_update(self, user: str) -&gt; Any:\n        \"\"\"Update organization member.\"\"\"\n        return self._put(f\"/org/member/{urllib.parse.quote(user)}\")\n\n    def org_member_remove(self, user: str) -&gt; Any:\n        \"\"\"Remove organization member.\"\"\"\n        return self._delete(f\"/org/member/{urllib.parse.quote(user)}\")\n\n    # --- Account Methods ---\n    def account_profile(self) -&gt; Any:\n        \"\"\"Get account profile.\"\"\"\n        return self._get(\"/account/profile\")\n\n    # --- DNS Methods ---\n    def dns_domain(self, domain: str) -&gt; Any:\n        \"\"\"Get DNS domain info.\"\"\"\n        return self._get(f\"/dns/domain/{urllib.parse.quote(domain)}\")\n\n    def dns_resolve(self, hostnames: list[str] | str) -&gt; Any:\n        \"\"\"Resolve hostnames to IPs.\"\"\"\n        if isinstance(hostnames, list):\n            hostnames = \",\".join(hostnames)\n        return self._get(\"/dns/resolve\", query={\"hostnames\": hostnames})\n\n    def dns_reverse(self, ips: list[str] | str) -&gt; Any:\n        \"\"\"Reverse DNS lookup for IPs.\"\"\"\n        if isinstance(ips, list):\n            ips = \",\".join(ips)\n        return self._get(\"/dns/reverse\", query={\"ips\": ips})\n\n    # --- Utility Methods ---\n    def tools_httpheaders(self) -&gt; Any:\n        \"\"\"Get HTTP headers tool.\"\"\"\n        return self._get(\"/tools/httpheaders\")\n\n    def tools_myip(self) -&gt; Any:\n        \"\"\"Get my IP address.\"\"\"\n        return self._get(\"/tools/myip\")\n\n    # --- API Status Methods ---\n    def api_info(self) -&gt; Any:\n        \"\"\"Get API information.\"\"\"\n        return self._get(\"/api-info\")\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.account_profile","title":"account_profile","text":"<pre><code>account_profile() -&gt; Any\n</code></pre> <p>Get account profile.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def account_profile(self) -&gt; Any:\n    \"\"\"Get account profile.\"\"\"\n    return self._get(\"/account/profile\")\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.alert_add_notifier","title":"alert_add_notifier","text":"<pre><code>alert_add_notifier(alert_id: str, notifier_id: str) -&gt; Any\n</code></pre> <p>Add notifier to alert.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def alert_add_notifier(self, alert_id: str, notifier_id: str) -&gt; Any:\n    \"\"\"Add notifier to alert.\"\"\"\n    return self._put(\n        f\"/shodan/alert/{urllib.parse.quote(alert_id)}/notifier/{urllib.parse.quote(notifier_id)}\"\n    )\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.alert_create","title":"alert_create","text":"<pre><code>alert_create(\n    name: str, ips: list[str], *, expires: int | None = None\n) -&gt; Any\n</code></pre> <p>Create network alert.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def alert_create(self, name: str, ips: list[str], *, expires: int | None = None) -&gt; Any:\n    \"\"\"Create network alert.\"\"\"\n    body: dict[str, Any] = {\"name\": name, \"filters\": {\"ip\": ips}}\n    if expires is not None:\n        body[\"expires\"] = expires\n    return self._post(\"/shodan/alert\", json_body=body)\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.alert_delete","title":"alert_delete","text":"<pre><code>alert_delete(alert_id: str) -&gt; Any\n</code></pre> <p>Delete alert.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def alert_delete(self, alert_id: str) -&gt; Any:\n    \"\"\"Delete alert.\"\"\"\n    return self._delete(f\"/shodan/alert/{urllib.parse.quote(alert_id)}\")\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.alert_disable_trigger","title":"alert_disable_trigger","text":"<pre><code>alert_disable_trigger(alert_id: str, trigger: str) -&gt; Any\n</code></pre> <p>Disable alert trigger.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def alert_disable_trigger(self, alert_id: str, trigger: str) -&gt; Any:\n    \"\"\"Disable alert trigger.\"\"\"\n    return self._delete(\n        f\"/shodan/alert/{urllib.parse.quote(alert_id)}/trigger/{urllib.parse.quote(trigger)}\"\n    )\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.alert_edit","title":"alert_edit","text":"<pre><code>alert_edit(alert_id: str, ips: list[str]) -&gt; Any\n</code></pre> <p>Edit alert IPs.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def alert_edit(self, alert_id: str, ips: list[str]) -&gt; Any:\n    \"\"\"Edit alert IPs.\"\"\"\n    body = {\"filters\": {\"ip\": ips}}\n    return self._post(f\"/shodan/alert/{urllib.parse.quote(alert_id)}\", json_body=body)\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.alert_enable_trigger","title":"alert_enable_trigger","text":"<pre><code>alert_enable_trigger(alert_id: str, trigger: str) -&gt; Any\n</code></pre> <p>Enable alert trigger.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def alert_enable_trigger(self, alert_id: str, trigger: str) -&gt; Any:\n    \"\"\"Enable alert trigger.\"\"\"\n    return self._put(\n        f\"/shodan/alert/{urllib.parse.quote(alert_id)}/trigger/{urllib.parse.quote(trigger)}\"\n    )\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.alert_info","title":"alert_info","text":"<pre><code>alert_info(alert_id: str) -&gt; Any\n</code></pre> <p>Get alert information.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def alert_info(self, alert_id: str) -&gt; Any:\n    \"\"\"Get alert information.\"\"\"\n    return self._get(f\"/shodan/alert/{urllib.parse.quote(alert_id)}/info\")\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.alert_remove_notifier","title":"alert_remove_notifier","text":"<pre><code>alert_remove_notifier(\n    alert_id: str, notifier_id: str\n) -&gt; Any\n</code></pre> <p>Remove notifier from alert.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def alert_remove_notifier(self, alert_id: str, notifier_id: str) -&gt; Any:\n    \"\"\"Remove notifier from alert.\"\"\"\n    return self._delete(\n        f\"/shodan/alert/{urllib.parse.quote(alert_id)}/notifier/{urllib.parse.quote(notifier_id)}\"\n    )\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.alert_triggers","title":"alert_triggers","text":"<pre><code>alert_triggers() -&gt; Any\n</code></pre> <p>Get alert triggers.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def alert_triggers(self) -&gt; Any:\n    \"\"\"Get alert triggers.\"\"\"\n    return self._get(\"/shodan/alert/triggers\")\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.alert_unwhitelist_service","title":"alert_unwhitelist_service","text":"<pre><code>alert_unwhitelist_service(\n    alert_id: str, trigger: str, service: int\n) -&gt; Any\n</code></pre> <p>Remove service from alert whitelist.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def alert_unwhitelist_service(self, alert_id: str, trigger: str, service: int) -&gt; Any:\n    \"\"\"Remove service from alert whitelist.\"\"\"\n    return self._delete(\n        f\"/shodan/alert/{urllib.parse.quote(alert_id)}/trigger/{urllib.parse.quote(trigger)}/ignore/{service}\"\n    )\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.alert_whitelist_service","title":"alert_whitelist_service","text":"<pre><code>alert_whitelist_service(\n    alert_id: str, trigger: str, service: int\n) -&gt; Any\n</code></pre> <p>Whitelist service for alert.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def alert_whitelist_service(self, alert_id: str, trigger: str, service: int) -&gt; Any:\n    \"\"\"Whitelist service for alert.\"\"\"\n    return self._put(\n        f\"/shodan/alert/{urllib.parse.quote(alert_id)}/trigger/{urllib.parse.quote(trigger)}/ignore/{service}\"\n    )\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.alerts","title":"alerts","text":"<pre><code>alerts() -&gt; Any\n</code></pre> <p>Get all alerts.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def alerts(self) -&gt; Any:\n    \"\"\"Get all alerts.\"\"\"\n    return self._get(\"/shodan/alert/info\")\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.api_info","title":"api_info","text":"<pre><code>api_info() -&gt; Any\n</code></pre> <p>Get API information.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def api_info(self) -&gt; Any:\n    \"\"\"Get API information.\"\"\"\n    return self._get(\"/api-info\")\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.data_dataset","title":"data_dataset","text":"<pre><code>data_dataset(dataset: str) -&gt; Any\n</code></pre> <p>Get specific dataset.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def data_dataset(self, dataset: str) -&gt; Any:\n    \"\"\"Get specific dataset.\"\"\"\n    return self._get(f\"/shodan/data/{urllib.parse.quote(dataset)}\")\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.data_datasets","title":"data_datasets","text":"<pre><code>data_datasets() -&gt; Any\n</code></pre> <p>Get data datasets.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def data_datasets(self) -&gt; Any:\n    \"\"\"Get data datasets.\"\"\"\n    return self._get(\"/shodan/data\")\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.dns_domain","title":"dns_domain","text":"<pre><code>dns_domain(domain: str) -&gt; Any\n</code></pre> <p>Get DNS domain info.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def dns_domain(self, domain: str) -&gt; Any:\n    \"\"\"Get DNS domain info.\"\"\"\n    return self._get(f\"/dns/domain/{urllib.parse.quote(domain)}\")\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.dns_resolve","title":"dns_resolve","text":"<pre><code>dns_resolve(hostnames: list[str] | str) -&gt; Any\n</code></pre> <p>Resolve hostnames to IPs.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def dns_resolve(self, hostnames: list[str] | str) -&gt; Any:\n    \"\"\"Resolve hostnames to IPs.\"\"\"\n    if isinstance(hostnames, list):\n        hostnames = \",\".join(hostnames)\n    return self._get(\"/dns/resolve\", query={\"hostnames\": hostnames})\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.dns_reverse","title":"dns_reverse","text":"<pre><code>dns_reverse(ips: list[str] | str) -&gt; Any\n</code></pre> <p>Reverse DNS lookup for IPs.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def dns_reverse(self, ips: list[str] | str) -&gt; Any:\n    \"\"\"Reverse DNS lookup for IPs.\"\"\"\n    if isinstance(ips, list):\n        ips = \",\".join(ips)\n    return self._get(\"/dns/reverse\", query={\"ips\": ips})\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.host_information","title":"host_information","text":"<pre><code>host_information(\n    ip: str,\n    *,\n    history: bool | None = None,\n    minify: bool | None = None,\n) -&gt; Any\n</code></pre> <p>Get host information for an IP address.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def host_information(\n    self, ip: str, *, history: bool | None = None, minify: bool | None = None\n) -&gt; Any:\n    \"\"\"Get host information for an IP address.\"\"\"\n    return self._get(\n        f\"/shodan/host/{urllib.parse.quote(ip)}\",\n        query={\"history\": history, \"minify\": minify},\n    )\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.notifier_create","title":"notifier_create","text":"<pre><code>notifier_create(\n    provider: str, args: Mapping[str, Any]\n) -&gt; Any\n</code></pre> <p>Create notifier.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def notifier_create(self, provider: str, args: Mapping[str, Any]) -&gt; Any:\n    \"\"\"Create notifier.\"\"\"\n    # Create not explicitly documented in this spec version, but supported via POST /notifier\n    return self._post(\"/notifier\", json_body={\"provider\": provider, \"args\": dict(args)})\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.notifier_delete","title":"notifier_delete","text":"<pre><code>notifier_delete(notifier_id: str) -&gt; Any\n</code></pre> <p>Delete notifier.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def notifier_delete(self, notifier_id: str) -&gt; Any:\n    \"\"\"Delete notifier.\"\"\"\n    return self._delete(f\"/notifier/{urllib.parse.quote(notifier_id)}\")\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.notifier_get","title":"notifier_get","text":"<pre><code>notifier_get(notifier_id: str) -&gt; Any\n</code></pre> <p>Get notifier by ID.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def notifier_get(self, notifier_id: str) -&gt; Any:\n    \"\"\"Get notifier by ID.\"\"\"\n    return self._get(f\"/notifier/{urllib.parse.quote(notifier_id)}\")\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.notifier_providers","title":"notifier_providers","text":"<pre><code>notifier_providers() -&gt; Any\n</code></pre> <p>Get notifier providers.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def notifier_providers(self) -&gt; Any:\n    \"\"\"Get notifier providers.\"\"\"\n    return self._get(\"/notifier/provider\")\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.notifier_update","title":"notifier_update","text":"<pre><code>notifier_update(\n    notifier_id: str, provider: str, args: Mapping[str, Any]\n) -&gt; Any\n</code></pre> <p>Update notifier.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def notifier_update(self, notifier_id: str, provider: str, args: Mapping[str, Any]) -&gt; Any:\n    \"\"\"Update notifier.\"\"\"\n    return self._put(\n        f\"/notifier/{urllib.parse.quote(notifier_id)}\",\n        json_body={\"provider\": provider, \"args\": dict(args)},\n    )\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.notifiers","title":"notifiers","text":"<pre><code>notifiers() -&gt; Any\n</code></pre> <p>Get list of notifiers.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def notifiers(self) -&gt; Any:\n    \"\"\"Get list of notifiers.\"\"\"\n    return self._get(\"/notifier\")\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.org","title":"org","text":"<pre><code>org() -&gt; Any\n</code></pre> <p>Get organization info.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def org(self) -&gt; Any:\n    \"\"\"Get organization info.\"\"\"\n    return self._get(\"/org\")\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.org_member_remove","title":"org_member_remove","text":"<pre><code>org_member_remove(user: str) -&gt; Any\n</code></pre> <p>Remove organization member.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def org_member_remove(self, user: str) -&gt; Any:\n    \"\"\"Remove organization member.\"\"\"\n    return self._delete(f\"/org/member/{urllib.parse.quote(user)}\")\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.org_member_update","title":"org_member_update","text":"<pre><code>org_member_update(user: str) -&gt; Any\n</code></pre> <p>Update organization member.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def org_member_update(self, user: str) -&gt; Any:\n    \"\"\"Update organization member.\"\"\"\n    return self._put(f\"/org/member/{urllib.parse.quote(user)}\")\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.ports","title":"ports","text":"<pre><code>ports() -&gt; Any\n</code></pre> <p>Get list of ports.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def ports(self) -&gt; Any:\n    \"\"\"Get list of ports.\"\"\"\n    return self._get(\"/shodan/ports\")\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.protocols","title":"protocols","text":"<pre><code>protocols() -&gt; Any\n</code></pre> <p>Get list of protocols.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def protocols(self) -&gt; Any:\n    \"\"\"Get list of protocols.\"\"\"\n    return self._get(\"/shodan/protocols\")\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.queries","title":"queries","text":"<pre><code>queries(\n    *,\n    page: int | None = None,\n    sort: str | None = None,\n    order: str | None = None,\n) -&gt; Any\n</code></pre> <p>Get queries.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def queries(\n    self, *, page: int | None = None, sort: str | None = None, order: str | None = None\n) -&gt; Any:\n    \"\"\"Get queries.\"\"\"\n    return self._get(\"/shodan/query\", query={\"page\": page, \"sort\": sort, \"order\": order})\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.query_search","title":"query_search","text":"<pre><code>query_search(query: str, *, page: int | None = None) -&gt; Any\n</code></pre> <p>Search queries.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def query_search(self, query: str, *, page: int | None = None) -&gt; Any:\n    \"\"\"Search queries.\"\"\"\n    return self._get(\"/shodan/query/search\", query={\"query\": query, \"page\": page})\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.query_tags","title":"query_tags","text":"<pre><code>query_tags(*, size: int | None = None) -&gt; Any\n</code></pre> <p>Get query tags.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def query_tags(self, *, size: int | None = None) -&gt; Any:\n    \"\"\"Get query tags.\"\"\"\n    return self._get(\"/shodan/query/tags\", query={\"size\": size})\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.scan","title":"scan","text":"<pre><code>scan(ips: str) -&gt; Any\n</code></pre> <p>Start scan for IPs.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def scan(self, ips: str) -&gt; Any:\n    \"\"\"Start scan for IPs.\"\"\"\n    # x-www-form-urlencoded with \"ips\" param\n    return self._post(\"/shodan/scan\", data={\"ips\": ips})\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.scan_by_id","title":"scan_by_id","text":"<pre><code>scan_by_id(scan_id: str) -&gt; Any\n</code></pre> <p>Get scan by ID.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def scan_by_id(self, scan_id: str) -&gt; Any:\n    \"\"\"Get scan by ID.\"\"\"\n    return self._get(f\"/shodan/scans/{urllib.parse.quote(scan_id)}\")\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.scan_internet","title":"scan_internet","text":"<pre><code>scan_internet(port: int, protocol: str) -&gt; Any\n</code></pre> <p>Start internet scan for port and protocol.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def scan_internet(self, port: int, protocol: str) -&gt; Any:\n    \"\"\"Start internet scan for port and protocol.\"\"\"\n    return self._post(\"/shodan/scan/internet\", data={\"port\": port, \"protocol\": protocol})\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.scans","title":"scans","text":"<pre><code>scans() -&gt; Any\n</code></pre> <p>Get list of scans.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def scans(self) -&gt; Any:\n    \"\"\"Get list of scans.\"\"\"\n    return self._get(\"/shodan/scans\")\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.search_host","title":"search_host","text":"<pre><code>search_host(\n    query: str,\n    *,\n    page: int | None = None,\n    facets: str | None = None,\n    minify: bool | None = None,\n) -&gt; Any\n</code></pre> <p>Search for hosts.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def search_host(\n    self,\n    query: str,\n    *,\n    page: int | None = None,\n    facets: str | None = None,\n    minify: bool | None = None,\n) -&gt; Any:\n    \"\"\"Search for hosts.\"\"\"\n    return self._get(\n        \"/shodan/host/search\",\n        query={\"query\": query, \"page\": page, \"facets\": facets, \"minify\": minify},\n    )\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.search_host_count","title":"search_host_count","text":"<pre><code>search_host_count(\n    query: str, *, facets: str | None = None\n) -&gt; Any\n</code></pre> <p>Get count of hosts matching query.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def search_host_count(self, query: str, *, facets: str | None = None) -&gt; Any:\n    \"\"\"Get count of hosts matching query.\"\"\"\n    return self._get(\"/shodan/host/count\", query={\"query\": query, \"facets\": facets})\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.search_host_facets","title":"search_host_facets","text":"<pre><code>search_host_facets() -&gt; Any\n</code></pre> <p>Get available search facets.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def search_host_facets(self) -&gt; Any:\n    \"\"\"Get available search facets.\"\"\"\n    return self._get(\"/shodan/host/search/facets\")\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.search_host_filters","title":"search_host_filters","text":"<pre><code>search_host_filters() -&gt; Any\n</code></pre> <p>Get available search filters.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def search_host_filters(self) -&gt; Any:\n    \"\"\"Get available search filters.\"\"\"\n    return self._get(\"/shodan/host/search/filters\")\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.search_host_tokens","title":"search_host_tokens","text":"<pre><code>search_host_tokens(query: str) -&gt; Any\n</code></pre> <p>Get search tokens for query.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def search_host_tokens(self, query: str) -&gt; Any:\n    \"\"\"Get search tokens for query.\"\"\"\n    return self._get(\"/shodan/host/search/tokens\", query={\"query\": query})\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.tools_httpheaders","title":"tools_httpheaders","text":"<pre><code>tools_httpheaders() -&gt; Any\n</code></pre> <p>Get HTTP headers tool.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def tools_httpheaders(self) -&gt; Any:\n    \"\"\"Get HTTP headers tool.\"\"\"\n    return self._get(\"/tools/httpheaders\")\n</code></pre>"},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.ShodanClient.tools_myip","title":"tools_myip","text":"<pre><code>tools_myip() -&gt; Any\n</code></pre> <p>Get my IP address.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>def tools_myip(self) -&gt; Any:\n    \"\"\"Get my IP address.\"\"\"\n    return self._get(\"/tools/myip\")\n</code></pre>"},{"location":"modulos/clients/shodan/#requestoptions","title":"RequestOptions","text":""},{"location":"modulos/clients/shodan/#sentineliqsdk.clients.shodan.RequestOptions","title":"sentineliqsdk.clients.shodan.RequestOptions  <code>dataclass</code>","text":"<p>Options for HTTP requests.</p> Source code in <code>src/sentineliqsdk/clients/shodan.py</code> <pre><code>@dataclass\nclass RequestOptions:\n    \"\"\"Options for HTTP requests.\"\"\"\n\n    query: Mapping[str, Any] | None = None\n    headers: Mapping[str, str] | None = None\n    data: Mapping[str, Any] | bytes | None = None\n    json_body: Mapping[str, Any] | None = None\n</code></pre>"},{"location":"modulos/clients/shodan/#related-documentation","title":"Related Documentation","text":"<ul> <li>Shodan API Documentation</li> <li>Shodan Analyzer - High-level analyzer using this client</li> <li>HTTPX Client Pattern Guide - General patterns for HTTP clients</li> </ul>"},{"location":"modulos/consumers/kafka_consumer/","title":"Kafka Consumer","text":"<p>O Kafka Consumer \u00e9 uma implementa\u00e7\u00e3o de consumidor de mensagens para Apache Kafka integrada ao SentinelIQ SDK.</p>"},{"location":"modulos/consumers/kafka_consumer/#caracteristicas","title":"Caracter\u00edsticas","text":"<ul> <li>Auto Processing: Processamento autom\u00e1tico de mensagens</li> <li>Error Handling: Tratamento robusto de erros com retry</li> <li>Configuration: Configura\u00e7\u00e3o flex\u00edvel via secrets</li> <li>Security: Suporte a SSL/TLS e autentica\u00e7\u00e3o SASL</li> <li>Statistics: Estat\u00edsticas de processamento em tempo real</li> </ul>"},{"location":"modulos/consumers/kafka_consumer/#uso-basico","title":"Uso B\u00e1sico","text":"<pre><code>from __future__ import annotations\n\nfrom sentineliqsdk import WorkerInput, WorkerConfig\nfrom sentineliqsdk.messaging import QueueConfig, MessageConfig\nfrom sentineliqsdk.consumers import KafkaConsumer\n\n# Configurar entrada\ninput_data = WorkerInput(\n    data_type=\"other\",\n    data=\"consumer_data\",\n    config=WorkerConfig(\n        params={\n            \"max_messages\": 10,\n            \"timeout_ms\": 5000,\n        },\n        secrets={\n            \"kafka.bootstrap_servers\": \"localhost:9092\",\n            \"kafka.security_protocol\": \"PLAINTEXT\",\n            \"kafka.group_id\": \"sentineliq-consumer\",\n        }\n    ),\n)\n\n# Criar consumer\nconsumer = KafkaConsumer(input_data)\n\n# Configurar fila\nqueue_config = QueueConfig(\n    queue_name=\"sentineliq-events\",\n    durable=True,\n    auto_delete=False,\n)\nconsumer.configure_queue(queue_config)\n\n# Configurar mensagens\nmessage_config = MessageConfig(\n    auto_ack=False,\n    prefetch_count=1,\n)\nconsumer.configure_messaging(message_config)\n\n# Consumir mensagens\nreport = consumer.start_consuming()\nprint(f\"Processed {report.messages_processed} messages\")\n</code></pre>"},{"location":"modulos/consumers/kafka_consumer/#configuracao","title":"Configura\u00e7\u00e3o","text":""},{"location":"modulos/consumers/kafka_consumer/#secrets-workerconfigsecrets","title":"Secrets (WorkerConfig.secrets)","text":"<ul> <li><code>kafka.bootstrap_servers</code>: Servidores Kafka (padr\u00e3o: \"localhost:9092\")</li> <li><code>kafka.security_protocol</code>: Protocolo de seguran\u00e7a (PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL)</li> <li><code>kafka.sasl_mechanism</code>: Mecanismo SASL (PLAIN, SCRAM-SHA-256, SCRAM-SHA-512)</li> <li><code>kafka.sasl_username</code>: Usu\u00e1rio SASL</li> <li><code>kafka.sasl_password</code>: Senha SASL</li> <li><code>kafka.ssl_cafile</code>: Arquivo CA SSL</li> <li><code>kafka.ssl_certfile</code>: Arquivo certificado SSL</li> <li><code>kafka.ssl_keyfile</code>: Arquivo chave SSL</li> <li><code>kafka.group_id</code>: ID do grupo de consumidores (padr\u00e3o: \"sentineliq-consumer\")</li> </ul>"},{"location":"modulos/consumers/kafka_consumer/#parametros-workerconfigparams","title":"Par\u00e2metros (WorkerConfig.params)","text":"<ul> <li><code>max_messages</code>: N\u00famero m\u00e1ximo de mensagens a processar (padr\u00e3o: 10)</li> <li><code>timeout_ms</code>: Timeout em milissegundos (padr\u00e3o: 5000)</li> </ul>"},{"location":"modulos/consumers/kafka_consumer/#exemplo-completo","title":"Exemplo Completo","text":"<pre><code>from __future__ import annotations\n\nimport json\nfrom sentineliqsdk import WorkerInput, WorkerConfig\nfrom sentineliqsdk.messaging import QueueConfig, MessageConfig\nfrom sentineliqsdk.consumers import KafkaConsumer\n\ndef consume_events(topic: str, group_id: str) -&gt; dict:\n    \"\"\"Consome eventos do Kafka.\"\"\"\n\n    input_data = WorkerInput(\n        data_type=\"other\",\n        data=\"consumer_data\",\n        config=WorkerConfig(\n            params={\n                \"max_messages\": 50,\n                \"timeout_ms\": 10000,\n            },\n            secrets={\n                \"kafka.bootstrap_servers\": \"kafka1:9092,kafka2:9092\",\n                \"kafka.security_protocol\": \"SASL_SSL\",\n                \"kafka.sasl_mechanism\": \"PLAIN\",\n                \"kafka.sasl_username\": \"user\",\n                \"kafka.sasl_password\": \"password\",\n                \"kafka.group_id\": group_id,\n            }\n        ),\n    )\n\n    consumer = KafkaConsumer(input_data)\n\n    # Configurar fila\n    queue_config = QueueConfig(\n        queue_name=topic,\n        durable=True,\n    )\n    consumer.configure_queue(queue_config)\n\n    # Consumir\n    report = consumer.start_consuming()\n\n    return {\n        \"success\": report.success,\n        \"messages_processed\": report.messages_processed,\n        \"messages_failed\": report.messages_failed,\n        \"processing_time\": report.processing_time,\n    }\n\n# Uso\nresult = consume_events(\"security-events\", \"security-processor\")\nprint(json.dumps(result, indent=2))\n</code></pre>"},{"location":"modulos/consumers/kafka_consumer/#processamento-personalizado","title":"Processamento Personalizado","text":"<p>Para implementar l\u00f3gica de processamento personalizada, estenda a classe <code>KafkaConsumer</code>:</p> <pre><code>from __future__ import annotations\n\nfrom sentineliqsdk.consumers import KafkaConsumer\nfrom sentineliqsdk.messaging import Message\n\nclass SecurityEventConsumer(KafkaConsumer):\n    \"\"\"Consumer especializado para eventos de seguran\u00e7a.\"\"\"\n\n    def _process_message(self, message: Message) -&gt; dict[str, Any]:\n        \"\"\"Processa eventos de seguran\u00e7a.\"\"\"\n        if message.data_type == \"ip\":\n            return self._process_ip_event(message)\n        elif message.data_type == \"url\":\n            return self._process_url_event(message)\n        else:\n            return self._process_generic_event(message)\n\n    def _process_ip_event(self, message: Message) -&gt; dict[str, Any]:\n        \"\"\"Processa eventos relacionados a IPs.\"\"\"\n        return {\n            \"action\": \"analyze_ip\",\n            \"ip\": message.data,\n            \"severity\": \"high\",\n            \"processed_at\": time.time(),\n        }\n\n    def _process_url_event(self, message: Message) -&gt; dict[str, Any]:\n        \"\"\"Processa eventos relacionados a URLs.\"\"\"\n        return {\n            \"action\": \"scan_url\",\n            \"url\": message.data,\n            \"severity\": \"medium\",\n            \"processed_at\": time.time(),\n        }\n\n    def _process_generic_event(self, message: Message) -&gt; dict[str, Any]:\n        \"\"\"Processa eventos gen\u00e9ricos.\"\"\"\n        return {\n            \"action\": \"log_event\",\n            \"data\": message.data,\n            \"processed_at\": time.time(),\n        }\n</code></pre>"},{"location":"modulos/consumers/kafka_consumer/#tratamento-de-erros","title":"Tratamento de Erros","text":"<p>O Kafka Consumer trata automaticamente:</p> <ul> <li>Conex\u00e3o: Falhas de conex\u00e3o com o broker</li> <li>Deserializa\u00e7\u00e3o: Erros de deserializa\u00e7\u00e3o de mensagens</li> <li>Processamento: Falhas no processamento de mensagens</li> <li>Commit: Falhas no commit de offsets</li> </ul> <pre><code>try:\n    report = consumer.start_consuming()\n    if not report.success:\n        print(f\"Consumer failed: {report.error_message}\")\n    else:\n        print(f\"Successfully processed {report.messages_processed} messages\")\nexcept Exception as e:\n    print(f\"Consumer error: {e}\")\nfinally:\n    consumer.stop()\n</code></pre>"},{"location":"modulos/consumers/kafka_consumer/#estatisticas-de-processamento","title":"Estat\u00edsticas de Processamento","text":"<p>O consumer mant\u00e9m estat\u00edsticas em tempo real:</p> <pre><code># Durante o processamento\nsummary = consumer.summary({})\nprint(f\"Processed: {summary['messages_processed']}\")\nprint(f\"Failed: {summary['messages_failed']}\")\nprint(f\"Time: {summary['processing_time']:.2f}s\")\n</code></pre>"},{"location":"modulos/consumers/kafka_consumer/#dependencias","title":"Depend\u00eancias","text":"<ul> <li><code>kafka-python</code>: Cliente Python para Apache Kafka</li> </ul> <p>Instalar com:</p> <pre><code>pip install kafka-python\n</code></pre>"},{"location":"modulos/detectors/asn/","title":"Detector: asn","text":"<p>Detecta n\u00fameros de Sistema Aut\u00f4nomo como <code>AS13335</code>.</p>"},{"location":"modulos/detectors/asn/#como-funciona","title":"Como Funciona","text":"<ul> <li>Usa regex com prefixo <code>AS</code> case\u2011insensitive seguido de 1\u201310 d\u00edgitos.</li> </ul>"},{"location":"modulos/detectors/asn/#uso","title":"Uso","text":"<pre><code>from __future__ import annotations\nfrom sentineliqsdk import Extractor\n\nex = Extractor()\nprint(ex.check_string(\"AS13335\"))  # \"asn\"\n</code></pre>"},{"location":"modulos/detectors/cidr/","title":"Detector: cidr","text":"<p>Detecta redes IPv4/IPv6 no formato CIDR (com prefixo expl\u00edcito).</p>"},{"location":"modulos/detectors/cidr/#como-funciona","title":"Como Funciona","text":"<ul> <li>Exige <code>/</code> e valida com <code>ipaddress.ip_network(value, strict=False)</code>.</li> </ul>"},{"location":"modulos/detectors/cidr/#uso","title":"Uso","text":"<pre><code>from __future__ import annotations\nfrom sentineliqsdk import Extractor\n\nex = Extractor()\nprint(ex.check_string(\"1.2.3.0/24\"))     # \"cidr\"\nprint(ex.check_string(\"2001:db8::/48\"))  # \"cidr\"\n</code></pre>"},{"location":"modulos/detectors/cve/","title":"Detector: cve","text":"<p>Detecta identificadores CVE como <code>CVE-2023-12345</code>.</p>"},{"location":"modulos/detectors/cve/#como-funciona","title":"Como Funciona","text":"<ul> <li>Regex case\u2011insensitive para <code>CVE-\\d{4}-\\d{4,}</code>.</li> </ul>"},{"location":"modulos/detectors/cve/#uso","title":"Uso","text":"<pre><code>from __future__ import annotations\nfrom sentineliqsdk import Extractor\n\nex = Extractor()\nprint(ex.check_string(\"CVE-2023-12345\"))  # \"cve\"\n</code></pre>"},{"location":"modulos/detectors/domain/","title":"Detector: domain","text":"<p>Detecta dom\u00ednios com exatamente dois r\u00f3tulos (<code>left.tld</code>) e TLD alfab\u00e9tico.</p>"},{"location":"modulos/detectors/domain/#como-funciona","title":"Como Funciona","text":"<ul> <li>Normaliza o dom\u00ednio (IDNA quando aplic\u00e1vel) e verifica que h\u00e1 exatamente 2 partes.</li> <li>Garante que o r\u00f3tulo esquerdo obede\u00e7a \u00e0s regras de DNS e que o TLD \u00e9 alfab\u00e9tico.</li> </ul>"},{"location":"modulos/detectors/domain/#uso","title":"Uso","text":"<pre><code>from __future__ import annotations\nfrom sentineliqsdk import Extractor\n\nex = Extractor()\nprint(ex.check_string(\"example.com\"))      # \"domain\"\nprint(ex.check_string(\"sub.example.com\"))  # \"\" (FQDN \u2192 ver detector fqdn)\n</code></pre>"},{"location":"modulos/detectors/domain/#dicas","title":"Dicas","text":"<ul> <li>Para normaliza\u00e7\u00e3o de dom\u00ednios, use <code>normalize_domains=True</code> no <code>Extractor</code>.</li> </ul>"},{"location":"modulos/detectors/fqdn/","title":"Detector: fqdn","text":"<p>Detecta FQDNs com pelo menos 3 r\u00f3tulos e TLD alfab\u00e9tico.</p>"},{"location":"modulos/detectors/fqdn/#como-funciona","title":"Como Funciona","text":"<ul> <li>Normaliza o dom\u00ednio e garante m\u00edn. de 3 r\u00f3tulos; todos os r\u00f3tulos devem ser v\u00e1lidos.</li> </ul>"},{"location":"modulos/detectors/fqdn/#uso","title":"Uso","text":"<pre><code>from __future__ import annotations\nfrom sentineliqsdk import Extractor\n\nex = Extractor()\nprint(ex.check_string(\"sub.example.com\"))  # \"fqdn\"\nprint(ex.check_string(\"example.com\"))      # \"domain\"\n</code></pre>"},{"location":"modulos/detectors/hash/","title":"Detector: hash","text":"<p>Detecta hashes hexadecimais de tamanhos conhecidos (MD5, SHA1, SHA256).</p>"},{"location":"modulos/detectors/hash/#como-funciona","title":"Como Funciona","text":"<ul> <li>Confere se o comprimento est\u00e1 em {32, 40, 64} e se todos os caracteres s\u00e3o hexadecimais.</li> </ul>"},{"location":"modulos/detectors/hash/#uso","title":"Uso","text":"<pre><code>from __future__ import annotations\nfrom sentineliqsdk import Extractor\n\nex = Extractor()\nprint(ex.check_string(\"d41d8cd98f00b204e9800998ecf8427e\"))  # \"hash\" (MD5)\nprint(ex.check_string(\"5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\"))  # \"hash\" (SHA1)\nprint(ex.check_string(\n    \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"\n))  # \"hash\" (SHA256)\n</code></pre>"},{"location":"modulos/detectors/ip/","title":"Detector: ip","text":"<p>Detecta endere\u00e7os IP (IPv4 e IPv6) usando a stdlib <code>ipaddress</code>.</p>"},{"location":"modulos/detectors/ip/#como-funciona","title":"Como Funciona","text":"<ul> <li>Tenta construir <code>ipaddress.ip_address(value)</code>. Se v\u00e1lido, retorna <code>ip</code>.</li> <li>Rejeita strings fora do formato IPv4/IPv6.</li> </ul>"},{"location":"modulos/detectors/ip/#uso","title":"Uso","text":"<pre><code>from __future__ import annotations\nfrom sentineliqsdk import Extractor\n\nex = Extractor()\nprint(ex.check_string(\"1.2.3.4\"))       # \"ip\"\nprint(ex.check_string(\"2001:db8::1\"))   # \"ip\"\n</code></pre>"},{"location":"modulos/detectors/ip/#dicas","title":"Dicas","text":"<ul> <li>Preced\u00eancia da extra\u00e7\u00e3o pode influenciar o tipo retornado quando m\u00faltiplos detectores casam.</li> </ul>"},{"location":"modulos/detectors/ip_port/","title":"Detector: ip_port","text":"<p>Detecta <code>IPv4:porta</code>, validando o IP e o intervalo de porta (1\u201365535).</p>"},{"location":"modulos/detectors/ip_port/#como-funciona","title":"Como Funciona","text":"<ul> <li>Regex simples para <code>a.b.c.d:port</code>, valida IP com <code>ipaddress.IPv4Address</code> e porta <code>1..65535</code>.</li> </ul>"},{"location":"modulos/detectors/ip_port/#uso","title":"Uso","text":"<pre><code>from __future__ import annotations\nfrom sentineliqsdk import Extractor\n\nex = Extractor()\nprint(ex.check_string(\"1.2.3.4:443\"))  # \"ip_port\"\n</code></pre>"},{"location":"modulos/detectors/mac/","title":"Detector: mac","text":"<p>Detecta endere\u00e7os MAC em formatos comuns (dois hex por octeto).</p>"},{"location":"modulos/detectors/mac/#como-funciona","title":"Como Funciona","text":"<ul> <li>Regex para tr\u00eas formatos:</li> <li><code>aa:bb:cc:dd:ee:ff</code></li> <li><code>aa-bb-cc-dd-ee-ff</code></li> <li><code>aabb.ccdd.eeff</code></li> </ul>"},{"location":"modulos/detectors/mac/#uso","title":"Uso","text":"<pre><code>from __future__ import annotations\nfrom sentineliqsdk import Extractor\n\nex = Extractor()\nprint(ex.check_string(\"aa:bb:cc:dd:ee:ff\"))  # \"mac\"\nprint(ex.check_string(\"aa-bb-cc-dd-ee-ff\"))  # \"mac\"\nprint(ex.check_string(\"aabb.ccdd.eeff\"))    # \"mac\"\n</code></pre>"},{"location":"modulos/detectors/mail/","title":"Detector: mail","text":"<p>Detecta endere\u00e7os de e\u2011mail simples (<code>local@domain</code>) e, opcionalmente, <code>mailto:</code>.</p>"},{"location":"modulos/detectors/mail/#como-funciona","title":"Como Funciona","text":"<ul> <li>Usa <code>email.utils.parseaddr</code> para validar; exige <code>@</code> e dom\u00ednio com <code>.</code>.</li> <li>Quando <code>support_mailto=True</code>, remove o prefixo <code>mailto:</code> antes da valida\u00e7\u00e3o.</li> </ul>"},{"location":"modulos/detectors/mail/#uso","title":"Uso","text":"<pre><code>from __future__ import annotations\nfrom sentineliqsdk import Extractor\n\nex = Extractor()\nprint(ex.check_string(\"alice@example.com\"))  # \"mail\"\n\nex = Extractor(support_mailto=True)\nprint(ex.check_string(\"mailto:bob@example.com\"))  # \"mail\"\n</code></pre>"},{"location":"modulos/detectors/registry/","title":"Detector: registry","text":"<p>Detecta caminhos de registro do Windows iniciando por hives conhecidos.</p>"},{"location":"modulos/detectors/registry/#como-funciona","title":"Como Funciona","text":"<ul> <li>Verifica prefixos: <code>HKEY</code>, <code>HKLM</code>, <code>HKCU</code>, <code>HKCR</code>, <code>HKCC</code> e presen\u00e7a de <code>\\\\</code>.</li> </ul>"},{"location":"modulos/detectors/registry/#uso","title":"Uso","text":"<pre><code>from __future__ import annotations\nfrom sentineliqsdk import Extractor\n\nex = Extractor()\nprint(ex.check_string(\"HKEY_LOCAL_MACHINE\\\\Software\\\\Microsoft\"))  # \"registry\"\n</code></pre>"},{"location":"modulos/detectors/uri_path/","title":"Detector: uri_path","text":"<p>Detecta URIs n\u00e3o HTTP(S) quando h\u00e1 esquema e <code>://</code>.</p>"},{"location":"modulos/detectors/uri_path/#como-funciona","title":"Como Funciona","text":"<ul> <li>Ignora <code>http://</code> e <code>https://</code> (cobertos pelo detector <code>url</code>).</li> <li>Usa <code>urllib.parse.urlparse</code>; se h\u00e1 <code>scheme</code>, retorna <code>uri_path</code>.</li> </ul>"},{"location":"modulos/detectors/uri_path/#uso","title":"Uso","text":"<pre><code>from __future__ import annotations\nfrom sentineliqsdk import Extractor\n\nex = Extractor()\nprint(ex.check_string(\"ftp://example.com/file.txt\"))  # \"uri_path\"\nprint(ex.check_string(\"ssh://host\"))                  # \"uri_path\"\n</code></pre>"},{"location":"modulos/detectors/url/","title":"Detector: url","text":"<p>Detecta URLs HTTP/HTTPS quando o esquema e o <code>netloc</code> est\u00e3o presentes.</p>"},{"location":"modulos/detectors/url/#como-funciona","title":"Como Funciona","text":"<ul> <li>Verifica prefixo <code>http://</code> ou <code>https://</code> e usa <code>urllib.parse.urlparse</code>.</li> <li>Retorna <code>url</code> quando <code>scheme</code> \u2208 {<code>http</code>, <code>https</code>} e h\u00e1 <code>netloc</code>.</li> </ul>"},{"location":"modulos/detectors/url/#uso","title":"Uso","text":"<pre><code>from __future__ import annotations\nfrom sentineliqsdk import Extractor\n\nex = Extractor()\nprint(ex.check_string(\"https://example.com\"))       # \"url\"\nprint(ex.check_string(\"http://example.com/path\"))   # \"url\"\n</code></pre>"},{"location":"modulos/detectors/url/#dicas","title":"Dicas","text":"<ul> <li>Use <code>normalize_urls=True</code> no <code>Extractor</code> quando desejar normaliza\u00e7\u00e3o.</li> </ul>"},{"location":"modulos/detectors/user-agent/","title":"Detector: user-agent","text":"<p>Detecta cadeias de User-Agent com base em prefixos conhecidos.</p>"},{"location":"modulos/detectors/user-agent/#como-funciona","title":"Como Funciona","text":"<ul> <li>Verifica se a string come\u00e7a com um dos prefixos listados (por exemplo, <code>Mozilla/5.0</code>).</li> </ul>"},{"location":"modulos/detectors/user-agent/#uso","title":"Uso","text":"<pre><code>from __future__ import annotations\nfrom sentineliqsdk import Extractor\n\nex = Extractor()\nprint(ex.check_string(\"Mozilla/5.0 (Windows NT 10.0; Win64; x64)\"))  # \"user-agent\"\n</code></pre>"},{"location":"modulos/pipelines/security_pipeline/","title":"Security Pipeline","text":"<p>O Security Pipeline \u00e9 uma implementa\u00e7\u00e3o especializada de pipeline para detec\u00e7\u00e3o e resposta autom\u00e1tica a amea\u00e7as de seguran\u00e7a.</p>"},{"location":"modulos/pipelines/security_pipeline/#caracteristicas","title":"Caracter\u00edsticas","text":"<ul> <li>Threat Detection: Detec\u00e7\u00e3o autom\u00e1tica de amea\u00e7as usando analyzers</li> <li>Automated Response: Resposta autom\u00e1tica baseada na an\u00e1lise</li> <li>Routing Rules: Regras de roteamento baseadas em prioridade e tipo de dados</li> <li>Integration: Integra\u00e7\u00e3o completa com Producers, Consumers, Analyzers e Responders</li> </ul>"},{"location":"modulos/pipelines/security_pipeline/#uso-basico","title":"Uso B\u00e1sico","text":"<pre><code>from __future__ import annotations\n\nfrom sentineliqsdk import WorkerInput, WorkerConfig\nfrom sentineliqsdk.messaging import Message, MessageMetadata\nfrom sentineliqsdk.pipelines import SecurityPipeline\n\n# Configurar pipeline\ninput_data = WorkerInput(\n    data_type=\"other\",\n    data=\"security_pipeline\",\n    config=WorkerConfig(\n        params={\n            \"auto_respond\": True,\n            \"response_threshold\": \"suspicious\",\n        },\n        secrets={\n            \"kafka.bootstrap_servers\": \"localhost:9092\",\n            \"kafka.security_protocol\": \"PLAINTEXT\",\n            \"shodan.api_key\": \"your_shodan_api_key\",\n        }\n    ),\n)\n\npipeline = SecurityPipeline(input_data)\n\n# Processar mensagem de amea\u00e7a\nmessage = Message(\n    message_type=\"event\",\n    data_type=\"ip\",\n    data=\"192.168.1.100\",\n    metadata=MessageMetadata(\n        message_id=\"threat_001\",\n        priority=\"high\",\n        tags={\"source\": \"firewall\", \"event_type\": \"threat_detected\"}\n    ),\n    payload={\"secrets\": {\"shodan.api_key\": \"your_shodan_api_key\"}}\n)\n\nresult = pipeline.process_message(message)\nprint(f\"Pipeline result: {result['pipeline_status']}\")\n</code></pre>"},{"location":"modulos/pipelines/security_pipeline/#configuracao","title":"Configura\u00e7\u00e3o","text":""},{"location":"modulos/pipelines/security_pipeline/#parametros-workerconfigparams","title":"Par\u00e2metros (WorkerConfig.params)","text":"<ul> <li><code>auto_respond</code>: Habilitar resposta autom\u00e1tica (padr\u00e3o: True)</li> <li><code>response_threshold</code>: Limiar para resposta (\"info\", \"suspicious\", \"malicious\")</li> </ul>"},{"location":"modulos/pipelines/security_pipeline/#secrets-workerconfigsecrets","title":"Secrets (WorkerConfig.secrets)","text":"<ul> <li><code>kafka.bootstrap_servers</code>: Servidores Kafka</li> <li><code>kafka.security_protocol</code>: Protocolo de seguran\u00e7a</li> <li><code>shodan.api_key</code>: Chave da API do Shodan</li> <li>Outros secrets espec\u00edficos dos analyzers/responders</li> </ul>"},{"location":"modulos/pipelines/security_pipeline/#analyzers-registrados","title":"Analyzers Registrados","text":"<p>O Security Pipeline registra automaticamente:</p> <ul> <li>IP: ShodanAnalyzer</li> <li>Domain: ShodanAnalyzer</li> <li>Hash: (quando dispon\u00edvel) VirusTotalAnalyzer</li> <li>URL: (quando dispon\u00edvel) VirusTotalAnalyzer</li> </ul>"},{"location":"modulos/pipelines/security_pipeline/#responders-registrados","title":"Responders Registrados","text":"<p>O Security Pipeline registra automaticamente:</p> <ul> <li>block: BlockIPResponder (quando dispon\u00edvel)</li> <li>alert: NotifyResponder (quando dispon\u00edvel)</li> <li>quarantine: QuarantineResponder (quando dispon\u00edvel)</li> </ul>"},{"location":"modulos/pipelines/security_pipeline/#regras-de-roteamento","title":"Regras de Roteamento","text":"<p>O pipeline aplica regras de roteamento baseadas em:</p> <ol> <li>Prioridade Cr\u00edtica: <code>priority == \"critical\"</code> \u2192 \"immediate_response\"</li> <li>Dados de Threat Intel: <code>data_type in [\"ip\", \"domain\"]</code> \u2192 \"threat_intel\"</li> <li>An\u00e1lise Padr\u00e3o: Outros tipos \u2192 \"standard_analysis\"</li> </ol>"},{"location":"modulos/pipelines/security_pipeline/#determinacao-de-acoes","title":"Determina\u00e7\u00e3o de A\u00e7\u00f5es","text":"<p>O pipeline determina a\u00e7\u00f5es baseadas na taxonomia:</p>"},{"location":"modulos/pipelines/security_pipeline/#nivel-malicious","title":"N\u00edvel Malicious","text":"<pre><code>{\n    \"action\": \"block\",\n    \"target\": \"192.168.1.100\",\n    \"reason\": \"malicious\",\n    \"confidence\": \"high\",\n    \"source\": \"shodan\"\n}\n</code></pre>"},{"location":"modulos/pipelines/security_pipeline/#nivel-suspicious","title":"N\u00edvel Suspicious","text":"<pre><code>{\n    \"action\": \"alert\",\n    \"target\": \"192.168.1.100\", \n    \"reason\": \"suspicious\",\n    \"confidence\": \"medium\",\n    \"source\": \"shodan\"\n}\n</code></pre>"},{"location":"modulos/pipelines/security_pipeline/#prioridade-critica","title":"Prioridade Cr\u00edtica","text":"<pre><code>{\n    \"action\": \"escalate\",\n    \"target\": \"192.168.1.100\",\n    \"reason\": \"critical_priority\",\n    \"confidence\": \"high\",\n    \"source\": \"security_pipeline\"\n}\n</code></pre>"},{"location":"modulos/pipelines/security_pipeline/#exemplo-completo","title":"Exemplo Completo","text":"<pre><code>from __future__ import annotations\n\nimport json\nfrom sentineliqsdk import WorkerInput, WorkerConfig\nfrom sentineliqsdk.messaging import Message, MessageMetadata\nfrom sentineliqsdk.pipelines import SecurityPipeline\n\ndef process_security_threat(ip: str, source: str = \"firewall\") -&gt; dict:\n    \"\"\"Processa uma amea\u00e7a de seguran\u00e7a atrav\u00e9s do pipeline.\"\"\"\n\n    # Configurar pipeline\n    input_data = WorkerInput(\n        data_type=\"other\",\n        data=\"security_pipeline\",\n        config=WorkerConfig(\n            params={\n                \"auto_respond\": True,\n                \"response_threshold\": \"suspicious\",\n            },\n            secrets={\n                \"kafka.bootstrap_servers\": \"localhost:9092\",\n                \"kafka.security_protocol\": \"PLAINTEXT\",\n                \"shodan.api_key\": \"your_shodan_api_key\",\n            }\n        ),\n    )\n\n    pipeline = SecurityPipeline(input_data)\n\n    # Criar mensagem de amea\u00e7a\n    message = Message(\n        message_type=\"event\",\n        data_type=\"ip\",\n        data=ip,\n        metadata=MessageMetadata(\n            message_id=f\"threat_{int(time.time())}\",\n            priority=\"high\",\n            tags={\"source\": source, \"event_type\": \"threat_detected\"}\n        ),\n        payload={\"secrets\": {\"shodan.api_key\": \"your_shodan_api_key\"}}\n    )\n\n    # Processar atrav\u00e9s do pipeline\n    result = pipeline.process_message(message)\n\n    return {\n        \"success\": result.get(\"pipeline_status\") == \"completed\",\n        \"message_id\": result.get(\"message_id\"),\n        \"analysis\": result.get(\"analysis\", {}),\n        \"actions\": result.get(\"actions\", []),\n        \"responder_results\": result.get(\"responder_results\", []),\n    }\n\n# Uso\nthreats = [\"192.168.1.100\", \"10.0.0.50\", \"172.16.0.25\"]\nresults = []\n\nfor threat_ip in threats:\n    result = process_security_threat(threat_ip, \"firewall\")\n    results.append(result)\n    print(f\"Processed threat {threat_ip}: {result['success']}\")\n\nprint(json.dumps(results, indent=2))\n</code></pre>"},{"location":"modulos/pipelines/security_pipeline/#integracao-com-consumer","title":"Integra\u00e7\u00e3o com Consumer","text":"<pre><code>from sentineliqsdk.consumers import PipelineConsumer\nfrom sentineliqsdk.pipelines import SecurityPipeline\n\n# Criar pipeline\npipeline = SecurityPipeline(pipeline_input)\n\n# Criar consumer com pipeline\nconsumer = PipelineConsumer(consumer_input, pipeline=pipeline)\n\n# Configurar e consumir\nconsumer.configure_queue(QueueConfig(queue_name=\"security-events\"))\nconsumer.configure_messaging(MessageConfig(auto_ack=False))\n\n# Processar mensagens\nreport = consumer.start_consuming()\nprint(f\"Processed {report.messages_processed} security events\")\n</code></pre>"},{"location":"modulos/pipelines/security_pipeline/#monitoramento","title":"Monitoramento","text":"<p>O pipeline fornece estat\u00edsticas de processamento:</p> <pre><code># Obter estat\u00edsticas\nsummary = pipeline.summary({})\nprint(f\"Messages processed: {summary['messages_processed']}\")\nprint(f\"Messages failed: {summary['messages_failed']}\")\nprint(f\"Processing time: {summary['processing_time']:.2f}s\")\nprint(f\"Registered analyzers: {summary['registered_analyzers']}\")\nprint(f\"Registered responders: {summary['registered_responders']}\")\n</code></pre>"},{"location":"modulos/pipelines/security_pipeline/#tratamento-de-erros","title":"Tratamento de Erros","text":"<p>O pipeline trata automaticamente:</p> <ul> <li>Analyzer n\u00e3o encontrado: Retorna erro para data_type n\u00e3o suportado</li> <li>Falha na an\u00e1lise: Registra falha e continua processamento</li> <li>Falha no responder: Registra erro espec\u00edfico do responder</li> <li>Exce\u00e7\u00f5es gerais: Captura e registra todas as exce\u00e7\u00f5es</li> </ul>"},{"location":"modulos/pipelines/security_pipeline/#dependencias","title":"Depend\u00eancias","text":"<ul> <li><code>kafka-python</code>: Para integra\u00e7\u00e3o com Kafka</li> <li>Analyzers registrados (ex: ShodanAnalyzer)</li> <li>Responders registrados (ex: BlockIPResponder)</li> </ul> <p>Instalar com:</p> <pre><code>pip install kafka-python\n</code></pre>"},{"location":"modulos/producers/kafka_producer/","title":"Kafka Producer","text":"<p>O Kafka Producer \u00e9 uma implementa\u00e7\u00e3o de produtor de mensagens para Apache Kafka integrada ao SentinelIQ SDK.</p>"},{"location":"modulos/producers/kafka_producer/#caracteristicas","title":"Caracter\u00edsticas","text":"<ul> <li>Delivery Confirmation: Confirma\u00e7\u00e3o de entrega das mensagens</li> <li>Error Handling: Tratamento robusto de erros</li> <li>Configuration: Configura\u00e7\u00e3o flex\u00edvel via secrets</li> <li>Security: Suporte a SSL/TLS e autentica\u00e7\u00e3o SASL</li> <li>Metadata: Rastreamento completo de metadados das mensagens</li> </ul>"},{"location":"modulos/producers/kafka_producer/#uso-basico","title":"Uso B\u00e1sico","text":"<pre><code>from __future__ import annotations\n\nfrom sentineliqsdk import WorkerInput, WorkerConfig\nfrom sentineliqsdk.messaging import QueueConfig, MessageConfig\nfrom sentineliqsdk.producers import KafkaProducer\n\n# Configurar entrada\ninput_data = WorkerInput(\n    data_type=\"other\",\n    data=\"Hello from SentinelIQ!\",\n    config=WorkerConfig(\n        secrets={\n            \"kafka.bootstrap_servers\": \"localhost:9092\",\n            \"kafka.security_protocol\": \"PLAINTEXT\",\n        }\n    ),\n)\n\n# Criar producer\nproducer = KafkaProducer(input_data)\n\n# Configurar fila\nqueue_config = QueueConfig(\n    queue_name=\"sentineliq-events\",\n    durable=True,\n    auto_delete=False,\n)\nproducer.configure_queue(queue_config)\n\n# Configurar mensagens\nmessage_config = MessageConfig(\n    delivery_mode=\"persistent\",\n    mandatory=True,\n)\nproducer.configure_messaging(message_config)\n\n# Publicar mensagem\nreport = producer.run()\nprint(f\"Message published: {report.message_id}\")\n</code></pre>"},{"location":"modulos/producers/kafka_producer/#configuracao","title":"Configura\u00e7\u00e3o","text":""},{"location":"modulos/producers/kafka_producer/#secrets-workerconfigsecrets","title":"Secrets (WorkerConfig.secrets)","text":"<ul> <li><code>kafka.bootstrap_servers</code>: Servidores Kafka (padr\u00e3o: \"localhost:9092\")</li> <li><code>kafka.security_protocol</code>: Protocolo de seguran\u00e7a (PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL)</li> <li><code>kafka.sasl_mechanism</code>: Mecanismo SASL (PLAIN, SCRAM-SHA-256, SCRAM-SHA-512)</li> <li><code>kafka.sasl_username</code>: Usu\u00e1rio SASL</li> <li><code>kafka.sasl_password</code>: Senha SASL</li> <li><code>kafka.ssl_cafile</code>: Arquivo CA SSL</li> <li><code>kafka.ssl_certfile</code>: Arquivo certificado SSL</li> <li><code>kafka.ssl_keyfile</code>: Arquivo chave SSL</li> </ul>"},{"location":"modulos/producers/kafka_producer/#parametros-workerconfigparams","title":"Par\u00e2metros (WorkerConfig.params)","text":"<ul> <li><code>correlation_id</code>: ID de correla\u00e7\u00e3o para rastreamento</li> </ul>"},{"location":"modulos/producers/kafka_producer/#exemplo-completo","title":"Exemplo Completo","text":"<pre><code>from __future__ import annotations\n\nimport json\nfrom sentineliqsdk import WorkerInput, WorkerConfig\nfrom sentineliqsdk.messaging import QueueConfig, MessageConfig\nfrom sentineliqsdk.producers import KafkaProducer\n\ndef publish_event(data: str, topic: str) -&gt; dict:\n    \"\"\"Publica um evento no Kafka.\"\"\"\n\n    input_data = WorkerInput(\n        data_type=\"other\",\n        data=data,\n        config=WorkerConfig(\n            params={\"correlation_id\": \"event-123\"},\n            secrets={\n                \"kafka.bootstrap_servers\": \"kafka1:9092,kafka2:9092\",\n                \"kafka.security_protocol\": \"SASL_SSL\",\n                \"kafka.sasl_mechanism\": \"PLAIN\",\n                \"kafka.sasl_username\": \"user\",\n                \"kafka.sasl_password\": \"password\",\n            }\n        ),\n    )\n\n    producer = KafkaProducer(input_data)\n\n    # Configurar fila\n    queue_config = QueueConfig(\n        queue_name=topic,\n        durable=True,\n    )\n    producer.configure_queue(queue_config)\n\n    # Publicar\n    report = producer.run()\n\n    return {\n        \"success\": report.success,\n        \"message_id\": report.message_id,\n        \"topic\": report.queue_name,\n        \"delivery_confirmed\": report.delivery_confirmed,\n    }\n\n# Uso\nresult = publish_event(\"Security alert detected\", \"security-events\")\nprint(json.dumps(result, indent=2))\n</code></pre>"},{"location":"modulos/producers/kafka_producer/#tratamento-de-erros","title":"Tratamento de Erros","text":"<p>O Kafka Producer trata automaticamente:</p> <ul> <li>Conex\u00e3o: Falhas de conex\u00e3o com o broker</li> <li>Serializa\u00e7\u00e3o: Erros de serializa\u00e7\u00e3o de mensagens</li> <li>Timeout: Timeouts de entrega</li> <li>Retry: Tentativas autom\u00e1ticas de reenvio</li> </ul> <pre><code>try:\n    report = producer.run()\n    if not report.success:\n        print(f\"Failed to publish: {report.error_message}\")\nexcept Exception as e:\n    print(f\"Producer error: {e}\")\nfinally:\n    producer.close()\n</code></pre>"},{"location":"modulos/producers/kafka_producer/#dependencias","title":"Depend\u00eancias","text":"<ul> <li><code>kafka-python</code>: Cliente Python para Apache Kafka</li> </ul> <p>Instalar com:</p> <pre><code>pip install kafka-python\n</code></pre>"},{"location":"modulos/responders/gmail_smtp/","title":"Gmail SMTP Responder","text":"<p>Envia e\u2011mail via Gmail SMTP (smtp.gmail.com:587) usando STARTTLS. Por padr\u00e3o, roda em dry\u2011run; o envio real exige habilitar as portas de seguran\u00e7a.</p>"},{"location":"modulos/responders/gmail_smtp/#visao-geral","title":"Vis\u00e3o Geral","text":"<ul> <li>Destinat\u00e1rio: <code>WorkerInput.data</code> (<code>data_type == \"mail\"</code>).</li> <li>Conte\u00fado: <code>email.subject</code> e <code>email.body</code>.</li> <li>Remetente: <code>email.from</code> (padr\u00e3o: <code>gmail.username</code>).</li> <li>Autentica\u00e7\u00e3o: <code>gmail.username</code> / <code>gmail.password</code>.</li> <li>Portas de seguran\u00e7a: <code>config.params.execute=True</code> e <code>config.params.include_dangerous=True</code>.</li> </ul>"},{"location":"modulos/responders/gmail_smtp/#como-funciona","title":"Como Funciona","text":"<ul> <li>Monta <code>EmailMessage</code> e envia via <code>smtplib.SMTP</code> com STARTTLS; em dry\u2011run, apenas retorna o plano.</li> </ul>"},{"location":"modulos/responders/gmail_smtp/#instanciacao","title":"Instancia\u00e7\u00e3o","text":"<pre><code>from __future__ import annotations\nimport json\nfrom sentineliqsdk import WorkerInput\nfrom sentineliqsdk.responders.smtp_gmail import GmailSmtpResponder\n\ninp = WorkerInput(data_type=\"mail\", data=\"destinatario@example.com\")\nreport = GmailSmtpResponder(inp).execute()\nprint(json.dumps(report.full_report, ensure_ascii=False))\n</code></pre>"},{"location":"modulos/responders/gmail_smtp/#configuracao","title":"Configura\u00e7\u00e3o","text":"<p>Preferencial (program\u00e1tica):</p> <ul> <li><code>WorkerConfig.secrets</code>:</li> <li><code>gmail.username</code> (ou <code>smtp.username</code>)</li> <li><code>gmail.password</code> (ou <code>smtp.password</code>)</li> <li><code>WorkerConfig.params</code>:</li> <li><code>email.from</code> (opcional)</li> <li><code>email.subject</code></li> <li><code>email.body</code></li> <li><code>execute</code> (bool) e <code>include_dangerous</code> (bool)</li> </ul> <p>Sem suporte por vari\u00e1veis de ambiente.</p> <p>Exemplo (dataclasses):</p> <pre><code>from sentineliqsdk import WorkerInput, WorkerConfig\n\ninp = WorkerInput(\n    data_type=\"mail\",\n    data=\"destinatario@example.com\",\n    config=WorkerConfig(\n        secrets={\"gmail\": {\"username\": \"user@gmail.com\", \"password\": \"APP-PASS\"}},\n        params={\n            \"email\": {\"from\": \"user@gmail.com\", \"subject\": \"Oi\", \"body\": \"Ol\u00e1\"},\n            \"execute\": True,\n            \"include_dangerous\": True,\n        },\n    ),\n)\n</code></pre>"},{"location":"modulos/responders/gmail_smtp/#uso-correto","title":"Uso Correto","text":"<ul> <li>Use App Passwords no Gmail.</li> <li>Defina os dois sinalizadores de seguran\u00e7a para envio real.</li> </ul>"},{"location":"modulos/responders/gmail_smtp/#retorno","title":"Retorno","text":"<ul> <li><code>ResponderReport</code> com <code>action</code>, <code>provider</code>, <code>server</code>, <code>port</code>, <code>from</code>, <code>to</code>, <code>subject</code>,   <code>dry_run</code> e, em envio real, <code>status</code>.</li> </ul>"},{"location":"modulos/responders/gmail_smtp/#metadata","title":"Metadata","text":"<p>O responder inclui <code>full_report.metadata</code> com:</p> <pre><code>{\n  \"Name\": \"Gmail SMTP Responder\",\n  \"Description\": \"Send an email via Gmail SMTP with STARTTLS\",\n  \"Author\": [\"SentinelIQ Team &lt;team@sentineliq.com.br&gt;\"],\n  \"License\": \"SentinelIQ License\",\n  \"pattern\": \"smtp\",\n  \"doc_pattern\": \"MkDocs module page; customer-facing usage and API\",\n  \"doc\": \"https://killsearch.github.io/sentineliqsdk/modulos/responders/gmail_smtp/\",\n  \"VERSION\": \"STABLE\"\n}\n</code></pre>"},{"location":"modulos/responders/kafka_rest/","title":"Kafka REST Responder","text":"<p>Publica mensagens em um t\u00f3pico Kafka via Confluent REST Proxy. Por padr\u00e3o, roda em dry\u2011run; o envio real exige os dois sinalizadores de seguran\u00e7a.</p>"},{"location":"modulos/responders/kafka_rest/#visao-geral","title":"Vis\u00e3o Geral","text":"<ul> <li>Endpoint: <code>kafka.base_url</code> (ex.: <code>http://localhost:8082</code>)</li> <li>T\u00f3pico: <code>kafka.topic</code></li> <li>Valor: <code>kafka.value</code> (opcional; padr\u00e3o \u00e9 <code>WorkerInput.data</code>)</li> <li>Cabe\u00e7alhos: <code>kafka.headers</code> (dict)</li> <li>Autentica\u00e7\u00e3o: <code>kafka.basic_auth</code> (\"user:pass\") ou <code>kafka.username/password</code></li> <li>Portas de seguran\u00e7a: <code>config.params.execute</code> e <code>config.params.include_dangerous</code></li> </ul>"},{"location":"modulos/responders/kafka_rest/#como-funciona","title":"Como Funciona","text":"<ul> <li>Usa <code>httpx.Client</code> para enviar <code>POST {base}/topics/{topic}</code> com payload <code>{ \"records\": [{\"value\": value}] }</code>.</li> <li>Em dry\u2011run, retorna o plano; em execu\u00e7\u00e3o real, adiciona <code>status</code> e <code>http_status</code> ao relat\u00f3rio.</li> </ul>"},{"location":"modulos/responders/kafka_rest/#instanciacao","title":"Instancia\u00e7\u00e3o","text":"<pre><code>from __future__ import annotations\nimport json\nfrom sentineliqsdk import WorkerInput\nfrom sentineliqsdk.responders.kafka_rest import KafkaResponder\n\ninp = WorkerInput(data_type=\"other\", data=\"hello\")\nreport = KafkaResponder(inp).execute()\nprint(json.dumps(report.full_report, ensure_ascii=False))\n</code></pre>"},{"location":"modulos/responders/kafka_rest/#configuracao","title":"Configura\u00e7\u00e3o","text":"<p>Preferencial (program\u00e1tica):</p> <ul> <li><code>WorkerConfig.params</code>:</li> <li><code>kafka.base_url</code>, <code>kafka.topic</code></li> <li><code>kafka.value</code> (opcional)</li> <li><code>kafka.headers</code> (dict)</li> <li><code>execute</code> (bool) e <code>include_dangerous</code> (bool)</li> <li><code>WorkerConfig.secrets</code>:</li> <li><code>kafka.basic_auth</code> (\"user:pass\") ou <code>kafka.username</code>/<code>kafka.password</code></li> </ul> <p>Sem suporte por vari\u00e1veis de ambiente.</p>"},{"location":"modulos/responders/kafka_rest/#uso-correto","title":"Uso Correto","text":"<ul> <li>Defina o t\u00f3pico e o valor; use cabe\u00e7alhos adicionais conforme o proxy/seguran\u00e7a do cluster.</li> <li>Para Basic Auth, defina <code>kafka.basic_auth = \"user:pass\"</code> em <code>WorkerConfig.secrets</code>.</li> </ul>"},{"location":"modulos/responders/kafka_rest/#retorno","title":"Retorno","text":"<ul> <li><code>ResponderReport</code> com <code>action</code>, <code>provider</code>, <code>url</code>, <code>topic</code>, <code>dry_run</code> e, em execu\u00e7\u00e3o real,   <code>status</code> e <code>http_status</code>.</li> </ul>"},{"location":"modulos/responders/kafka_rest/#metadata","title":"Metadata","text":"<p>O responder inclui <code>full_report.metadata</code> com:</p> <pre><code>{\n  \"Name\": \"Kafka REST Responder\",\n  \"Description\": \"Publish messages to Kafka via Confluent REST Proxy\",\n  \"Author\": [\"SentinelIQ Team &lt;team@sentineliq.com.br&gt;\"],\n  \"License\": \"SentinelIQ License\",\n  \"pattern\": \"kafka\",\n  \"doc_pattern\": \"MkDocs module page; customer-facing usage and API\",\n  \"doc\": \"https://killsearch.github.io/sentineliqsdk/modulos/responders/kafka_rest/\",\n  \"VERSION\": \"STABLE\"\n}\n</code></pre>"},{"location":"modulos/responders/outlook_smtp/","title":"Outlook SMTP Responder","text":"<p>Envia e\u2011mail via Outlook/Office365 SMTP (smtp.office365.com:587) com STARTTLS. Por padr\u00e3o, executa em dry\u2011run; o envio real requer portas de seguran\u00e7a habilitadas.</p>"},{"location":"modulos/responders/outlook_smtp/#visao-geral","title":"Vis\u00e3o Geral","text":"<ul> <li>Destinat\u00e1rio: <code>WorkerInput.data</code> (<code>data_type == \"mail\"</code>).</li> <li>Conte\u00fado: <code>email.subject</code> e <code>email.body</code>.</li> <li>Remetente: <code>email.from</code> (padr\u00e3o: <code>outlook.username</code>).</li> <li>Autentica\u00e7\u00e3o: <code>outlook.username</code> / <code>outlook.password</code>.</li> <li>Portas de seguran\u00e7a: <code>config.params.execute=True</code> e <code>config.params.include_dangerous=True</code>.</li> </ul>"},{"location":"modulos/responders/outlook_smtp/#instanciacao","title":"Instancia\u00e7\u00e3o","text":"<pre><code>from __future__ import annotations\nimport json\nfrom sentineliqsdk import WorkerInput\nfrom sentineliqsdk.responders.smtp_outlook import OutlookSmtpResponder\n\ninp = WorkerInput(data_type=\"mail\", data=\"destinatario@example.com\")\nreport = OutlookSmtpResponder(inp).execute()\nprint(json.dumps(report.full_report, ensure_ascii=False))\n</code></pre>"},{"location":"modulos/responders/outlook_smtp/#configuracao","title":"Configura\u00e7\u00e3o","text":"<p>Preferencial (program\u00e1tica):</p> <ul> <li><code>WorkerConfig.secrets</code>:</li> <li><code>outlook.username</code> (ou <code>smtp.username</code>)</li> <li><code>outlook.password</code> (ou <code>smtp.password</code>)</li> <li><code>WorkerConfig.params</code>:</li> <li><code>email.from</code> (opcional)</li> <li><code>email.subject</code></li> <li><code>email.body</code></li> <li><code>execute</code> (bool) e <code>include_dangerous</code> (bool)</li> </ul> <p>Sem suporte por vari\u00e1veis de ambiente.</p>"},{"location":"modulos/responders/outlook_smtp/#uso-correto","title":"Uso Correto","text":"<ul> <li>Defina os dois sinalizadores de seguran\u00e7a para envio real.</li> </ul>"},{"location":"modulos/responders/outlook_smtp/#retorno","title":"Retorno","text":"<ul> <li><code>ResponderReport</code> com <code>action</code>, <code>provider</code>, <code>server</code>, <code>port</code>, <code>from</code>, <code>to</code>, <code>subject</code>,   <code>dry_run</code> e, em envio real, <code>status</code>.</li> </ul>"},{"location":"modulos/responders/outlook_smtp/#metadata","title":"Metadata","text":"<p>O responder inclui <code>full_report.metadata</code> com:</p> <pre><code>{\n  \"Name\": \"Outlook SMTP Responder\",\n  \"Description\": \"Send an email via Outlook/Office365 SMTP with STARTTLS\",\n  \"Author\": [\"SentinelIQ Team &lt;team@sentineliq.com.br&gt;\"],\n  \"License\": \"SentinelIQ License\",\n  \"pattern\": \"smtp\",\n  \"doc_pattern\": \"MkDocs module page; customer-facing usage and API\",\n  \"doc\": \"https://killsearch.github.io/sentineliqsdk/modulos/responders/outlook_smtp/\",\n  \"VERSION\": \"STABLE\"\n}\n</code></pre>"},{"location":"modulos/responders/rabbitmq_http/","title":"RabbitMQ HTTP Responder","text":"<p>Publica mensagens em um exchange do RabbitMQ via API HTTP. Por padr\u00e3o, roda em dry\u2011run; o envio real exige os dois sinalizadores de seguran\u00e7a.</p>"},{"location":"modulos/responders/rabbitmq_http/#visao-geral","title":"Vis\u00e3o Geral","text":"<ul> <li>Base: <code>rabbitmq.api_url</code> (ex.: <code>http://localhost:15672</code>)</li> <li>VHost: <code>rabbitmq.vhost</code> (padr\u00e3o: <code>/</code>)</li> <li>Exchange: <code>rabbitmq.exchange</code> (obrigat\u00f3rio)</li> <li>Routing Key: <code>rabbitmq.routing_key</code> (padr\u00e3o: vazio)</li> <li>Autentica\u00e7\u00e3o: <code>rabbitmq.username</code>/<code>rabbitmq.password</code></li> <li>Propriedades: <code>rabbitmq.properties</code> (dict)</li> <li>Mensagem: <code>rabbitmq.message</code> (padr\u00e3o: <code>WorkerInput.data</code>)</li> <li>Portas de seguran\u00e7a: <code>config.params.execute</code> e <code>config.params.include_dangerous</code></li> </ul>"},{"location":"modulos/responders/rabbitmq_http/#como-funciona","title":"Como Funciona","text":"<ul> <li>Usa <code>httpx.Client</code> para enviar <code>POST {base}/api/exchanges/{vhost}/{exchange}/publish</code> com payload JSON.</li> <li>Em dry\u2011run, retorna o plano; em execu\u00e7\u00e3o real, adiciona <code>status</code> e <code>http_status</code>.</li> </ul>"},{"location":"modulos/responders/rabbitmq_http/#instanciacao","title":"Instancia\u00e7\u00e3o","text":"<pre><code>from __future__ import annotations\nimport json\nfrom sentineliqsdk import WorkerInput\nfrom sentineliqsdk.responders.rabbitmq_http import RabbitMqResponder\n\ninp = WorkerInput(data_type=\"other\", data=\"hello\")\nreport = RabbitMqResponder(inp).execute()\nprint(json.dumps(report.full_report, ensure_ascii=False))\n</code></pre>"},{"location":"modulos/responders/rabbitmq_http/#configuracao","title":"Configura\u00e7\u00e3o","text":"<p>Preferencial (program\u00e1tica):</p> <ul> <li><code>WorkerConfig.params</code>:</li> <li><code>rabbitmq.api_url</code>, <code>rabbitmq.vhost</code>, <code>rabbitmq.exchange</code>, <code>rabbitmq.routing_key</code></li> <li><code>rabbitmq.message</code> (opcional; padr\u00e3o: <code>WorkerInput.data</code>)</li> <li><code>rabbitmq.properties</code> (dict)</li> <li><code>execute</code> (bool) e <code>include_dangerous</code> (bool)</li> <li><code>WorkerConfig.secrets</code>:</li> <li><code>rabbitmq.username</code>, <code>rabbitmq.password</code></li> </ul> <p>Sem suporte por vari\u00e1veis de ambiente.</p>"},{"location":"modulos/responders/rabbitmq_http/#uso-correto","title":"Uso Correto","text":"<ul> <li>Quando houver autentica\u00e7\u00e3o, informe usu\u00e1rio e senha; o responder monta o header Basic.</li> <li><code>properties</code> \u00e9 um dicion\u00e1rio JSON enviado no payload do publish.</li> </ul>"},{"location":"modulos/responders/rabbitmq_http/#retorno","title":"Retorno","text":"<ul> <li><code>ResponderReport</code> com <code>action</code>, <code>provider</code>, <code>url</code>, <code>exchange</code>, <code>routing_key</code>, <code>dry_run</code> e,   em execu\u00e7\u00e3o real, <code>status</code> e <code>http_status</code>.</li> </ul>"},{"location":"modulos/responders/rabbitmq_http/#metadata","title":"Metadata","text":"<p>O responder inclui <code>full_report.metadata</code> com:</p> <pre><code>{\n  \"Name\": \"RabbitMQ HTTP Responder\",\n  \"Description\": \"Publish messages to RabbitMQ via HTTP API\",\n  \"Author\": [\"SentinelIQ Team &lt;team@sentineliq.com.br&gt;\"],\n  \"License\": \"SentinelIQ License\",\n  \"pattern\": \"rabbitmq\",\n  \"doc_pattern\": \"MkDocs module page; customer-facing usage and API\",\n  \"doc\": \"https://killsearch.github.io/sentineliqsdk/modulos/responders/rabbitmq_http/\",\n  \"VERSION\": \"STABLE\"\n}\n</code></pre>"},{"location":"modulos/responders/webhook/","title":"Webhook Responder","text":"<p>Envia uma requisi\u00e7\u00e3o HTTP para um webhook usando httpx. Por padr\u00e3o, roda em dry\u2011run; o envio real \u00e9 protegido por sinalizadores de seguran\u00e7a.</p>"},{"location":"modulos/responders/webhook/#visao-geral","title":"Vis\u00e3o Geral","text":"<ul> <li>URL alvo: <code>WorkerInput.data</code> (<code>data_type == \"url\"</code>) ou <code>webhook.url</code>.</li> <li>M\u00e9todo: <code>webhook.method</code> (padr\u00e3o <code>POST</code>). Suporta <code>POST</code> e <code>GET</code>.</li> <li>Cabe\u00e7alhos: <code>webhook.headers</code> (dict).</li> <li>Corpo: <code>webhook.body</code> (string ou dict; JSON gera <code>application/json</code>).</li> <li>Portas de seguran\u00e7a: requer <code>config.params.execute=True</code> e <code>config.params.include_dangerous=True</code>.</li> </ul>"},{"location":"modulos/responders/webhook/#como-funciona","title":"Como Funciona","text":"<ul> <li>Constr\u00f3i e envia a requisi\u00e7\u00e3o com <code>httpx.Client.request</code> (m\u00e9todo, cabe\u00e7alhos e corpo).</li> <li>Quando em dry\u2011run, retorna o <code>ResponderReport</code> sem realizar a chamada.</li> <li>Quando executado, envia a requisi\u00e7\u00e3o e adiciona <code>status</code> e <code>http_status</code>.</li> </ul>"},{"location":"modulos/responders/webhook/#instanciacao","title":"Instancia\u00e7\u00e3o","text":"<pre><code>from __future__ import annotations\nimport json\nfrom sentineliqsdk import WorkerInput\nfrom sentineliqsdk.responders.webhook import WebhookResponder\n\ninp = WorkerInput(data_type=\"url\", data=\"https://example.invalid/webhook\")\nreport = WebhookResponder(inp).execute()\nprint(json.dumps(report.full_report, ensure_ascii=False))\n</code></pre>"},{"location":"modulos/responders/webhook/#configuracao","title":"Configura\u00e7\u00e3o","text":"<p>Preferencial (program\u00e1tica, sem vari\u00e1veis de ambiente):</p> <ul> <li><code>WorkerConfig.params</code>:</li> <li><code>webhook.url</code> (opcional quando a URL vem em <code>data</code>)</li> <li><code>webhook.method</code> (<code>POST</code>|<code>GET</code>)</li> <li><code>webhook.headers</code> (dict)</li> <li><code>webhook.body</code> (string ou dict)</li> <li><code>execute</code> (bool) e <code>include_dangerous</code> (bool)</li> </ul> <p>Sem suporte por vari\u00e1veis de ambiente.</p> <p>Exemplo (dataclasses):</p> <pre><code>from sentineliqsdk import WorkerInput, WorkerConfig\n\ninp = WorkerInput(\n    data_type=\"url\",\n    data=\"https://example.invalid/webhook\",\n    config=WorkerConfig(\n        params={\n            \"webhook\": {\n                \"method\": \"POST\",\n                \"headers\": {\"X-Token\": \"abc\"},\n                \"body\": {\"ok\": True},\n            },\n            \"execute\": True,\n            \"include_dangerous\": True,\n        }\n    ),\n)\n</code></pre> <p>Proxies: via <code>WorkerConfig.proxy.http/https</code>.</p>"},{"location":"modulos/responders/webhook/#uso-correto","title":"Uso Correto","text":"<ul> <li>Para envio real, defina ambos os sinalizadores de seguran\u00e7a como verdadeiros.</li> <li>Defina <code>webhook.headers</code> como dict (por exemplo, <code>{ \"Authorization\": \"Bearer ...\" }</code>).</li> <li>Se <code>webhook.body</code> for JSON (dict), ser\u00e1 enviado com <code>Content-Type: application/json</code>.</li> </ul>"},{"location":"modulos/responders/webhook/#retorno","title":"Retorno","text":"<ul> <li><code>ResponderReport</code> com <code>full_report</code> contendo <code>action</code>, <code>url</code>, <code>method</code>, <code>headers</code>, <code>dry_run</code>,   e em envio real, <code>status</code> e possivelmente <code>http_status</code>.</li> </ul>"},{"location":"modulos/responders/webhook/#metadata","title":"Metadata","text":"<p>O responder inclui <code>full_report.metadata</code> com:</p> <pre><code>{\n  \"Name\": \"Webhook Responder\",\n  \"Description\": \"POST/GET to a webhook URL using httpx\",\n  \"Author\": [\"SentinelIQ Team &lt;team@sentineliq.com.br&gt;\"],\n  \"License\": \"SentinelIQ License\",\n  \"pattern\": \"webhook\",\n  \"doc_pattern\": \"MkDocs module page; customer-facing usage and API\",\n  \"doc\": \"https://killsearch.github.io/sentineliqsdk/modulos/responders/webhook/\",\n  \"VERSION\": \"STABLE\"\n}\n</code></pre>"},{"location":"reference/api/analyzer/","title":"Refer\u00eancia da API: Analisador","text":""},{"location":"reference/api/analyzer/#sentineliqsdk.analyzers.base.Analyzer","title":"sentineliqsdk.analyzers.base.Analyzer","text":"<p>               Bases: <code>Worker</code></p> <p>Base class for analyzers with auto-extraction and helpers.</p> Source code in <code>src/sentineliqsdk/analyzers/base.py</code> <pre><code>class Analyzer(Worker):\n    \"\"\"Base class for analyzers with auto-extraction and helpers.\"\"\"\n\n    def __init__(\n        self,\n        input_data: WorkerInput,\n        secret_phrases=None,\n    ) -&gt; None:\n        super().__init__(input_data, secret_phrases)\n        self.auto_extract: bool = self._input.config.auto_extract\n\n    def get_data(self) -&gt; Any:\n        \"\"\"Return the observable value or filename for `file` datatypes.\"\"\"\n        if self.data_type == \"file\":\n            if self._input.filename is None:\n                self.error(\"Missing filename for file datatype.\")\n            return self._input.filename\n        return self._input.data\n\n    def build_taxonomy(\n        self, level: TaxonomyLevel, namespace: str, predicate: str, value: str\n    ) -&gt; TaxonomyEntry:\n        \"\"\"Create a normalized taxonomy entry for report metadata.\"\"\"\n        if level not in (\"info\", \"safe\", \"suspicious\", \"malicious\"):\n            level = \"info\"\n        return TaxonomyEntry(\n            level=level,\n            namespace=namespace,\n            predicate=predicate,\n            value=value,\n        )\n\n    def summary(self, raw: Any) -&gt; dict:\n        \"\"\"Return analyzer-specific short summary (optional).\"\"\"\n        return {}\n\n    def artifacts(self, raw: Any) -&gt; list[Artifact]:\n        \"\"\"Auto-extract IOCs from the full report when enabled.\"\"\"\n        if self.auto_extract:\n            extractor = Extractor(ignore=self.get_data())\n            results = extractor.check_iterable(raw)\n            return [Artifact(data_type=r.data_type, data=r.data) for r in results]\n        return []\n\n    def build_artifact(self, data_type: DataType, data: Any, **kwargs: Any) -&gt; Artifact:\n        \"\"\"Build an artifact dataclass.\n\n        For file types, returns metadata without copying files.\n        \"\"\"\n        if data_type == \"file\":\n            return Artifact(data_type=data_type, data=str(data), filename=str(data), extra=kwargs)\n        return Artifact(data_type=data_type, data=str(data), extra=kwargs)\n\n    def _build_envelope(self, full_report: dict) -&gt; AnalyzerReport:\n        \"\"\"Build the SDK envelope with summary, artifacts, and operations.\"\"\"\n        summary: dict = {}\n        with suppress(Exception):\n            summary = self.summary(full_report)\n        operation_list: list = []\n        with suppress(Exception):\n            operation_list = self.operations(full_report)\n        return AnalyzerReport(\n            success=True,\n            summary=summary,\n            artifacts=self.artifacts(full_report),\n            operations=operation_list,\n            full_report=full_report,\n        )\n\n    def report(self, full_report: dict) -&gt; AnalyzerReport:\n        \"\"\"Wrap full report with SDK envelope and return AnalyzerReport.\"\"\"\n        return self._build_envelope(full_report)\n\n    def run(self) -&gt; AnalyzerReport:  # pragma: no cover - to be overridden\n        \"\"\"Override in subclasses.\"\"\"\n        raise NotImplementedError(\"Subclasses must implement run() method\")\n</code></pre>"},{"location":"reference/api/analyzer/#sentineliqsdk.analyzers.base.Analyzer.artifacts","title":"artifacts","text":"<pre><code>artifacts(raw: Any) -&gt; list[Artifact]\n</code></pre> <p>Auto-extract IOCs from the full report when enabled.</p> Source code in <code>src/sentineliqsdk/analyzers/base.py</code> <pre><code>def artifacts(self, raw: Any) -&gt; list[Artifact]:\n    \"\"\"Auto-extract IOCs from the full report when enabled.\"\"\"\n    if self.auto_extract:\n        extractor = Extractor(ignore=self.get_data())\n        results = extractor.check_iterable(raw)\n        return [Artifact(data_type=r.data_type, data=r.data) for r in results]\n    return []\n</code></pre>"},{"location":"reference/api/analyzer/#sentineliqsdk.analyzers.base.Analyzer.build_artifact","title":"build_artifact","text":"<pre><code>build_artifact(\n    data_type: DataType, data: Any, **kwargs: Any\n) -&gt; Artifact\n</code></pre> <p>Build an artifact dataclass.</p> <p>For file types, returns metadata without copying files.</p> Source code in <code>src/sentineliqsdk/analyzers/base.py</code> <pre><code>def build_artifact(self, data_type: DataType, data: Any, **kwargs: Any) -&gt; Artifact:\n    \"\"\"Build an artifact dataclass.\n\n    For file types, returns metadata without copying files.\n    \"\"\"\n    if data_type == \"file\":\n        return Artifact(data_type=data_type, data=str(data), filename=str(data), extra=kwargs)\n    return Artifact(data_type=data_type, data=str(data), extra=kwargs)\n</code></pre>"},{"location":"reference/api/analyzer/#sentineliqsdk.analyzers.base.Analyzer.build_taxonomy","title":"build_taxonomy","text":"<pre><code>build_taxonomy(\n    level: TaxonomyLevel,\n    namespace: str,\n    predicate: str,\n    value: str,\n) -&gt; TaxonomyEntry\n</code></pre> <p>Create a normalized taxonomy entry for report metadata.</p> Source code in <code>src/sentineliqsdk/analyzers/base.py</code> <pre><code>def build_taxonomy(\n    self, level: TaxonomyLevel, namespace: str, predicate: str, value: str\n) -&gt; TaxonomyEntry:\n    \"\"\"Create a normalized taxonomy entry for report metadata.\"\"\"\n    if level not in (\"info\", \"safe\", \"suspicious\", \"malicious\"):\n        level = \"info\"\n    return TaxonomyEntry(\n        level=level,\n        namespace=namespace,\n        predicate=predicate,\n        value=value,\n    )\n</code></pre>"},{"location":"reference/api/analyzer/#sentineliqsdk.analyzers.base.Analyzer.get_data","title":"get_data","text":"<pre><code>get_data() -&gt; Any\n</code></pre> <p>Return the observable value or filename for <code>file</code> datatypes.</p> Source code in <code>src/sentineliqsdk/analyzers/base.py</code> <pre><code>def get_data(self) -&gt; Any:\n    \"\"\"Return the observable value or filename for `file` datatypes.\"\"\"\n    if self.data_type == \"file\":\n        if self._input.filename is None:\n            self.error(\"Missing filename for file datatype.\")\n        return self._input.filename\n    return self._input.data\n</code></pre>"},{"location":"reference/api/analyzer/#sentineliqsdk.analyzers.base.Analyzer.report","title":"report","text":"<pre><code>report(full_report: dict) -&gt; AnalyzerReport\n</code></pre> <p>Wrap full report with SDK envelope and return AnalyzerReport.</p> Source code in <code>src/sentineliqsdk/analyzers/base.py</code> <pre><code>def report(self, full_report: dict) -&gt; AnalyzerReport:\n    \"\"\"Wrap full report with SDK envelope and return AnalyzerReport.\"\"\"\n    return self._build_envelope(full_report)\n</code></pre>"},{"location":"reference/api/analyzer/#sentineliqsdk.analyzers.base.Analyzer.run","title":"run","text":"<pre><code>run() -&gt; AnalyzerReport\n</code></pre> <p>Override in subclasses.</p> Source code in <code>src/sentineliqsdk/analyzers/base.py</code> <pre><code>def run(self) -&gt; AnalyzerReport:  # pragma: no cover - to be overridden\n    \"\"\"Override in subclasses.\"\"\"\n    raise NotImplementedError(\"Subclasses must implement run() method\")\n</code></pre>"},{"location":"reference/api/analyzer/#sentineliqsdk.analyzers.base.Analyzer.summary","title":"summary","text":"<pre><code>summary(raw: Any) -&gt; dict\n</code></pre> <p>Return analyzer-specific short summary (optional).</p> Source code in <code>src/sentineliqsdk/analyzers/base.py</code> <pre><code>def summary(self, raw: Any) -&gt; dict:\n    \"\"\"Return analyzer-specific short summary (optional).\"\"\"\n    return {}\n</code></pre>"},{"location":"reference/api/extractor/","title":"Refer\u00eancia da API: Extrator","text":""},{"location":"reference/api/extractor/#sentineliqsdk.extractors.regex.Extractor","title":"sentineliqsdk.extractors.regex.Extractor","text":"<p>               Bases: <code>DetectionContext</code></p> <p>Detect IOC attribute types using stdlib-backed heuristics.</p> <p>Two functions are provided:   - <code>check_string(str)</code> which checks a string and returns the type.   - <code>check_iterable(itr)</code> that iterates over a list or a dictionary and returns a     list of {type, value} dicts.</p> <p>Note: not a full-text search; IOC values must appear as isolated strings.</p> <p>:param ignore: String to ignore when matching artifacts to type :param strict_dns: If True, enforce RFC-compliant DNS validation (no underscores) :param normalize_domains: If True, normalize domains using IDNA/punycode :param normalize_urls: If True, normalize URLs (lowercase host, remove default ports) :param support_mailto: If True, accept mailto: prefix in email detection :param max_string_length: Maximum string length to process (DoS protection) :param max_iterable_depth: Maximum nesting depth for iterables (DoS protection)</p> Source code in <code>src/sentineliqsdk/extractors/regex.py</code> <pre><code>class Extractor(DetectionContext):\n    \"\"\"Detect IOC attribute types using stdlib-backed heuristics.\n\n    Two functions are provided:\n      - ``check_string(str)`` which checks a string and returns the type.\n      - ``check_iterable(itr)`` that iterates over a list or a dictionary and returns a\n        list of {type, value} dicts.\n\n    Note: not a full-text search; IOC values must appear as isolated strings.\n\n    :param ignore: String to ignore when matching artifacts to type\n    :param strict_dns: If True, enforce RFC-compliant DNS validation (no underscores)\n    :param normalize_domains: If True, normalize domains using IDNA/punycode\n    :param normalize_urls: If True, normalize URLs (lowercase host, remove default ports)\n    :param support_mailto: If True, accept mailto: prefix in email detection\n    :param max_string_length: Maximum string length to process (DoS protection)\n    :param max_iterable_depth: Maximum nesting depth for iterables (DoS protection)\n    \"\"\"\n\n    def __init__(\n        self,\n        ignore: str | None = None,\n        strict_dns: bool = False,\n        normalize_domains: bool = False,\n        normalize_urls: bool = False,\n        support_mailto: bool = False,\n        max_string_length: int = MAX_STRING_LENGTH,\n        max_iterable_depth: int = MAX_ITERABLE_DEPTH,\n    ):\n        self.ignore = ignore\n        self.strict_dns = strict_dns\n        self.normalize_domains = normalize_domains\n        self.normalize_urls = normalize_urls\n        self.support_mailto = support_mailto\n        self.max_string_length = max_string_length\n        self.max_iterable_depth = max_iterable_depth\n\n        # Small per-instance cache to avoid repeated classification work.\n        self._cache: dict[tuple[str | None, str], str] = {}\n\n        # Detectors compose classification in precedence order.\n        self._detectors: list[Detector] = [\n            IpDetector(),\n            CidrDetector(),\n            UrlDetector(self),\n            DomainDetector(self),\n            HashDetector(),\n            UserAgentDetector(),\n            UriPathDetector(),\n            RegistryDetector(),\n            MailDetector(self),\n            MacDetector(),\n            AsnDetector(),\n            CveDetector(),\n            IpPortDetector(),\n            FqdnDetector(self),\n        ]\n\n    # --- Extensibility helpers ---\n    def register_detector(\n        self, detector: Detector, *, before: str | None = None, after: str | None = None\n    ) -&gt; None:\n        \"\"\"Register a custom detector.\n\n        - If neither ``before`` nor ``after`` is provided, appends to the end.\n        - If ``before`` is provided, inserts before the first detector with that name.\n        - If ``after`` is provided, inserts after the first detector with that name.\n        \"\"\"\n        if before and after:\n            raise ValueError(\"Use only one of 'before' or 'after'.\")\n\n        if before:\n            for i, det in enumerate(self._detectors):\n                if det.name == before:\n                    self._detectors.insert(i, detector)\n                    return\n        elif after:  # pragma: no branch\n            for i, det in enumerate(self._detectors):\n                if det.name == after:\n                    self._detectors.insert(i + 1, detector)\n                    return\n\n        self._detectors.append(detector)\n\n    # --- Type checks ---\n    @staticmethod\n    def _is_ip(value: str) -&gt; bool:\n        try:\n            ipaddress.ip_address(value)\n            return True\n        except ValueError:\n            return False\n\n    def _is_url(self, value: str) -&gt; bool:\n        return UrlDetector(self).matches(value)\n\n    def _label_allowed(self, label: str) -&gt; bool:\n        \"\"\"Check if a DNS label is allowed based on current strict mode.\"\"\"\n        if not label:\n            return False\n        allowed_chars = ALLOWED_LABEL_CHARS_STRICT if self.strict_dns else ALLOWED_LABEL_CHARS\n        return all(c in allowed_chars for c in label)\n\n    # DetectionContext adapters used by detectors\n    def label_allowed(self, label: str) -&gt; bool:\n        \"\"\"Public adapter for detectors to validate a single DNS label.\"\"\"\n        return self._label_allowed(label)\n\n    def _normalize_domain(self, domain: str) -&gt; str:\n        \"\"\"Normalize domain using IDNA/punycode if enabled.\"\"\"\n        if not self.normalize_domains:\n            return domain\n        try:\n            # Convert to IDNA encoding (punycode)\n            return encodings.idna.ToASCII(domain).decode(\"ascii\")\n        except (UnicodeError, ValueError):\n            # If normalization fails, return original\n            return domain\n\n    def normalize_domain(self, domain: str) -&gt; str:\n        \"\"\"Public adapter for detectors to normalize domains according to settings.\"\"\"\n        return self._normalize_domain(domain)\n\n    def _normalize_url(self, url: str) -&gt; str:\n        \"\"\"Normalize URL by lowercasing host and removing default ports.\"\"\"\n        if not self.normalize_urls:\n            return url\n        try:\n            parsed = urlparse(url)\n            if not parsed.netloc:\n                return url\n\n            # Lowercase the hostname\n            hostname = parsed.hostname.lower() if parsed.hostname else parsed.netloc.lower()\n\n            # Remove default ports\n            port = parsed.port\n            if port and (\n                (parsed.scheme == \"http\" and port == DEFAULT_HTTP_PORT)\n                or (parsed.scheme == \"https\" and port == DEFAULT_HTTPS_PORT)\n            ):\n                port = None\n\n            # Reconstruct netloc\n            netloc = f\"{hostname}:{port}\" if port else hostname\n\n            # Reconstruct URL\n            return urlunparse(\n                (parsed.scheme, netloc, parsed.path, parsed.params, parsed.query, parsed.fragment)\n            )\n        except (ValueError, AttributeError):\n            # If normalization fails, return original\n            return url\n\n    def normalize_url(self, url: str) -&gt; str:\n        \"\"\"Public adapter for detectors to normalize URLs according to settings.\"\"\"\n        return self._normalize_url(url)\n\n    def _is_domain(self, value: str) -&gt; bool:\n        return DomainDetector(self).matches(value)\n\n    @staticmethod\n    def _is_hash(value: str) -&gt; bool:\n        if len(value) not in HASH_LENGTHS:\n            return False\n        return all(c in HEX_DIGITS for c in value)\n\n    @staticmethod\n    def _is_user_agent(value: str) -&gt; bool:\n        return value.startswith(USER_AGENT_PREFIXES)\n\n    @staticmethod\n    def _is_uri_path(value: str) -&gt; bool:\n        return UriPathDetector().matches(value)\n\n    @staticmethod\n    def _is_registry(value: str) -&gt; bool:\n        return RegistryDetector().matches(value)\n\n    def _is_mail(self, value: str) -&gt; bool:\n        return MailDetector(self).matches(value)\n\n    def _is_fqdn(self, value: str) -&gt; bool:\n        return FqdnDetector(self).matches(value)\n\n    def __checktype(self, value: Any) -&gt; str:\n        \"\"\"Check if the given value is a known datatype.\n\n        :param value: The value to check\n        :type value: str or number\n        :return: Data type of value, if known, else empty string\n        :rtype: str\n        \"\"\"\n        if self.ignore and isinstance(value, str) and self.ignore == value:\n            # Ignore only exact matches to avoid hiding valid IOCs that merely\n            # contain the observable as a substring.\n            return \"\"\n\n        if isinstance(value, str):\n            # Check string length limit for DoS protection\n            if len(value) &gt; self.max_string_length:\n                return \"\"\n\n            key = (self.ignore, value)\n            if key in self._cache:\n                return self._cache[key]\n\n            dtype = \"\"\n            for detector in self._detectors:\n                if detector.matches(value):\n                    dtype = detector.name\n                    break\n\n            self._cache[key] = dtype\n            return dtype\n        return \"\"\n\n    def check_string(self, value: str) -&gt; str:\n        \"\"\"Check if a string matches a datatype.\n\n        :param value: String to test\n        :type value: str\n        :return: Data type or empty string\n        :rtype: str\n        \"\"\"\n        return self.__checktype(value)\n\n    def check_iterable(self, iterable: Any) -&gt; list[ExtractorResult]:\n        \"\"\"Check values of a list or a dict for IOCs.\n\n        Returns a list of ExtractorResult objects. Raises TypeError if iterable is not an\n        expected type.\n\n        :param iterable: List or dict of values\n        :type iterable: list | dict | str\n        :return: List of IOC results\n        :rtype: list[ExtractorResult]\n        \"\"\"\n        results = ExtractorResults()\n\n        if not isinstance(iterable, str | list | dict | tuple | set):\n            raise TypeError(\"Not supported type.\")\n\n        # Use depth tracking for DoS protection\n        stack: list[tuple[Any, int]] = [(iterable, 0)]\n        while stack:\n            item, depth = stack.pop()\n\n            # Check depth limit\n            if depth &gt; self.max_iterable_depth:\n                continue\n\n            if isinstance(item, dict):\n                stack.extend((v, depth + 1) for v in item.values())\n            elif isinstance(item, list | tuple | set):\n                stack.extend((v, depth + 1) for v in item)\n            elif isinstance(item, str):  # pragma: no branch\n                dt = self.__checktype(item)\n                if dt:\n                    # Narrow dtype to the declared DataType Literal for type checkers\n                    results.add_result(cast(DataType, dt), item)\n\n        # Deduplicate and return as list of ExtractorResult objects\n        deduped = results.deduplicate()\n        return deduped.results\n\n    @staticmethod\n    def deduplicate(list_of_objects: list[dict[str, str]]) -&gt; list[dict[str, str]]:\n        \"\"\"Deduplicate list of IOC objects by type + data in O(n).\"\"\"\n        seen: set[tuple[str, str]] = set()\n        dedup_list: list[dict[str, str]] = []\n        for obj in list_of_objects:\n            key = (obj[\"dataType\"], obj[\"data\"])\n            if key in seen:\n                continue\n            seen.add(key)\n            dedup_list.append(obj)\n        return dedup_list\n\n    @staticmethod\n    def deduplicate_results(results: list[ExtractorResult]) -&gt; list[ExtractorResult]:\n        \"\"\"Deduplicate ``ExtractorResult`` items by ``data_type`` and ``data``.\n\n        This mirrors ``deduplicate`` but works with the modern dataclass API.\n        \"\"\"\n        seen: set[tuple[str, str]] = set()\n        unique: list[ExtractorResult] = []\n        for r in results:\n            key = (r.data_type, r.data)\n            if key in seen:\n                continue\n            seen.add(key)\n            unique.append(r)\n        return unique\n</code></pre>"},{"location":"reference/api/extractor/#sentineliqsdk.extractors.regex.Extractor.check_iterable","title":"check_iterable","text":"<pre><code>check_iterable(iterable: Any) -&gt; list[ExtractorResult]\n</code></pre> <p>Check values of a list or a dict for IOCs.</p> <p>Returns a list of ExtractorResult objects. Raises TypeError if iterable is not an expected type.</p> <p>:param iterable: List or dict of values :type iterable: list | dict | str :return: List of IOC results :rtype: list[ExtractorResult]</p> Source code in <code>src/sentineliqsdk/extractors/regex.py</code> <pre><code>def check_iterable(self, iterable: Any) -&gt; list[ExtractorResult]:\n    \"\"\"Check values of a list or a dict for IOCs.\n\n    Returns a list of ExtractorResult objects. Raises TypeError if iterable is not an\n    expected type.\n\n    :param iterable: List or dict of values\n    :type iterable: list | dict | str\n    :return: List of IOC results\n    :rtype: list[ExtractorResult]\n    \"\"\"\n    results = ExtractorResults()\n\n    if not isinstance(iterable, str | list | dict | tuple | set):\n        raise TypeError(\"Not supported type.\")\n\n    # Use depth tracking for DoS protection\n    stack: list[tuple[Any, int]] = [(iterable, 0)]\n    while stack:\n        item, depth = stack.pop()\n\n        # Check depth limit\n        if depth &gt; self.max_iterable_depth:\n            continue\n\n        if isinstance(item, dict):\n            stack.extend((v, depth + 1) for v in item.values())\n        elif isinstance(item, list | tuple | set):\n            stack.extend((v, depth + 1) for v in item)\n        elif isinstance(item, str):  # pragma: no branch\n            dt = self.__checktype(item)\n            if dt:\n                # Narrow dtype to the declared DataType Literal for type checkers\n                results.add_result(cast(DataType, dt), item)\n\n    # Deduplicate and return as list of ExtractorResult objects\n    deduped = results.deduplicate()\n    return deduped.results\n</code></pre>"},{"location":"reference/api/extractor/#sentineliqsdk.extractors.regex.Extractor.check_string","title":"check_string","text":"<pre><code>check_string(value: str) -&gt; str\n</code></pre> <p>Check if a string matches a datatype.</p> <p>:param value: String to test :type value: str :return: Data type or empty string :rtype: str</p> Source code in <code>src/sentineliqsdk/extractors/regex.py</code> <pre><code>def check_string(self, value: str) -&gt; str:\n    \"\"\"Check if a string matches a datatype.\n\n    :param value: String to test\n    :type value: str\n    :return: Data type or empty string\n    :rtype: str\n    \"\"\"\n    return self.__checktype(value)\n</code></pre>"},{"location":"reference/api/extractor/#sentineliqsdk.extractors.regex.Extractor.deduplicate","title":"deduplicate  <code>staticmethod</code>","text":"<pre><code>deduplicate(\n    list_of_objects: list[dict[str, str]],\n) -&gt; list[dict[str, str]]\n</code></pre> <p>Deduplicate list of IOC objects by type + data in O(n).</p> Source code in <code>src/sentineliqsdk/extractors/regex.py</code> <pre><code>@staticmethod\ndef deduplicate(list_of_objects: list[dict[str, str]]) -&gt; list[dict[str, str]]:\n    \"\"\"Deduplicate list of IOC objects by type + data in O(n).\"\"\"\n    seen: set[tuple[str, str]] = set()\n    dedup_list: list[dict[str, str]] = []\n    for obj in list_of_objects:\n        key = (obj[\"dataType\"], obj[\"data\"])\n        if key in seen:\n            continue\n        seen.add(key)\n        dedup_list.append(obj)\n    return dedup_list\n</code></pre>"},{"location":"reference/api/extractor/#sentineliqsdk.extractors.regex.Extractor.deduplicate_results","title":"deduplicate_results  <code>staticmethod</code>","text":"<pre><code>deduplicate_results(\n    results: list[ExtractorResult],\n) -&gt; list[ExtractorResult]\n</code></pre> <p>Deduplicate <code>ExtractorResult</code> items by <code>data_type</code> and <code>data</code>.</p> <p>This mirrors <code>deduplicate</code> but works with the modern dataclass API.</p> Source code in <code>src/sentineliqsdk/extractors/regex.py</code> <pre><code>@staticmethod\ndef deduplicate_results(results: list[ExtractorResult]) -&gt; list[ExtractorResult]:\n    \"\"\"Deduplicate ``ExtractorResult`` items by ``data_type`` and ``data``.\n\n    This mirrors ``deduplicate`` but works with the modern dataclass API.\n    \"\"\"\n    seen: set[tuple[str, str]] = set()\n    unique: list[ExtractorResult] = []\n    for r in results:\n        key = (r.data_type, r.data)\n        if key in seen:\n            continue\n        seen.add(key)\n        unique.append(r)\n    return unique\n</code></pre>"},{"location":"reference/api/extractor/#sentineliqsdk.extractors.regex.Extractor.label_allowed","title":"label_allowed","text":"<pre><code>label_allowed(label: str) -&gt; bool\n</code></pre> <p>Public adapter for detectors to validate a single DNS label.</p> Source code in <code>src/sentineliqsdk/extractors/regex.py</code> <pre><code>def label_allowed(self, label: str) -&gt; bool:\n    \"\"\"Public adapter for detectors to validate a single DNS label.\"\"\"\n    return self._label_allowed(label)\n</code></pre>"},{"location":"reference/api/extractor/#sentineliqsdk.extractors.regex.Extractor.normalize_domain","title":"normalize_domain","text":"<pre><code>normalize_domain(domain: str) -&gt; str\n</code></pre> <p>Public adapter for detectors to normalize domains according to settings.</p> Source code in <code>src/sentineliqsdk/extractors/regex.py</code> <pre><code>def normalize_domain(self, domain: str) -&gt; str:\n    \"\"\"Public adapter for detectors to normalize domains according to settings.\"\"\"\n    return self._normalize_domain(domain)\n</code></pre>"},{"location":"reference/api/extractor/#sentineliqsdk.extractors.regex.Extractor.normalize_url","title":"normalize_url","text":"<pre><code>normalize_url(url: str) -&gt; str\n</code></pre> <p>Public adapter for detectors to normalize URLs according to settings.</p> Source code in <code>src/sentineliqsdk/extractors/regex.py</code> <pre><code>def normalize_url(self, url: str) -&gt; str:\n    \"\"\"Public adapter for detectors to normalize URLs according to settings.\"\"\"\n    return self._normalize_url(url)\n</code></pre>"},{"location":"reference/api/extractor/#sentineliqsdk.extractors.regex.Extractor.register_detector","title":"register_detector","text":"<pre><code>register_detector(\n    detector: Detector,\n    *,\n    before: str | None = None,\n    after: str | None = None,\n) -&gt; None\n</code></pre> <p>Register a custom detector.</p> <ul> <li>If neither <code>before</code> nor <code>after</code> is provided, appends to the end.</li> <li>If <code>before</code> is provided, inserts before the first detector with that name.</li> <li>If <code>after</code> is provided, inserts after the first detector with that name.</li> </ul> Source code in <code>src/sentineliqsdk/extractors/regex.py</code> <pre><code>def register_detector(\n    self, detector: Detector, *, before: str | None = None, after: str | None = None\n) -&gt; None:\n    \"\"\"Register a custom detector.\n\n    - If neither ``before`` nor ``after`` is provided, appends to the end.\n    - If ``before`` is provided, inserts before the first detector with that name.\n    - If ``after`` is provided, inserts after the first detector with that name.\n    \"\"\"\n    if before and after:\n        raise ValueError(\"Use only one of 'before' or 'after'.\")\n\n    if before:\n        for i, det in enumerate(self._detectors):\n            if det.name == before:\n                self._detectors.insert(i, detector)\n                return\n    elif after:  # pragma: no branch\n        for i, det in enumerate(self._detectors):\n            if det.name == after:\n                self._detectors.insert(i + 1, detector)\n                return\n\n    self._detectors.append(detector)\n</code></pre>"},{"location":"reference/api/models/","title":"Refer\u00eancia da API: Modelos","text":""},{"location":"reference/api/models/#sentineliqsdk.models","title":"sentineliqsdk.models","text":"<p>Data models for SentinelIQ SDK using dataclasses instead of JSON.</p> <p>This module provides strongly-typed data structures to replace JSON dictionaries throughout the SDK, improving type safety and developer experience.</p>"},{"location":"reference/api/models/#sentineliqsdk.models.AnalyzerReport","title":"AnalyzerReport  <code>dataclass</code>","text":"<p>Complete analyzer report with envelope.</p> Source code in <code>src/sentineliqsdk/models.py</code> <pre><code>@dataclass(frozen=True)\nclass AnalyzerReport:\n    \"\"\"Complete analyzer report with envelope.\"\"\"\n\n    success: bool = True\n    summary: dict[str, Any] = field(default_factory=dict)\n    artifacts: list[Artifact] = field(default_factory=list)\n    operations: list[Operation] = field(default_factory=list)\n    full_report: dict[str, Any] = field(default_factory=dict)\n</code></pre>"},{"location":"reference/api/models/#sentineliqsdk.models.Artifact","title":"Artifact  <code>dataclass</code>","text":"<p>Artifact extracted from analysis.</p> Source code in <code>src/sentineliqsdk/models.py</code> <pre><code>@dataclass(frozen=True)\nclass Artifact:\n    \"\"\"Artifact extracted from analysis.\"\"\"\n\n    data_type: DataType\n    data: str\n    filename: str | None = None\n    tlp: int | None = None\n    pap: int | None = None\n    # Additional fields can be added as needed\n    extra: Mapping[str, Any] = field(default_factory=dict)\n\n    def __post_init__(self) -&gt; None:  # type: ignore[override]\n        \"\"\"Post-initialization to ensure deep immutability.\"\"\"\n        # Wrap mutable mappings in an immutable proxy to ensure deep immutability\n        if isinstance(self.extra, dict):\n            object.__setattr__(self, \"extra\", MappingProxyType(dict(self.extra)))\n</code></pre>"},{"location":"reference/api/models/#sentineliqsdk.models.ExtractorResult","title":"ExtractorResult  <code>dataclass</code>","text":"<p>Result from IOC extraction.</p> Source code in <code>src/sentineliqsdk/models.py</code> <pre><code>@dataclass(frozen=True)\nclass ExtractorResult:\n    \"\"\"Result from IOC extraction.\"\"\"\n\n    data_type: DataType\n    data: str\n</code></pre>"},{"location":"reference/api/models/#sentineliqsdk.models.ExtractorResults","title":"ExtractorResults  <code>dataclass</code>","text":"<p>Collection of IOC extraction results.</p> Source code in <code>src/sentineliqsdk/models.py</code> <pre><code>@dataclass(frozen=True)\nclass ExtractorResults:\n    \"\"\"Collection of IOC extraction results.\"\"\"\n\n    results: list[ExtractorResult] = field(default_factory=list)\n\n    def add_result(self, data_type: DataType, data: str) -&gt; None:\n        \"\"\"Add a new extraction result.\"\"\"\n        self.results.append(ExtractorResult(data_type=data_type, data=data))\n\n    def deduplicate(self) -&gt; ExtractorResults:\n        \"\"\"Remove duplicate results based on data_type and data.\"\"\"\n        seen = set()\n        unique_results = []\n        for result in self.results:\n            key = (result.data_type, result.data)\n            if key not in seen:\n                seen.add(key)\n                unique_results.append(result)\n        return ExtractorResults(results=unique_results)\n</code></pre>"},{"location":"reference/api/models/#sentineliqsdk.models.ExtractorResults.add_result","title":"add_result","text":"<pre><code>add_result(data_type: DataType, data: str) -&gt; None\n</code></pre> <p>Add a new extraction result.</p> Source code in <code>src/sentineliqsdk/models.py</code> <pre><code>def add_result(self, data_type: DataType, data: str) -&gt; None:\n    \"\"\"Add a new extraction result.\"\"\"\n    self.results.append(ExtractorResult(data_type=data_type, data=data))\n</code></pre>"},{"location":"reference/api/models/#sentineliqsdk.models.ExtractorResults.deduplicate","title":"deduplicate","text":"<pre><code>deduplicate() -&gt; ExtractorResults\n</code></pre> <p>Remove duplicate results based on data_type and data.</p> Source code in <code>src/sentineliqsdk/models.py</code> <pre><code>def deduplicate(self) -&gt; ExtractorResults:\n    \"\"\"Remove duplicate results based on data_type and data.\"\"\"\n    seen = set()\n    unique_results = []\n    for result in self.results:\n        key = (result.data_type, result.data)\n        if key not in seen:\n            seen.add(key)\n            unique_results.append(result)\n    return ExtractorResults(results=unique_results)\n</code></pre>"},{"location":"reference/api/models/#sentineliqsdk.models.ModuleMetadata","title":"ModuleMetadata  <code>dataclass</code>","text":"<p>Descriptive metadata for modules (analyzers/responders).</p> <p>Use this to declare authoring and documentation details that can be surfaced programmatically or included in reports for traceability.</p> Source code in <code>src/sentineliqsdk/models.py</code> <pre><code>@dataclass(frozen=True)\nclass ModuleMetadata:\n    \"\"\"Descriptive metadata for modules (analyzers/responders).\n\n    Use this to declare authoring and documentation details that can be surfaced\n    programmatically or included in reports for traceability.\n    \"\"\"\n\n    name: str\n    description: str\n    author: tuple[str, ...] = ()\n    license: str = SENTINELIQ_LICENSE\n    pattern: str = \"\"\n    doc_pattern: str = \"\"\n    doc: str = \"\"\n    version_stage: ModuleVersionStage = \"DEVELOPER\"\n\n    def to_dict(self) -&gt; dict[str, Any]:\n        \"\"\"Convert to a dictionary using required external key names.\"\"\"\n        return {\n            \"Name\": self.name,\n            \"Description\": self.description,\n            \"Author\": list(self.author),\n            \"License\": self.license,\n            \"pattern\": self.pattern,\n            \"doc_pattern\": self.doc_pattern,\n            \"doc\": self.doc,\n            \"VERSION\": self.version_stage,\n        }\n</code></pre>"},{"location":"reference/api/models/#sentineliqsdk.models.ModuleMetadata.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; dict[str, Any]\n</code></pre> <p>Convert to a dictionary using required external key names.</p> Source code in <code>src/sentineliqsdk/models.py</code> <pre><code>def to_dict(self) -&gt; dict[str, Any]:\n    \"\"\"Convert to a dictionary using required external key names.\"\"\"\n    return {\n        \"Name\": self.name,\n        \"Description\": self.description,\n        \"Author\": list(self.author),\n        \"License\": self.license,\n        \"pattern\": self.pattern,\n        \"doc_pattern\": self.doc_pattern,\n        \"doc\": self.doc,\n        \"VERSION\": self.version_stage,\n    }\n</code></pre>"},{"location":"reference/api/models/#sentineliqsdk.models.Operation","title":"Operation  <code>dataclass</code>","text":"<p>Follow-up operation for workers.</p> Source code in <code>src/sentineliqsdk/models.py</code> <pre><code>@dataclass(frozen=True)\nclass Operation:\n    \"\"\"Follow-up operation for workers.\"\"\"\n\n    operation_type: str\n    parameters: Mapping[str, Any] = field(default_factory=dict)\n\n    def __post_init__(self) -&gt; None:  # type: ignore[override]\n        \"\"\"Post-initialization to ensure parameter immutability.\"\"\"\n        if isinstance(self.parameters, dict):\n            object.__setattr__(self, \"parameters\", MappingProxyType(dict(self.parameters)))\n</code></pre>"},{"location":"reference/api/models/#sentineliqsdk.models.PipelineReport","title":"PipelineReport  <code>dataclass</code>","text":"<p>Pipeline processing report.</p> Source code in <code>src/sentineliqsdk/models.py</code> <pre><code>@dataclass(frozen=True)\nclass PipelineReport:\n    \"\"\"Pipeline processing report.\"\"\"\n\n    success: bool\n    messages_processed: int = 0\n    messages_failed: int = 0\n    processing_time: float = 0.0\n    registered_analyzers: int = 0\n    registered_responders: int = 0\n    full_report: Mapping[str, Any] = field(default_factory=dict)\n    operations: list[Operation] = field(default_factory=list)\n\n    def __post_init__(self) -&gt; None:  # type: ignore[override]\n        \"\"\"Post-initialization to ensure immutability.\"\"\"\n        if isinstance(self.full_report, dict):\n            object.__setattr__(self, \"full_report\", MappingProxyType(dict(self.full_report)))\n        if isinstance(self.operations, list):\n            object.__setattr__(self, \"operations\", tuple(self.operations))\n</code></pre>"},{"location":"reference/api/models/#sentineliqsdk.models.ProxyConfig","title":"ProxyConfig  <code>dataclass</code>","text":"<p>HTTP/HTTPS proxy configuration.</p> Source code in <code>src/sentineliqsdk/models.py</code> <pre><code>@dataclass(frozen=True)\nclass ProxyConfig:\n    \"\"\"HTTP/HTTPS proxy configuration.\"\"\"\n\n    http: str | None = None\n    https: str | None = None\n    # Optional NO_PROXY support (comma-separated hosts/domains)\n    no_proxy: str | None = None\n</code></pre>"},{"location":"reference/api/models/#sentineliqsdk.models.ResponderReport","title":"ResponderReport  <code>dataclass</code>","text":"<p>Complete responder report with envelope.</p> Source code in <code>src/sentineliqsdk/models.py</code> <pre><code>@dataclass(frozen=True)\nclass ResponderReport:\n    \"\"\"Complete responder report with envelope.\"\"\"\n\n    success: bool = True\n    full_report: dict[str, Any] = field(default_factory=dict)\n    operations: list[Operation] = field(default_factory=list)\n</code></pre>"},{"location":"reference/api/models/#sentineliqsdk.models.TaxonomyEntry","title":"TaxonomyEntry  <code>dataclass</code>","text":"<p>Taxonomy entry for analyzer reports.</p> Source code in <code>src/sentineliqsdk/models.py</code> <pre><code>@dataclass(frozen=True)\nclass TaxonomyEntry:\n    \"\"\"Taxonomy entry for analyzer reports.\"\"\"\n\n    level: TaxonomyLevel\n    namespace: str\n    predicate: str\n    value: str\n\n    def to_dict(self) -&gt; dict[str, Any]:\n        \"\"\"Convert to dictionary for JSON serialization.\"\"\"\n        return {\n            \"level\": self.level,\n            \"namespace\": self.namespace,\n            \"predicate\": self.predicate,\n            \"value\": self.value,\n        }\n</code></pre>"},{"location":"reference/api/models/#sentineliqsdk.models.TaxonomyEntry.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; dict[str, Any]\n</code></pre> <p>Convert to dictionary for JSON serialization.</p> Source code in <code>src/sentineliqsdk/models.py</code> <pre><code>def to_dict(self) -&gt; dict[str, Any]:\n    \"\"\"Convert to dictionary for JSON serialization.\"\"\"\n    return {\n        \"level\": self.level,\n        \"namespace\": self.namespace,\n        \"predicate\": self.predicate,\n        \"value\": self.value,\n    }\n</code></pre>"},{"location":"reference/api/models/#sentineliqsdk.models.WorkerConfig","title":"WorkerConfig  <code>dataclass</code>","text":"<p>Configuration for workers including TLP/PAP validation and proxy settings.</p> Source code in <code>src/sentineliqsdk/models.py</code> <pre><code>@dataclass(frozen=True)\nclass WorkerConfig:\n    \"\"\"Configuration for workers including TLP/PAP validation and proxy settings.\"\"\"\n\n    check_tlp: bool = False\n    max_tlp: int = DEFAULT_TLP\n    check_pap: bool = False\n    max_pap: int = DEFAULT_PAP\n    auto_extract: bool = True\n    proxy: ProxyConfig = field(default_factory=ProxyConfig)\n    # Generic runtime parameters and secrets for programmatic configuration.\n    # Use dotted paths (e.g., \"shodan.api_key\", \"webhook.method\") when convenient.\n    params: Mapping[str, Any] = field(default_factory=dict)\n    secrets: Mapping[str, Any] = field(default_factory=dict)\n\n    def __post_init__(self) -&gt; None:  # type: ignore[override]\n        \"\"\"Post-initialization to ensure mapping immutability.\"\"\"\n        # Ensure mapping immutability for params and secrets\n        if isinstance(self.params, dict):\n            object.__setattr__(self, \"params\", MappingProxyType(dict(self.params)))\n        if isinstance(self.secrets, dict):\n            object.__setattr__(self, \"secrets\", MappingProxyType(dict(self.secrets)))\n</code></pre>"},{"location":"reference/api/models/#sentineliqsdk.models.WorkerError","title":"WorkerError  <code>dataclass</code>","text":"<p>Error response from workers.</p> Source code in <code>src/sentineliqsdk/models.py</code> <pre><code>@dataclass(frozen=True)\nclass WorkerError:\n    \"\"\"Error response from workers.\"\"\"\n\n    success: bool = False\n    error_message: str = \"\"\n    input_data: WorkerInput | None = None\n</code></pre>"},{"location":"reference/api/models/#sentineliqsdk.models.WorkerInput","title":"WorkerInput  <code>dataclass</code>","text":"<p>Input data structure for workers.</p> Source code in <code>src/sentineliqsdk/models.py</code> <pre><code>@dataclass(frozen=True)\nclass WorkerInput:\n    \"\"\"Input data structure for workers.\"\"\"\n\n    data_type: DataType\n    data: str\n    filename: str | None = None\n    tlp: int = DEFAULT_TLP\n    pap: int = DEFAULT_PAP\n    config: WorkerConfig = field(default_factory=WorkerConfig)\n</code></pre>"},{"location":"reference/api/responder/","title":"Refer\u00eancia da API: Respondedor","text":""},{"location":"reference/api/responder/#sentineliqsdk.responders.base.Responder","title":"sentineliqsdk.responders.base.Responder","text":"<p>               Bases: <code>Worker</code></p> <p>Base class for responders.</p> Source code in <code>src/sentineliqsdk/responders/base.py</code> <pre><code>class Responder(Worker):\n    \"\"\"Base class for responders.\"\"\"\n\n    def __init__(\n        self,\n        input_data: WorkerInput,\n        secret_phrases=None,\n    ):\n        super().__init__(input_data, secret_phrases)\n\n    def _build_envelope(self, full_report) -&gt; ResponderReport:\n        \"\"\"Build the responder envelope with operations.\"\"\"\n        operation_list = []\n        with suppress(Exception):\n            operation_list = self.operations(full_report)\n        return ResponderReport(success=True, full_report=full_report, operations=operation_list)\n\n    def report(self, full_report) -&gt; ResponderReport:\n        \"\"\"Return a ResponderReport.\n\n        :param full_report: Responder results as dict.\n        :return: The ResponderReport\n        \"\"\"\n        return self._build_envelope(full_report)\n\n    def run(self) -&gt; ResponderReport:\n        \"\"\"Delegate to execute() when implemented by subclasses.\"\"\"\n        raise NotImplementedError(\"Subclasses must implement run() or execute()\")\n</code></pre>"},{"location":"reference/api/responder/#sentineliqsdk.responders.base.Responder.report","title":"report","text":"<pre><code>report(full_report) -&gt; ResponderReport\n</code></pre> <p>Return a ResponderReport.</p> <p>:param full_report: Responder results as dict. :return: The ResponderReport</p> Source code in <code>src/sentineliqsdk/responders/base.py</code> <pre><code>def report(self, full_report) -&gt; ResponderReport:\n    \"\"\"Return a ResponderReport.\n\n    :param full_report: Responder results as dict.\n    :return: The ResponderReport\n    \"\"\"\n    return self._build_envelope(full_report)\n</code></pre>"},{"location":"reference/api/responder/#sentineliqsdk.responders.base.Responder.run","title":"run","text":"<pre><code>run() -&gt; ResponderReport\n</code></pre> <p>Delegate to execute() when implemented by subclasses.</p> Source code in <code>src/sentineliqsdk/responders/base.py</code> <pre><code>def run(self) -&gt; ResponderReport:\n    \"\"\"Delegate to execute() when implemented by subclasses.\"\"\"\n    raise NotImplementedError(\"Subclasses must implement run() or execute()\")\n</code></pre>"},{"location":"reference/api/worker/","title":"Refer\u00eancia da API: Worker","text":""},{"location":"reference/api/worker/#sentineliqsdk.core.worker.Worker","title":"sentineliqsdk.core.worker.Worker","text":"<p>               Bases: <code>ABC</code></p> <p>Common functionality for analyzers and responders.</p> Source code in <code>src/sentineliqsdk/core/worker.py</code> <pre><code>class Worker(ABC):\n    \"\"\"Common functionality for analyzers and responders.\"\"\"\n\n    def __init__(\n        self,\n        input_data: WorkerInput,\n        secret_phrases: tuple[str, ...] | None = None,\n    ) -&gt; None:\n        self.secret_phrases = DEFAULT_SECRET_PHRASES if secret_phrases is None else secret_phrases\n        self._input = input_data\n\n        # Set parameters from structured input\n        self.data_type = self._input.data_type\n        self.tlp = self._input.tlp\n        self.pap = self._input.pap\n\n        # Load configuration\n        self.enable_check_tlp = self._input.config.check_tlp\n        self.max_tlp = self._input.config.max_tlp\n        self.enable_check_pap = self._input.config.check_pap\n        self.max_pap = self._input.config.max_pap\n\n        # Set proxy configuration\n        self.http_proxy = self._input.config.proxy.http\n        self.https_proxy = self._input.config.proxy.https\n        self.__set_proxies()\n\n        # Validate TLP/PAP\n        self._validate_tlp_pap()\n\n    def __set_proxies(self) -&gt; None:\n        EnvProxyConfigurator().set_environ(self.http_proxy, self.https_proxy)\n\n    def _validate_tlp_pap(self) -&gt; None:\n        \"\"\"Validate TLP and PAP values against configured limits.\"\"\"\n        if self.enable_check_tlp and self.tlp &gt; self.max_tlp:\n            self.error(\"TLP is higher than allowed.\")\n        if self.enable_check_pap and self.pap &gt; self.max_pap:\n            self.error(\"PAP is higher than allowed.\")\n\n    def get_data(self) -&gt; Any:\n        \"\"\"Return data from input dict.\n\n        :return: Data (observable value) given through Cortex\n        \"\"\"\n        return self._input.data\n\n    @staticmethod\n    def build_operation(op_type: str, **parameters: Any) -&gt; Operation:\n        \"\"\"\n        Build an operation descriptor.\n\n        :param op_type: an operation type as a string\n        :param parameters: a dict including the operation's params\n        :return: Operation dataclass\n        \"\"\"\n        return Operation(operation_type=op_type, parameters=parameters)\n\n    def operations(self, raw: Any) -&gt; list[Operation]:\n        \"\"\"Return the list of operations to execute after the job completes.\n\n        :returns: by default return an empty array\n        \"\"\"\n        return []\n\n    def get_env(self, key: str, default: Any | None = None, message: str | None = None) -&gt; Any:\n        \"\"\"\n        Wrap access to configuration values from the environment.\n\n        :param key: Key of the environment variable to get.\n        :param default: Default value, if not found. Default: None\n        :param message: Error message. If given and key not found, exit with error.\n                        Default: None\n        \"\"\"\n        if key in os.environ:\n            return os.environ[key]\n        if message is not None:\n            self.error(message)\n        return default\n\n    # Programmatic configuration accessors\n    def _get_from_mapping(\n        self, mapping: Mapping[str, Any], path: str, default: Any | None = None\n    ) -&gt; Any:\n        \"\"\"Resolve dotted-path keys from a mapping, returning default when missing.\"\"\"\n        cur: Any = mapping\n        for part in str(path).split(\".\"):\n            if isinstance(cur, Mapping) and part in cur:\n                cur = cur[part]  # type: ignore[index]\n            else:\n                return default\n        return cur\n\n    def get_config(self, path: str, default: Any | None = None) -&gt; Any:\n        \"\"\"Get a value from WorkerConfig.params using a dotted path.\"\"\"\n        return self._get_from_mapping(self._input.config.params, path, default)\n\n    def get_secret(self, path: str, default: Any | None = None, message: str | None = None) -&gt; Any:\n        \"\"\"Get a value from WorkerConfig.secrets using a dotted path, with optional error.\"\"\"\n        val = self._get_from_mapping(self._input.config.secrets, path, default)\n        if val is None and message is not None:\n            self.error(message)\n        return val\n\n    def error(self, message: str, *, ensure_ascii: bool | None = None) -&gt; NoReturn:\n        \"\"\"\n        Stop analyzer with an error message.\n\n        :param message: Error message\n        \"\"\"\n        # Create error response using dataclass\n        error_response = WorkerError(success=False, error_message=message, input_data=self._input)\n\n        # Convert config to dict for sanitization\n        config_dict = {\n            \"check_tlp\": self._input.config.check_tlp,\n            \"max_tlp\": self._input.config.max_tlp,\n            \"check_pap\": self._input.config.check_pap,\n            \"max_pap\": self._input.config.max_pap,\n            \"auto_extract\": self._input.config.auto_extract,\n            \"proxy\": {\n                \"http\": self._input.config.proxy.http,\n                \"https\": self._input.config.proxy.https,\n            },\n            # Include programmatic params/secrets for sanitization in error payloads\n            \"params\": dict(getattr(self._input.config, \"params\", {})),\n            \"secrets\": dict(getattr(self._input.config, \"secrets\", {})),\n        }\n\n        # Sanitize config to remove sensitive information\n        sanitized_config = sanitize_config(config_dict, self.secret_phrases)\n\n        # Convert to dict for JSON output\n        error_dict = {\n            \"success\": error_response.success,\n            \"errorMessage\": error_response.error_message,\n            \"input\": {\n                \"dataType\": self._input.data_type,\n                \"data\": self._input.data,\n                \"filename\": self._input.filename,\n                \"tlp\": self._input.tlp,\n                \"pap\": self._input.pap,\n                \"config\": sanitized_config,\n            },\n        }\n\n        # Instead of exiting the process, raise an exception with the serialized error payload\n        # to allow callers/tests to handle the failure without terminating the interpreter.\n        serialized = json.dumps(\n            error_dict, ensure_ascii=JSON_ENSURE_ASCII if ensure_ascii is None else ensure_ascii\n        )\n        raise RuntimeError(serialized)\n\n    def summary(self, raw: Any) -&gt; dict[str, Any]:\n        \"\"\"Return a summary for 'short.html' template.\n\n        Overwrite it for your needs!\n\n        :returns: by default return an empty dict\n        \"\"\"\n        return {}\n\n    def artifacts(self, raw: Any) -&gt; list[Artifact]:\n        \"\"\"Return a list of artifacts (empty by default).\"\"\"\n        return []\n\n    def report(self, output: dict[str, Any]) -&gt; dict[str, Any] | Any:\n        \"\"\"Return a JSON dict in memory.\n\n        :param output: worker output.\n        :return: The output dict or report object\n        \"\"\"\n        return output\n\n    @abstractmethod\n    def run(self) -&gt; Any:\n        \"\"\"Entry point to implement in subclasses.\"\"\"\n</code></pre>"},{"location":"reference/api/worker/#sentineliqsdk.core.worker.Worker.artifacts","title":"artifacts","text":"<pre><code>artifacts(raw: Any) -&gt; list[Artifact]\n</code></pre> <p>Return a list of artifacts (empty by default).</p> Source code in <code>src/sentineliqsdk/core/worker.py</code> <pre><code>def artifacts(self, raw: Any) -&gt; list[Artifact]:\n    \"\"\"Return a list of artifacts (empty by default).\"\"\"\n    return []\n</code></pre>"},{"location":"reference/api/worker/#sentineliqsdk.core.worker.Worker.build_operation","title":"build_operation  <code>staticmethod</code>","text":"<pre><code>build_operation(\n    op_type: str, **parameters: Any\n) -&gt; Operation\n</code></pre> <p>Build an operation descriptor.</p> <p>:param op_type: an operation type as a string :param parameters: a dict including the operation's params :return: Operation dataclass</p> Source code in <code>src/sentineliqsdk/core/worker.py</code> <pre><code>@staticmethod\ndef build_operation(op_type: str, **parameters: Any) -&gt; Operation:\n    \"\"\"\n    Build an operation descriptor.\n\n    :param op_type: an operation type as a string\n    :param parameters: a dict including the operation's params\n    :return: Operation dataclass\n    \"\"\"\n    return Operation(operation_type=op_type, parameters=parameters)\n</code></pre>"},{"location":"reference/api/worker/#sentineliqsdk.core.worker.Worker.error","title":"error","text":"<pre><code>error(\n    message: str, *, ensure_ascii: bool | None = None\n) -&gt; NoReturn\n</code></pre> <p>Stop analyzer with an error message.</p> <p>:param message: Error message</p> Source code in <code>src/sentineliqsdk/core/worker.py</code> <pre><code>def error(self, message: str, *, ensure_ascii: bool | None = None) -&gt; NoReturn:\n    \"\"\"\n    Stop analyzer with an error message.\n\n    :param message: Error message\n    \"\"\"\n    # Create error response using dataclass\n    error_response = WorkerError(success=False, error_message=message, input_data=self._input)\n\n    # Convert config to dict for sanitization\n    config_dict = {\n        \"check_tlp\": self._input.config.check_tlp,\n        \"max_tlp\": self._input.config.max_tlp,\n        \"check_pap\": self._input.config.check_pap,\n        \"max_pap\": self._input.config.max_pap,\n        \"auto_extract\": self._input.config.auto_extract,\n        \"proxy\": {\n            \"http\": self._input.config.proxy.http,\n            \"https\": self._input.config.proxy.https,\n        },\n        # Include programmatic params/secrets for sanitization in error payloads\n        \"params\": dict(getattr(self._input.config, \"params\", {})),\n        \"secrets\": dict(getattr(self._input.config, \"secrets\", {})),\n    }\n\n    # Sanitize config to remove sensitive information\n    sanitized_config = sanitize_config(config_dict, self.secret_phrases)\n\n    # Convert to dict for JSON output\n    error_dict = {\n        \"success\": error_response.success,\n        \"errorMessage\": error_response.error_message,\n        \"input\": {\n            \"dataType\": self._input.data_type,\n            \"data\": self._input.data,\n            \"filename\": self._input.filename,\n            \"tlp\": self._input.tlp,\n            \"pap\": self._input.pap,\n            \"config\": sanitized_config,\n        },\n    }\n\n    # Instead of exiting the process, raise an exception with the serialized error payload\n    # to allow callers/tests to handle the failure without terminating the interpreter.\n    serialized = json.dumps(\n        error_dict, ensure_ascii=JSON_ENSURE_ASCII if ensure_ascii is None else ensure_ascii\n    )\n    raise RuntimeError(serialized)\n</code></pre>"},{"location":"reference/api/worker/#sentineliqsdk.core.worker.Worker.get_config","title":"get_config","text":"<pre><code>get_config(path: str, default: Any | None = None) -&gt; Any\n</code></pre> <p>Get a value from WorkerConfig.params using a dotted path.</p> Source code in <code>src/sentineliqsdk/core/worker.py</code> <pre><code>def get_config(self, path: str, default: Any | None = None) -&gt; Any:\n    \"\"\"Get a value from WorkerConfig.params using a dotted path.\"\"\"\n    return self._get_from_mapping(self._input.config.params, path, default)\n</code></pre>"},{"location":"reference/api/worker/#sentineliqsdk.core.worker.Worker.get_data","title":"get_data","text":"<pre><code>get_data() -&gt; Any\n</code></pre> <p>Return data from input dict.</p> <p>:return: Data (observable value) given through Cortex</p> Source code in <code>src/sentineliqsdk/core/worker.py</code> <pre><code>def get_data(self) -&gt; Any:\n    \"\"\"Return data from input dict.\n\n    :return: Data (observable value) given through Cortex\n    \"\"\"\n    return self._input.data\n</code></pre>"},{"location":"reference/api/worker/#sentineliqsdk.core.worker.Worker.get_env","title":"get_env","text":"<pre><code>get_env(\n    key: str,\n    default: Any | None = None,\n    message: str | None = None,\n) -&gt; Any\n</code></pre> <p>Wrap access to configuration values from the environment.</p> <p>:param key: Key of the environment variable to get. :param default: Default value, if not found. Default: None :param message: Error message. If given and key not found, exit with error.                 Default: None</p> Source code in <code>src/sentineliqsdk/core/worker.py</code> <pre><code>def get_env(self, key: str, default: Any | None = None, message: str | None = None) -&gt; Any:\n    \"\"\"\n    Wrap access to configuration values from the environment.\n\n    :param key: Key of the environment variable to get.\n    :param default: Default value, if not found. Default: None\n    :param message: Error message. If given and key not found, exit with error.\n                    Default: None\n    \"\"\"\n    if key in os.environ:\n        return os.environ[key]\n    if message is not None:\n        self.error(message)\n    return default\n</code></pre>"},{"location":"reference/api/worker/#sentineliqsdk.core.worker.Worker.get_secret","title":"get_secret","text":"<pre><code>get_secret(\n    path: str,\n    default: Any | None = None,\n    message: str | None = None,\n) -&gt; Any\n</code></pre> <p>Get a value from WorkerConfig.secrets using a dotted path, with optional error.</p> Source code in <code>src/sentineliqsdk/core/worker.py</code> <pre><code>def get_secret(self, path: str, default: Any | None = None, message: str | None = None) -&gt; Any:\n    \"\"\"Get a value from WorkerConfig.secrets using a dotted path, with optional error.\"\"\"\n    val = self._get_from_mapping(self._input.config.secrets, path, default)\n    if val is None and message is not None:\n        self.error(message)\n    return val\n</code></pre>"},{"location":"reference/api/worker/#sentineliqsdk.core.worker.Worker.operations","title":"operations","text":"<pre><code>operations(raw: Any) -&gt; list[Operation]\n</code></pre> <p>Return the list of operations to execute after the job completes.</p> <p>:returns: by default return an empty array</p> Source code in <code>src/sentineliqsdk/core/worker.py</code> <pre><code>def operations(self, raw: Any) -&gt; list[Operation]:\n    \"\"\"Return the list of operations to execute after the job completes.\n\n    :returns: by default return an empty array\n    \"\"\"\n    return []\n</code></pre>"},{"location":"reference/api/worker/#sentineliqsdk.core.worker.Worker.report","title":"report","text":"<pre><code>report(output: dict[str, Any]) -&gt; dict[str, Any] | Any\n</code></pre> <p>Return a JSON dict in memory.</p> <p>:param output: worker output. :return: The output dict or report object</p> Source code in <code>src/sentineliqsdk/core/worker.py</code> <pre><code>def report(self, output: dict[str, Any]) -&gt; dict[str, Any] | Any:\n    \"\"\"Return a JSON dict in memory.\n\n    :param output: worker output.\n    :return: The output dict or report object\n    \"\"\"\n    return output\n</code></pre>"},{"location":"reference/api/worker/#sentineliqsdk.core.worker.Worker.run","title":"run  <code>abstractmethod</code>","text":"<pre><code>run() -&gt; Any\n</code></pre> <p>Entry point to implement in subclasses.</p> Source code in <code>src/sentineliqsdk/core/worker.py</code> <pre><code>@abstractmethod\ndef run(self) -&gt; Any:\n    \"\"\"Entry point to implement in subclasses.\"\"\"\n</code></pre>"},{"location":"reference/api/worker/#sentineliqsdk.core.worker.Worker.summary","title":"summary","text":"<pre><code>summary(raw: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return a summary for 'short.html' template.</p> <p>Overwrite it for your needs!</p> <p>:returns: by default return an empty dict</p> Source code in <code>src/sentineliqsdk/core/worker.py</code> <pre><code>def summary(self, raw: Any) -&gt; dict[str, Any]:\n    \"\"\"Return a summary for 'short.html' template.\n\n    Overwrite it for your needs!\n\n    :returns: by default return an empty dict\n    \"\"\"\n    return {}\n</code></pre>"},{"location":"troubleshooting/common-issues/","title":"Solu\u00e7\u00e3o de Problemas: Problemas Comuns","text":"<ul> <li>Falhas de Lint (ruff/mypy)</li> <li>Execute <code>poe lint</code> e corrija os problemas encontrados. Garanta que os imports sejam absolutos e o comprimento da linha seja \u2264 100 caracteres.</li> <li> <p>Para erros de tipagem, prefira adicionar tipos precisos aos campos de dataclass e retornos de m\u00e9todos.</p> </li> <li> <p>Testes Falhando</p> </li> <li>Execute <code>poe test</code> localmente e concentre-se na menor unidade que est\u00e1 falhando primeiro.</li> <li> <p>Use <code>-k &lt;nome&gt;</code> para selecionar testes espec\u00edficos.</p> </li> <li> <p>Erro de TLP/PAP na Inicializa\u00e7\u00e3o</p> </li> <li>Mensagem: <code>TLP is higher than allowed.</code> ou <code>PAP is higher than allowed.</code></li> <li> <p>Corre\u00e7\u00e3o: diminua o <code>tlp</code>/<code>pap</code> em <code>WorkerInput</code> ou aumente <code>max_tlp</code>/<code>max_pap</code> em <code>WorkerConfig</code>.</p> </li> <li> <p>Rede Atr\u00e1s de Proxy</p> </li> <li> <p>Configure <code>WorkerInput.config.proxy</code> (preferencial). O Worker exporta essas configura\u00e7\u00f5es para o ambiente do processo para clientes HTTP da stdlib.</p> </li> <li> <p>Exemplo Imprime Apenas o Plano (sem rede)</p> </li> <li>Adicione <code>--execute</code> para realizar chamadas de rede reais.</li> <li> <p>Algumas opera\u00e7\u00f5es tamb\u00e9m exigem <code>--include-dangerous</code>.</p> </li> <li> <p>Credenciais Ausentes</p> </li> <li>Shodan: defina <code>shodan.api_key</code> em <code>WorkerConfig.secrets</code> ou passe <code>--api-key</code> para o exemplo.</li> <li> <p>Axur: defina <code>axur.api_token</code> em <code>WorkerConfig.secrets</code> ou passe <code>--token</code>.</p> </li> <li> <p>Erros de Build do MkDocs</p> </li> <li>Garanta que as depend\u00eancias de desenvolvimento estejam instaladas: <code>pip install -e .[dev]</code> ou <code>uv sync --dev</code>.</li> <li>Execute <code>poe docs</code> e revise os avisos com <code>--strict</code> habilitado.</li> </ul>"},{"location":"troubleshooting/faq/","title":"Perguntas Frequentes","text":"<ul> <li>Como executo um exemplo?</li> <li> <p>Execute <code>python examples/.../example.py --help</code> para ver as flags. Por padr\u00e3o, os exemplos s\u00e3o executados em modo dry-run; adicione <code>--execute</code> para realizar chamadas de rede. Algumas a\u00e7\u00f5es tamb\u00e9m exigem <code>--include-dangerous</code>.</p> </li> <li> <p>Por que dataclasses em vez de entrada de dicion\u00e1rio?</p> </li> <li> <p>A API p\u00fablica usa dataclasses para seguran\u00e7a de tipo e clareza. Passe um <code>WorkerInput</code> para o construtor do worker; a entrada de dicion\u00e1rio legada foi removida neste reposit\u00f3rio.</p> </li> <li> <p>Como obtenho resultados na mem\u00f3ria?</p> </li> <li> <p>Implemente <code>execute()</code> retornando <code>AnalyzerReport</code>/<code>ResponderReport</code> e fa\u00e7a com que <code>run()</code> retorne <code>self.execute()</code>. Em seguida, chame <code>.execute()</code> ou <code>.run()</code> diretamente e leia <code>.full_report</code>.</p> </li> <li> <p>De onde v\u00eam os artefatos?</p> </li> <li> <p>Quando <code>auto_extract</code> est\u00e1 habilitado (padr\u00e3o), o Analyzer usa o Extractor para encontrar IOCs em seu <code>full_report</code>, excluindo o observ\u00e1vel original. Voc\u00ea tamb\u00e9m pode adicionar artefatos manualmente via <code>self.build_artifact(...)</code>.</p> </li> <li> <p>Como adiciono um novo detector?</p> </li> <li> <p>Para uso local, crie um <code>@dataclass</code> com <code>name</code> e <code>matches()</code> e registre-o com <code>Extractor.register_detector(...)</code>. Para tipos principais, atualize <code>models.DataType</code> e a lista de preced\u00eancia em <code>extractors/regex.py</code>.</p> </li> <li> <p>Estou atr\u00e1s de um proxy corporativo. Como o configuro?</p> </li> <li>Use <code>WorkerInput.config.proxy</code> (preferencial). O Worker exporta essas configura\u00e7\u00f5es para o ambiente do processo na inicializa\u00e7\u00e3o para que os clientes HTTP da stdlib as respeitem.</li> </ul>"},{"location":"tutorials/building-analyzers/","title":"Construindo Analisadores","text":"<p>Este tutorial detalha a cria\u00e7\u00e3o de um analisador com qualidade de produ\u00e7\u00e3o, seguindo os padr\u00f5es do SDK.</p>"},{"location":"tutorials/building-analyzers/#o-que-voce-ira-construir","title":"O que voc\u00ea ir\u00e1 construir:","text":"<ul> <li>Uma classe <code>&lt;Nome&gt;Analyzer</code> que estende <code>sentineliqsdk.analyzers.Analyzer</code>.</li> <li>Um m\u00e9todo <code>execute() -&gt; AnalyzerReport</code> que retorna um envelope estruturado via <code>self.report(...)</code>.</li> <li>Um m\u00e9todo <code>run()</code> que retorna <code>self.execute()</code> para uso program\u00e1tico.</li> <li>Um exemplo execut\u00e1vel em <code>examples/analyzers/</code> utilizando <code>WorkerInput</code>.</li> </ul>"},{"location":"tutorials/building-analyzers/#1-definindo-a-classe","title":"1) Definindo a Classe","text":"<pre><code>from __future__ import annotations\n\nfrom sentineliqsdk import Analyzer\nfrom sentineliqsdk.models import AnalyzerReport\n\n\nclass MyAnalyzer(Analyzer):\n    def execute(self) -&gt; AnalyzerReport:\n        observable = self.get_data()\n        taxonomy = self.build_taxonomy(\"safe\", \"namespace\", \"predicate\", str(observable))\n        full = {\n            \"observable\": observable,\n            \"verdict\": \"safe\",\n            \"taxonomy\": [taxonomy.to_dict()],\n        }\n        return self.report(full)\n\n    def run(self) -&gt; AnalyzerReport:\n        return self.execute()\n</code></pre>"},{"location":"tutorials/building-analyzers/#2-autoextracao-de-artefatos","title":"2) Autoextra\u00e7\u00e3o de Artefatos","text":"<ul> <li>A autoextra\u00e7\u00e3o \u00e9 habilitada por padr\u00e3o, a menos que <code>WorkerInput.config.auto_extract</code> seja <code>False</code>.</li> <li>O m\u00e9todo <code>artifacts(full_report)</code> do analisador utiliza o Extractor para encontrar IOCs (Indicadores de Compromisso) no seu relat\u00f3rio, excluindo o observ\u00e1vel original.</li> <li>Para itens personalizados, construa artefatos explicitamente com <code>self.build_artifact(...)</code> e inclua-os no envelope.</li> </ul>"},{"location":"tutorials/building-analyzers/#3-operacoes-e-acoes-de-acompanhamento","title":"3) Opera\u00e7\u00f5es e A\u00e7\u00f5es de Acompanhamento","text":"<p>Utilize <code>self.build_operation(\"&lt;tipo&gt;\", **params)</code> e sobrescreva <code>operations(full_report)</code> quando precisar sugerir pr\u00f3ximos passos (por exemplo, ca\u00e7a, enriquecimento, bloqueio).</p>"},{"location":"tutorials/building-analyzers/#4-exemplo-e-flags-da-cli","title":"4) Exemplo e Flags da CLI","text":"<ul> <li>Coloque um exemplo execut\u00e1vel em <code>examples/analyzers/&lt;snake&gt;_example.py</code>.</li> <li>Por padr\u00e3o, o exemplo deve ser dry-run. Adicione <code>--execute</code> para realizar chamadas de rede.</li> <li>Use <code>--include-dangerous</code> para proteger a\u00e7\u00f5es de alto impacto (por exemplo, varreduras).</li> </ul>"},{"location":"tutorials/building-analyzers/#5-validacao","title":"5) Valida\u00e7\u00e3o","text":"<ul> <li>Execute <code>poe lint</code> (ruff + mypy) e <code>poe test</code> (pytest) localmente antes de abrir um Pull Request (PR).</li> </ul>"},{"location":"tutorials/building-responders/","title":"Construindo Responders","text":"<p>Responders encapsulam a\u00e7\u00f5es como bloquear um endere\u00e7o IP ou notificar um sistema externo.</p>"},{"location":"tutorials/building-responders/#1-definindo-a-classe","title":"1) Definindo a Classe","text":"<pre><code>from __future__ import annotations\n\nfrom sentineliqsdk import Responder\nfrom sentineliqsdk.models import ResponderReport\n\n\nclass BlockIpResponder(Responder):\n    def execute(self) -&gt; ResponderReport:\n        ip = self.get_data()\n        ops = [self.build_operation(\"block\", target=ip)]\n        return self.report({\"action\": \"block\", \"target\": ip})\n\n    def run(self) -&gt; ResponderReport:\n        return self.execute()\n</code></pre>"},{"location":"tutorials/building-responders/#2-exemplos-e-flags-de-seguranca","title":"2) Exemplos e Flags de Seguran\u00e7a","text":"<ul> <li>Coloque os exemplos em <code>examples/responders/&lt;nome&gt;_example.py</code>.</li> <li>Por padr\u00e3o, o exemplo deve ser dry-run; adicione <code>--execute</code> para realizar as altera\u00e7\u00f5es.</li> <li>Use <code>--include-dangerous</code> para explicitamente proteger opera\u00e7\u00f5es de alto impacto.</li> </ul>"},{"location":"tutorials/building-responders/#3-entrada-e-saida","title":"3) Entrada e Sa\u00edda","text":"<ul> <li>Use <code>WorkerInput(data_type=..., data=...)</code> para passar o alvo.</li> <li>Retorne um <code>ResponderReport</code> usando <code>self.report(full_report)</code>, opcionalmente incluindo <code>operations</code> para tarefas de acompanhamento.</li> </ul>"},{"location":"tutorials/file-processing/","title":"Processamento de Arquivos","text":"<p>Analisadores podem operar em arquivos configurando <code>data_type == \"file\"</code> e fornecendo <code>WorkerInput.filename</code>. Neste modo, <code>Analyzer.get_data()</code> retorna o caminho do arquivo.</p>"},{"location":"tutorials/file-processing/#padrao","title":"Padr\u00e3o:","text":"<pre><code>from __future__ import annotations\n\nfrom pathlib import Path\n\nfrom sentineliqsdk import Analyzer, WorkerInput\nfrom sentineliqsdk.models import AnalyzerReport\n\n\nclass FileHashAnalyzer(Analyzer):\n    def execute(self) -&gt; AnalyzerReport:\n        filename = Path(self.get_data())  # caminho do arquivo\n        data = filename.read_bytes()\n        sha256 = __import__(\"hashlib\").sha256(data).hexdigest()\n        tax = self.build_taxonomy(\"info\", \"file\", \"sha256\", sha256)\n        return self.report({\n            \"filename\": str(filename),\n            \"sha256\": sha256,\n            \"taxonomy\": [tax.to_dict()],\n        })\n\n    def run(self) -&gt; AnalyzerReport:\n        return self.execute()\n\n\nif __name__ == \"__main__\":\n    inp = WorkerInput(data_type=\"file\", data=None, filename=\"/path/to/file\")\n    print(FileHashAnalyzer(inp).execute().full_report)\n</code></pre>"},{"location":"tutorials/file-processing/#observacoes","title":"Observa\u00e7\u00f5es:","text":"<ul> <li>Evite ler arquivos muito grandes diretamente na mem\u00f3ria; utilize streaming quando aplic\u00e1vel.</li> <li>Respeite as restri\u00e7\u00f5es de TLP/PAP e n\u00e3o exfiltre conte\u00fado a menos que permitido.</li> <li>Quando <code>auto_extract</code> est\u00e1 habilitado, os IOCs encontrados no relat\u00f3rio completo s\u00e3o capturados como artefatos.</li> </ul>"}]}