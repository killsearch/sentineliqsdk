---
globs: examples/**/*.py,docs/**/*.md
description: Mandatory examples and documentation requirements
---

# Examples and Documentation Requirements

## Mandatory Examples Rule
Always add a runnable example in `examples/` when introducing a new Analyzer, Responder, or Detector.

### Naming Convention
- **Analyzers**: `examples/analyzers/<name>_example.py`
- **Responders**: `examples/responders/<name>_example.py`
- **Detectors**: `examples/detectors/<name>_example.py`

### Example Requirements
- Use dataclass input (`WorkerInput`) and call `.run()` (or `.execute()` when provided)
- Be runnable locally with only stdlib + SDK
- Print a compact result to STDOUT
- Network calls default to dry-run and require `--execute`
- Impactful operations (e.g., scans) must be gated behind `--include-dangerous`
- Reference examples from README or docs when helpful

### Example Structure
```python
from __future__ import annotations
import json
from sentineliqsdk import Analyzer, WorkerInput

class MyAnalyzer(Analyzer):
    # ... implementation ...

if __name__ == "__main__":
    report = MyAnalyzer(WorkerInput(data_type="ip", data="1.2.3.4")).run()
    print(json.dumps(report.full_report, ensure_ascii=False))
```

## Documentation Updates (Always Required)
Keep documentation in sync with any code change or new capability:

### Required Updates
- Update docs under `docs/` (Guides, Tutorials, Examples, Reference)
- Reflect behavior, flags, and safety gates (`--execute`, `--include-dangerous`)
- Link new examples in relevant pages (`docs/examples/*.md`)
- Add programmatic usage page for each module under `docs/modulos/<kind>/<name>.md`
- Update navigation in `mkdocs.yml` under the "Modules" section

### Programmatic Usage Pages
Each module must have a page at `docs/modulos/<kind>/<name>.md` that shows:
- Dataclass input (`WorkerInput`)
- Calling `.execute()` (or `.run()`)
- Using only stdlib + SDK
- Update navigation in `mkdocs.yml`

### Documentation Structure
```
docs/
├── guides/           # How-to guides
├── tutorials/        # Step-by-step tutorials
├── examples/         # Example documentation
├── reference/        # API reference
└── modulos/          # Module-specific docs
    ├── analyzers/
    ├── responders/
    └── detectors/
```

### Validation
- Run `poe docs` (or `poe docs-serve`) to validate the site locally before merging
- Ensure mkdocstrings pages exist for new public API or modules
- Update navigation in `mkdocs.yml` when adding new modules

## Safety Gates
Examples must implement safety gates:
- `--execute`: Enable real network calls (default: dry-run)
- `--include-dangerous`: Enable impactful actions (scans, blocks, etc.)
- Default behavior should be safe and non-destructive

## Example Command Line Usage
```python
import argparse

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--execute", action="store_true", help="Execute real API calls")
    parser.add_argument("--include-dangerous", action="store_true", help="Include dangerous operations")
    args = parser.parse_args()
    
    # Use args.execute and args.include_dangerous to control behavior
```

## Checklist for New Modules
- [ ] Example created in `examples/<kind>/<name>_example.py`
- [ ] Example is runnable with only stdlib + SDK
- [ ] Example prints compact JSON result
- [ ] Safety gates implemented (`--execute`, `--include-dangerous`)
- [ ] Documentation updated in `docs/`
- [ ] Programmatic usage page added: `docs/modulos/<kind>/<name>.md`
- [ ] Navigation updated in `mkdocs.yml`
- [ ] `poe docs` passes locally